diff --git a/build/declarations/loading2/octree-geometry-node.d.ts b/build/declarations/loading2/octree-geometry-node.d.ts
index 9b5c9aa42c762e18b99bd574d5fd783f4dd5d636..0eda42de27382e44b3d0d919ba654dc17380eb96 100644
--- a/build/declarations/loading2/octree-geometry-node.d.ts
+++ b/build/declarations/loading2/octree-geometry-node.d.ts
@@ -1,15 +1,16 @@
 import { Box3, BufferGeometry, Sphere } from 'three';
-import { IPointCloudTreeNode } from '../types';
+import { IPointCloudGeometryNode } from '../types';
 import { OctreeGeometry } from './octree-geometry';
-export declare class OctreeGeometryNode implements IPointCloudTreeNode {
+export declare class OctreeGeometryNode implements IPointCloudGeometryNode {
     name: string;
     octreeGeometry: OctreeGeometry;
     boundingBox: Box3;
     constructor(name: string, octreeGeometry: OctreeGeometry, boundingBox: Box3);
     loaded: boolean;
     loading: boolean;
+    failed: boolean;
     parent: OctreeGeometryNode | null;
-    geometry: BufferGeometry | null;
+    geometry: BufferGeometry | undefined;
     nodeType?: number;
     byteOffset?: bigint;
     byteSize?: bigint;
@@ -34,7 +35,7 @@ export declare class OctreeGeometryNode implements IPointCloudTreeNode {
     isLoaded(): boolean;
     getBoundingSphere(): Sphere;
     getBoundingBox(): Box3;
-    load(): void;
+    load(): Promise<void>;
     getNumPoints(): number;
     dispose(): void;
     traverse(cb: (node: OctreeGeometryNode) => void, includeSelf?: boolean): void;
diff --git a/build/declarations/materials/clipping.d.ts b/build/declarations/materials/clipping.d.ts
index af45f6bc001035908613763677d11ebbd4201635..f78673ba0b246a4d66b54bf3c86b0d887b4bb5e3 100644
--- a/build/declarations/materials/clipping.d.ts
+++ b/build/declarations/materials/clipping.d.ts
@@ -1,4 +1,4 @@
-import { Box3, Matrix4, Vector3 } from 'three';
+import { Box3, Color, Matrix4, Vector3 } from 'three';
 export declare enum ClipMode {
     DISABLED = 0,
     CLIP_OUTSIDE = 1,
@@ -11,4 +11,5 @@ export interface IClipBox {
     inverse: Matrix4;
     matrix: Matrix4;
     position: Vector3;
+    color?: Color;
 }
diff --git a/build/declarations/materials/point-cloud-material.d.ts b/build/declarations/materials/point-cloud-material.d.ts
index a92a6661968a5e24d87d69fbf3990e9ead665c78..1a90561c96d06d7767df9f92e3449685ed9b82e7 100644
--- a/build/declarations/materials/point-cloud-material.d.ts
+++ b/build/declarations/materials/point-cloud-material.d.ts
@@ -18,6 +18,7 @@ export interface IPointCloudMaterialUniforms {
     classificationLUT: IUniform<Texture>;
     clipBoxCount: IUniform<number>;
     clipBoxes: IUniform<Float32Array>;
+    clipHighlightColors: IUniform<Float32Array>;
     clipExtent: IUniform<[number, number, number, number]>;
     depthMap: IUniform<Texture | null>;
     diffuse: IUniform<[number, number, number]>;
diff --git a/build/declarations/point-cloud-octree-geometry-node.d.ts b/build/declarations/point-cloud-octree-geometry-node.d.ts
index 7d1b11a1588599282582d2c8ce94cab434f6d911..f6369b6a8c25b1baaeda0aad864f79f8affee94c 100644
--- a/build/declarations/point-cloud-octree-geometry-node.d.ts
+++ b/build/declarations/point-cloud-octree-geometry-node.d.ts
@@ -4,13 +4,13 @@
  */
 import { Box3, BufferGeometry, EventDispatcher, Sphere, Vector3 } from 'three';
 import { PointCloudOctreeGeometry } from './point-cloud-octree-geometry';
-import { IPointCloudTreeNode } from './types';
+import { IPointCloudGeometryNode } from './types';
 export interface NodeData {
     children: number;
     numPoints: number;
     name: string;
 }
-export declare class PointCloudOctreeGeometryNode extends EventDispatcher implements IPointCloudTreeNode {
+export declare class PointCloudOctreeGeometryNode extends EventDispatcher implements IPointCloudGeometryNode {
     id: number;
     name: string;
     pcoGeometry: PointCloudOctreeGeometry;
diff --git a/build/declarations/point-cloud-octree-node.d.ts b/build/declarations/point-cloud-octree-node.d.ts
index e7430c5c3539b66eac0816091c8482494cdba0f4..72af19af850508f529954c7ebafe6642455d6d4d 100644
--- a/build/declarations/point-cloud-octree-node.d.ts
+++ b/build/declarations/point-cloud-octree-node.d.ts
@@ -1,8 +1,7 @@
 import { Box3, EventDispatcher, Object3D, Points, Sphere } from 'three';
-import { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';
-import { IPointCloudTreeNode } from './types';
+import { IPointCloudGeometryNode, IPointCloudTreeNode } from './types';
 export declare class PointCloudOctreeNode extends EventDispatcher implements IPointCloudTreeNode {
-    geometryNode: PointCloudOctreeGeometryNode;
+    geometryNode: IPointCloudGeometryNode;
     sceneNode: Points;
     pcIndex: number | undefined;
     boundingBoxNode: Object3D | null;
@@ -10,7 +9,7 @@ export declare class PointCloudOctreeNode extends EventDispatcher implements IPo
     readonly loaded = true;
     readonly isTreeNode: boolean;
     readonly isGeometryNode: boolean;
-    constructor(geometryNode: PointCloudOctreeGeometryNode, sceneNode: Points);
+    constructor(geometryNode: IPointCloudGeometryNode, sceneNode: Points);
     dispose(): void;
     disposeSceneNode(): void;
     traverse(cb: (node: IPointCloudTreeNode) => void, includeSelf?: boolean): void;
diff --git a/build/declarations/point-cloud-octree.d.ts b/build/declarations/point-cloud-octree.d.ts
index e2c4c0bc9bccd1a3f6f1df45d51a2b565b0097a0..c13496ded4f5326b1933277864e8715514ef18fb 100644
--- a/build/declarations/point-cloud-octree.d.ts
+++ b/build/declarations/point-cloud-octree.d.ts
@@ -1,10 +1,9 @@
 import { Box3, Camera, Object3D, Ray, Sphere, WebGLRenderer } from 'three';
 import { PointCloudMaterial, PointSizeType } from './materials';
-import { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';
 import { PointCloudOctreeNode } from './point-cloud-octree-node';
 import { PickParams } from './point-cloud-octree-picker';
 import { PointCloudTree } from './point-cloud-tree';
-import { IPointCloudTreeNode, IPotree, PCOGeometry, PickPoint } from './types';
+import { IPointCloudGeometryNode, IPointCloudTreeNode, IPotree, PCOGeometry, PickPoint } from './types';
 export declare class PointCloudOctree extends PointCloudTree {
     potree: IPotree;
     disposed: boolean;
@@ -21,7 +20,7 @@ export declare class PointCloudOctree extends PointCloudTree {
     root: IPointCloudTreeNode | null;
     boundingBoxNodes: Object3D[];
     visibleNodes: PointCloudOctreeNode[];
-    visibleGeometry: PointCloudOctreeGeometryNode[];
+    visibleGeometry: IPointCloudGeometryNode[];
     numVisiblePoints: number;
     showBoundingBox: boolean;
     private visibleBounds;
@@ -31,7 +30,7 @@ export declare class PointCloudOctree extends PointCloudTree {
     dispose(): void;
     get pointSizeType(): PointSizeType;
     set pointSizeType(value: PointSizeType);
-    toTreeNode(geometryNode: PointCloudOctreeGeometryNode, parent?: PointCloudOctreeNode | null): PointCloudOctreeNode;
+    toTreeNode(geometryNode: IPointCloudGeometryNode, parent?: PointCloudOctreeNode | null): PointCloudOctreeNode;
     updateVisibleBounds(): void;
     updateBoundingBoxes(): void;
     updateMatrixWorld(force: boolean): void;
diff --git a/build/declarations/type-predicates.d.ts b/build/declarations/type-predicates.d.ts
index fbb5db4a23b627c511ada6323064a6920c8e4f45..ce9b755b728e026280ffda0ba7a5cfcc71da331c 100644
--- a/build/declarations/type-predicates.d.ts
+++ b/build/declarations/type-predicates.d.ts
@@ -1,4 +1,4 @@
-import { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';
+import { IPointCloudGeometryNode } from './types';
 import { PointCloudOctreeNode } from './point-cloud-octree-node';
-export declare function isGeometryNode(node?: any): node is PointCloudOctreeGeometryNode;
+export declare function isGeometryNode(node?: any): node is IPointCloudGeometryNode;
 export declare function isTreeNode(node?: any): node is PointCloudOctreeNode;
diff --git a/build/declarations/types.d.ts b/build/declarations/types.d.ts
index 89808067ca540a74e4779d696d77f2485db71a3f..5c5fccd40d4dfbd352dcb276c3e9d300478af2ce 100644
--- a/build/declarations/types.d.ts
+++ b/build/declarations/types.d.ts
@@ -1,4 +1,4 @@
-import { Box3, Camera, Sphere, Vector3, WebGLRenderer } from 'three';
+import { Box3, BufferGeometry, Camera, Sphere, Vector3, WebGLRenderer } from 'three';
 import { GetUrlFn, XhrRequest } from './loading/types';
 import { OctreeGeometry } from './loading2/octree-geometry';
 import { PointCloudOctree } from './point-cloud-octree';
@@ -19,6 +19,14 @@ export interface IPointCloudTreeNode {
     dispose(): void;
     traverse(cb: (node: IPointCloudTreeNode) => void, includeSelf?: boolean): void;
 }
+export interface IPointCloudGeometryNode extends IPointCloudTreeNode {
+    geometry: BufferGeometry | undefined;
+    oneTimeDisposeHandlers: Function[];
+    loading: boolean;
+    loaded: boolean;
+    failed: boolean;
+    load(): Promise<void>;
+}
 export interface IVisibilityUpdateResult {
     visibleNodes: IPointCloudTreeNode[];
     numVisiblePoints: number;
diff --git a/build/potree.js b/build/potree.js
index 3c065f802951399c22dff82349ec6a60d5aa67bd..6be1c860c79dca6517c1b9466b18c839bbc4af44 100644
--- a/build/potree.js
+++ b/build/potree.js
@@ -1 +1 @@
-!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I(require("three")):"function"==typeof define&&define.amd?define("potree",["three"],I):"object"==typeof exports?exports.potree=I(require("three")):g.potree=I(g.three)}(self,(__WEBPACK_EXTERNAL_MODULE__604__=>(()=>{"use strict";var __webpack_modules__={414:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\nuniform mat4 projectionMatrix;\\n\\nuniform float screenWidth;\\nuniform float screenHeight;\\n\\nuniform sampler2D map;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tfloat dx = 1.0 / screenWidth;\\n\\tfloat dy = 1.0 / screenHeight;\\n\\n\\tvec3 color = vec3(0.0, 0.0, 0.0);\\n\\tcolor += texture2D(map, vUv + vec2(-dx, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(-dx,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(-dx,  dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0,  dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx,  dy)).rgb;\\n    \\n\\tcolor = color / 9.0;\\n\\t\\n\\tgl_FragColor = vec4(color, 1.0);\\n\\t\\n\\t\\n}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL3NyYy9tYXRlcmlhbHMvc2hhZGVycy9ibHVyLmZyYWc/MjI5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgaW50O1xcblxcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnVuaWZvcm0gZmxvYXQgc2NyZWVuV2lkdGg7XFxudW5pZm9ybSBmbG9hdCBzY3JlZW5IZWlnaHQ7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcblxcblxcdGZsb2F0IGR4ID0gMS4wIC8gc2NyZWVuV2lkdGg7XFxuXFx0ZmxvYXQgZHkgPSAxLjAgLyBzY3JlZW5IZWlnaHQ7XFxuXFxuXFx0dmVjMyBjb2xvciA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsIC1keSkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgLWR5KSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAtZHkpKS5yZ2I7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsICAgMCkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgICAwKSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAgIDApKS5yZ2I7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsICBkeSkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgIGR5KSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAgZHkpKS5yZ2I7XFxuICAgIFxcblxcdGNvbG9yID0gY29sb3IgLyA5LjA7XFxuXFx0XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgMS4wKTtcXG5cXHRcXG5cXHRcXG59XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///414\n')},575:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n\\n    gl_Position =   projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc1LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL3NyYy9tYXRlcmlhbHMvc2hhZGVycy9ibHVyLnZlcnQ/NWRiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgaW50O1xcblxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZVdiA9IHV2O1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9ICAgcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxufVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///575\n')},168:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\n#if defined paraboloid_point_shape\\n\\t#extension GL_EXT_frag_depth : enable\\n#endif\\n\\nuniform mat4 viewMatrix;\\nuniform vec3 cameraPosition;\\n\\nuniform mat4 projectionMatrix;\\nuniform float opacity;\\n\\nuniform float blendHardness;\\nuniform float blendDepthSupplement;\\nuniform float fov;\\nuniform float spacing;\\nuniform float pcIndex;\\nuniform float screenWidth;\\nuniform float screenHeight;\\n\\nuniform sampler2D depthMap;\\n\\n#if defined (clip_horizontally) || defined (clip_vertically)\\n\\tuniform vec4 clipExtent;\\n#endif\\n\\n#ifdef use_texture_blending\\n\\tuniform sampler2D backgroundMap;\\n#endif\\n\\n\\n#ifdef use_point_cloud_mixing\\n\\tuniform int pointCloudMixingMode;\\n\\tuniform float pointCloudID;\\n\\tuniform float pointCloudMixAngle;\\n\\tuniform float stripeDistanceX;\\n\\tuniform float stripeDistanceY;\\n\\n\\tuniform float stripeDivisorX;\\n\\tuniform float stripeDivisorY;\\n#endif\\n\\n#ifdef highlight_point\\n\\tuniform vec4 highlightedPointColor;\\n#endif\\n\\nvarying vec3 vColor;\\n\\n#if !defined(color_type_point_index)\\n\\tvarying float vOpacity;\\n#endif\\n\\n#if defined(weighted_splats)\\n\\tvarying float vLinearDepth;\\n#endif\\n\\n#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\tvarying float vLogDepth;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\tvarying float vRadius;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\tvarying vec3 vNormal;\\n#endif\\n\\n#ifdef highlight_point\\n\\tvarying float vHighlight;\\n#endif\\n\\nfloat specularStrength = 1.0;\\n\\nvoid main() {\\n\\tvec3 color = vColor;\\n\\tfloat depth = gl_FragCoord.z;\\n\\n\\t#if defined (clip_horizontally) || defined (clip_vertically)\\n\\tvec2 ndc = vec2((gl_FragCoord.x / screenWidth), 1.0 - (gl_FragCoord.y / screenHeight));\\n\\n\\tif(step(clipExtent.x, ndc.x) * step(ndc.x, clipExtent.z) < 1.0)\\n\\t{\\n\\t\\tdiscard;\\n\\t}\\n\\n\\tif(step(clipExtent.y, ndc.y) * step(ndc.y, clipExtent.w) < 1.0)\\n\\t{\\n\\t\\tdiscard;\\n\\t}\\n\\t#endif  \\n\\n\\t#if defined(circle_point_shape) || defined(paraboloid_point_shape) || defined (weighted_splats)\\n\\t\\tfloat u = 2.0 * gl_PointCoord.x - 1.0;\\n\\t\\tfloat v = 2.0 * gl_PointCoord.y - 1.0;\\n\\t#endif\\n\\n\\t#if defined(circle_point_shape) || defined (weighted_splats)\\n\\t\\tfloat cc = u*u + v*v;\\n\\t\\tif(cc > 1.0){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t\\tvec2 uv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\\n\\t\\tfloat sDepth = texture2D(depthMap, uv).r;\\n\\t\\tif(vLinearDepth > sDepth + vRadius + blendDepthSupplement){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#if defined color_type_point_index\\n\\t\\tgl_FragColor = vec4(color, pcIndex / 255.0);\\n\\t#else\\n\\t\\tgl_FragColor = vec4(color, vOpacity);\\n\\t#endif\\n\\n\\t#ifdef use_point_cloud_mixing\\n\\t\\tbool discardFragment = false;\\n\\n\\t\\tif (pointCloudMixingMode == 1) {  // Checkboard\\n\\t\\t\\tfloat vPointCloudID = pointCloudID > 10. ? pointCloudID/10.: pointCloudID;\\n\\t\\t\\tdiscardFragment = mod(gl_FragCoord.x, vPointCloudID) > 0.5 && mod(gl_FragCoord.y, vPointCloudID) > 0.5;\\n\\t\\t}\\n\\t\\telse if (pointCloudMixingMode == 2) {  // Stripes\\n\\t\\t\\tfloat angle = pointCloudMixAngle * pointCloudID / 180.;\\n\\t\\t\\tfloat u = cos(angle) * gl_FragCoord.x + sin(angle) * gl_FragCoord.y;\\n\\t\\t\\tfloat v = -sin(angle) * gl_FragCoord.x + cos(angle) * gl_FragCoord.y;\\n\\n\\t\\t\\tdiscardFragment = mod(u, stripeDistanceX) >= stripeDistanceX/stripeDivisorX && mod(v, stripeDistanceY) >= stripeDistanceY/stripeDivisorY;\\n\\t\\t}\\n\\t\\tif (discardFragment) {\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#ifdef use_texture_blending\\n\\t\\tvec2 vUv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\\n\\n\\t\\tvec4 tColor = texture2D(backgroundMap, vUv);\\n\\t\\tgl_FragColor = vec4(vOpacity * color, 1.) + vec4((1. - vOpacity) * tColor.rgb, 0.);\\n\\t#endif\\n\\n\\t#if defined(color_type_phong)\\n\\t\\t#if MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0\\n\\t\\t\\tvec3 normal = normalize( vNormal );\\n\\t\\t\\tnormal.z = abs(normal.z);\\n\\n\\t\\t\\tvec3 viewPosition = normalize( vViewPosition );\\n\\t\\t#endif\\n\\n\\t\\t// code taken from three.js phong light fragment shader\\n\\n\\t\\t#if MAX_POINT_LIGHTS > 0\\n\\n\\t\\t\\tvec3 pointDiffuse = vec3( 0.0 );\\n\\t\\t\\tvec3 pointSpecular = vec3( 0.0 );\\n\\n\\t\\t\\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\t\\t\\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\\n\\t\\t\\t\\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\\n\\n\\t\\t\\t\\tfloat lDistance = 1.0;\\n\\t\\t\\t\\tif ( pointLightDistance[ i ] > 0.0 )\\n\\t\\t\\t\\t\\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\\n\\n\\t\\t\\t\\tlVector = normalize( lVector );\\n\\n\\t\\t\\t\\t\\t\\t// diffuse\\n\\n\\t\\t\\t\\tfloat dotProduct = dot( normal, lVector );\\n\\n\\t\\t\\t\\t#ifdef WRAP_AROUND\\n\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\\t\\t\\t\\t\\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\\n\\n\\t\\t\\t\\t// specular\\n\\n\\t\\t\\t\\tvec3 pointHalfVector = normalize( lVector + viewPosition );\\n\\t\\t\\t\\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\\n\\t\\t\\t\\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\\n\\n\\t\\t\\t\\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\\t\\t\\t\\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\\n\\t\\t\\t\\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\\n\\t\\t\\t\\tpointSpecular = vec3(0.0, 0.0, 0.0);\\n\\t\\t\\t}\\n\\n\\t\\t#endif\\n\\n\\t\\t#if MAX_DIR_LIGHTS > 0\\n\\n\\t\\t\\tvec3 dirDiffuse = vec3( 0.0 );\\n\\t\\t\\tvec3 dirSpecular = vec3( 0.0 );\\n\\n\\t\\t\\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\t\\t\\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\\n\\t\\t\\t\\tvec3 dirVector = normalize( lDirection.xyz );\\n\\n\\t\\t\\t\\t\\t\\t// diffuse\\n\\n\\t\\t\\t\\tfloat dotProduct = dot( normal, dirVector );\\n\\n\\t\\t\\t\\t#ifdef WRAP_AROUND\\n\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\\t\\t\\t\\t\\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\\n\\n\\t\\t\\t\\t// specular\\n\\n\\t\\t\\t\\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\\n\\t\\t\\t\\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\\n\\t\\t\\t\\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\\n\\n\\t\\t\\t\\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\\t\\t\\t\\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\\n\\t\\t\\t\\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\\n\\t\\t\\t}\\n\\n\\t\\t#endif\\n\\n\\t\\tvec3 totalDiffuse = vec3( 0.0 );\\n\\t\\tvec3 totalSpecular = vec3( 0.0 );\\n\\n\\t\\t#if MAX_POINT_LIGHTS > 0\\n\\n\\t\\t\\ttotalDiffuse += pointDiffuse;\\n\\t\\t\\ttotalSpecular += pointSpecular;\\n\\n\\t\\t#endif\\n\\n\\t\\t#if MAX_DIR_LIGHTS > 0\\n\\n\\t\\t\\ttotalDiffuse += dirDiffuse;\\n\\t\\t\\ttotalSpecular += dirSpecular;\\n\\n\\t\\t#endif\\n\\n\\t\\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\\n\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t    //float w = pow(1.0 - (u*u + v*v), blendHardness);\\n\\n\\t\\tfloat wx = 2.0 * length(2.0 * gl_PointCoord - 1.0);\\n\\t\\tfloat w = exp(-wx * wx * 0.5);\\n\\n\\t\\t//float distance = length(2.0 * gl_PointCoord - 1.0);\\n\\t\\t//float w = exp( -(distance * distance) / blendHardness);\\n\\n\\t\\tgl_FragColor.rgb = gl_FragColor.rgb * w;\\n\\t\\tgl_FragColor.a = w;\\n\\t#endif\\n\\n\\t#if defined paraboloid_point_shape\\n\\t\\tfloat wi = 0.0 - ( u*u + v*v);\\n\\t\\tvec4 pos = vec4(vViewPosition, 1.0);\\n\\t\\tpos.z += wi * vRadius;\\n\\t\\tfloat linearDepth = -pos.z;\\n\\t\\tpos = projectionMatrix * pos;\\n\\t\\tpos = pos / pos.w;\\n\\t\\tfloat expDepth = pos.z;\\n\\t\\tdepth = (pos.z + 1.0) / 2.0;\\n\\t\\tgl_FragDepthEXT = depth;\\n\\n\\t\\t#if defined(color_type_depth)\\n\\t\\t\\tgl_FragColor.r = linearDepth;\\n\\t\\t\\tgl_FragColor.g = expDepth;\\n\\t\\t#endif\\n\\n\\t\\t#if defined(use_edl)\\n\\t\\t\\tgl_FragColor.a = log2(linearDepth);\\n\\t\\t#endif\\n\\n\\t#else\\n\\t\\t#if defined(use_edl)\\n\\t\\t\\tgl_FragColor.a = vLogDepth;\\n\\t\\t#endif\\n\\t#endif\\n\\n\\t#ifdef highlight_point\\n\\t\\tif (vHighlight > 0.0) {\\n\\t\\t\\tgl_FragColor = highlightedPointColor;\\n\\t\\t}\\n\\t#endif\\n}\\n");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///168\n')},245:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\n#define max_clip_boxes 30\\n\\nattribute vec3 position;\\nattribute vec3 color;\\n\\n#ifdef color_rgba\\n\\tattribute vec4 rgba;\\n#endif\\n\\nattribute vec3 normal;\\nattribute float intensity;\\nattribute float classification;\\nattribute float returnNumber;\\nattribute float numberOfReturns;\\nattribute float pointSourceID;\\nattribute vec4 indices;\\nattribute vec2 uv;\\n\\nuniform mat4 modelMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\n\\nuniform float pcIndex;\\n\\nuniform float screenWidth;\\nuniform float screenHeight;\\nuniform float fov;\\nuniform float spacing;\\n\\n#if defined use_clip_box\\n\\tuniform mat4 clipBoxes[max_clip_boxes];\\n#endif\\n\\nuniform float heightMin;\\nuniform float heightMax;\\nuniform float size; // pixel size factor\\nuniform float minSize; // minimum pixel size\\nuniform float maxSize; // maximum pixel size\\nuniform float octreeSize;\\nuniform vec3 bbSize;\\nuniform vec3 uColor;\\nuniform float opacity;\\nuniform float clipBoxCount;\\nuniform float level;\\nuniform float vnStart;\\nuniform bool isLeafNode;\\n\\nuniform float filterByNormalThreshold;\\nuniform vec2 intensityRange;\\nuniform float opacityAttenuation;\\nuniform float intensityGamma;\\nuniform float intensityContrast;\\nuniform float intensityBrightness;\\nuniform float rgbGamma;\\nuniform float rgbContrast;\\nuniform float rgbBrightness;\\nuniform float transition;\\nuniform float wRGB;\\nuniform float wIntensity;\\nuniform float wElevation;\\nuniform float wClassification;\\nuniform float wReturnNumber;\\nuniform float wSourceID;\\n\\nuniform sampler2D visibleNodes;\\nuniform sampler2D gradient;\\nuniform sampler2D classificationLUT;\\nuniform sampler2D depthMap;\\n\\n#ifdef use_texture_blending\\n\\tuniform sampler2D backgroundMap;\\n#endif\\n\\n#ifdef use_point_cloud_mixing\\n\\tuniform int pointCloudMixingMode;\\n\\tuniform float pointCloudID;\\n\\n\\tuniform float pointCloudMixAngle;\\n\\tuniform float stripeDistanceX;\\n\\tuniform float stripeDistanceY;\\n\\n\\tuniform float stripeDivisorX;\\n\\tuniform float stripeDivisorY;\\n#endif\\n\\n#ifdef highlight_point\\n\\tuniform vec3 highlightedPointCoordinate;\\n\\tuniform bool enablePointHighlighting;\\n\\tuniform float highlightedPointScale;\\n#endif\\n\\n#ifdef use_filter_by_normal\\n\\tuniform int normalFilteringMode;\\n#endif\\n\\nvarying vec3 vColor;\\n\\n#if !defined(color_type_point_index)\\n\\tvarying float vOpacity;\\n#endif\\n\\n#if defined(weighted_splats)\\n\\tvarying float vLinearDepth;\\n#endif\\n\\n#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\tvarying float vLogDepth;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\tvarying float vRadius;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\tvarying vec3 vNormal;\\n#endif\\n\\n#ifdef highlight_point\\n\\tvarying float vHighlight;\\n#endif\\n\\n// ---------------------\\n// OCTREE\\n// ---------------------\\n\\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)\\n\\n/**\\n * Rounds the specified number to the closest integer.\\n */\\nfloat round(float number){\\n\\treturn floor(number + 0.5);\\n}\\n\\n/**\\n * Gets the number of 1-bits up to inclusive index position.\\n *\\n * number is treated as if it were an integer in the range 0-255\\n */\\nint numberOfOnes(int number, int index) {\\n\\tint numOnes = 0;\\n\\tint tmp = 128;\\n\\tfor (int i = 7; i >= 0; i--) {\\n\\n\\t\\tif (number >= tmp) {\\n\\t\\t\\tnumber = number - tmp;\\n\\n\\t\\t\\tif (i <= index) {\\n\\t\\t\\t\\tnumOnes++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\ttmp = tmp / 2;\\n\\t}\\n\\n\\treturn numOnes;\\n}\\n\\n/**\\n * Checks whether the bit at index is 1.0\\n *\\n * number is treated as if it were an integer in the range 0-255\\n */\\nbool isBitSet(int number, int index){\\n\\n\\t// weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0\\n\\tint powi = 1;\\n\\tif (index == 0) {\\n\\t\\tpowi = 1;\\n\\t} else if (index == 1) {\\n\\t\\tpowi = 2;\\n\\t} else if (index == 2) {\\n\\t\\tpowi = 4;\\n\\t} else if (index == 3) {\\n\\t\\tpowi = 8;\\n\\t} else if (index == 4) {\\n\\t\\tpowi = 16;\\n\\t} else if (index == 5) {\\n\\t\\tpowi = 32;\\n\\t} else if (index == 6) {\\n\\t\\tpowi = 64;\\n\\t} else if (index == 7) {\\n\\t\\tpowi = 128;\\n\\t}\\n\\n\\tint ndp = number / powi;\\n\\n\\treturn mod(float(ndp), 2.0) != 0.0;\\n}\\n\\n/**\\n * Gets the the LOD at the point position.\\n */\\nfloat getLOD() {\\n\\tvec3 offset = vec3(0.0, 0.0, 0.0);\\n\\tint iOffset = int(vnStart);\\n\\tfloat depth = level;\\n\\n\\tfor (float i = 0.0; i <= 30.0; i++) {\\n\\t\\tfloat nodeSizeAtLevel = octreeSize  / pow(2.0, i + level + 0.0);\\n\\n\\t\\tvec3 index3d = (position-offset) / nodeSizeAtLevel;\\n\\t\\tindex3d = floor(index3d + 0.5);\\n\\t\\tint index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));\\n\\n\\t\\tvec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));\\n\\t\\tint mask = int(round(value.r * 255.0));\\n\\n\\t\\tif (isBitSet(mask, index)) {\\n\\t\\t\\t// there are more visible child nodes at this position\\n\\t\\t\\tint advanceG = int(round(value.g * 255.0)) * 256;\\n\\t\\t\\tint advanceB = int(round(value.b * 255.0));\\n\\t\\t\\tint advanceChild = numberOfOnes(mask, index - 1);\\n\\t\\t\\tint advance = advanceG + advanceB + advanceChild;\\n\\n\\t\\t\\tiOffset = iOffset + advance;\\n\\n\\t\\t\\tdepth++;\\n\\t\\t} else {\\n\\t\\t\\treturn value.a * 255.0; // no more visible child nodes at this position\\n\\t\\t}\\n\\n\\t\\toffset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;\\n\\t}\\n\\n\\treturn depth;\\n}\\n\\nfloat getPointSizeAttenuation() {\\n\\treturn 0.5 * pow(2.0, getLOD());\\n}\\n\\n#endif\\n\\n// ---------------------\\n// KD-TREE\\n// ---------------------\\n\\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)\\n\\nfloat getLOD() {\\n\\tvec3 offset = vec3(0.0, 0.0, 0.0);\\n\\tfloat intOffset = 0.0;\\n\\tfloat depth = 0.0;\\n\\n\\tvec3 size = bbSize;\\n\\tvec3 pos = position;\\n\\n\\tfor (float i = 0.0; i <= 1000.0; i++) {\\n\\n\\t\\tvec4 value = texture2D(visibleNodes, vec2(intOffset / 2048.0, 0.0));\\n\\n\\t\\tint children = int(value.r * 255.0);\\n\\t\\tfloat next = value.g * 255.0;\\n\\t\\tint split = int(value.b * 255.0);\\n\\n\\t\\tif (next == 0.0) {\\n\\t\\t \\treturn depth;\\n\\t\\t}\\n\\n\\t\\tvec3 splitv = vec3(0.0, 0.0, 0.0);\\n\\t\\tif (split == 1) {\\n\\t\\t\\tsplitv.x = 1.0;\\n\\t\\t} else if (split == 2) {\\n\\t\\t \\tsplitv.y = 1.0;\\n\\t\\t} else if (split == 4) {\\n\\t\\t \\tsplitv.z = 1.0;\\n\\t\\t}\\n\\n\\t\\tintOffset = intOffset + next;\\n\\n\\t\\tfloat factor = length(pos * splitv / size);\\n\\t\\tif (factor < 0.5) {\\n\\t\\t \\t// left\\n\\t\\t\\tif (children == 0 || children == 2) {\\n\\t\\t\\t\\treturn depth;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// right\\n\\t\\t\\tpos = pos - size * splitv * 0.5;\\n\\t\\t\\tif (children == 0 || children == 1) {\\n\\t\\t\\t\\treturn depth;\\n\\t\\t\\t}\\n\\t\\t\\tif (children == 3) {\\n\\t\\t\\t\\tintOffset = intOffset + 1.0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsize = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);\\n\\n\\t\\tdepth++;\\n\\t}\\n\\n\\n\\treturn depth;\\n}\\n\\nfloat getPointSizeAttenuation() {\\n\\treturn 0.5 * pow(1.3, getLOD());\\n}\\n\\n#endif\\n\\n// formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/\\nfloat getContrastFactor(float contrast) {\\n\\treturn (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);\\n}\\n\\nvec3 getRGB() {\\n\\t\\n\\t#ifdef color_rgba\\n\\t\\tvec3 rgb = rgba.rgb;\\n\\t#else\\t\\n\\t\\tvec3 rgb = color;\\n\\t#endif\\t\\t\\n\\n\\t#if defined(use_rgb_gamma_contrast_brightness)\\n\\t\\trgb = pow(rgb, vec3(rgbGamma));\\n\\t\\trgb = rgb + rgbBrightness;\\n\\t\\trgb = (rgb - 0.5) * getContrastFactor(rgbContrast) + 0.5;\\n\\t\\trgb = clamp(rgb, 0.0, 1.0);\\n\\t\\treturn rgb;\\n\\t#else\\n\\t\\treturn rgb;\\n\\t#endif\\n}\\n\\nfloat getIntensity() {\\n\\tfloat w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);\\n\\tw = pow(w, intensityGamma);\\n\\tw = w + intensityBrightness;\\n\\tw = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;\\n\\tw = clamp(w, 0.0, 1.0);\\n\\n\\treturn w;\\n}\\n\\nvec3 getElevation() {\\n\\tvec4 world = modelMatrix * vec4( position, 1.0 );\\n\\tfloat w = (world.z - heightMin) / (heightMax-heightMin);\\n\\tvec3 cElevation = texture2D(gradient, vec2(w,1.0-w)).rgb;\\n\\n\\treturn cElevation;\\n}\\n\\nvec4 getClassification() {\\n\\tvec2 uv = vec2(classification / 255.0, 0.5);\\n\\tvec4 classColor = texture2D(classificationLUT, uv);\\n\\n\\treturn classColor;\\n}\\n\\nvec3 getReturnNumber() {\\n\\tif (numberOfReturns == 1.0) {\\n\\t\\treturn vec3(1.0, 1.0, 0.0);\\n\\t} else {\\n\\t\\tif (returnNumber == 1.0) {\\n\\t\\t\\treturn vec3(1.0, 0.0, 0.0);\\n\\t\\t} else if (returnNumber == numberOfReturns) {\\n\\t\\t\\treturn vec3(0.0, 0.0, 1.0);\\n\\t\\t} else {\\n\\t\\t\\treturn vec3(0.0, 1.0, 0.0);\\n\\t\\t}\\n\\t}\\n}\\n\\nvec3 getSourceID() {\\n\\tfloat w = mod(pointSourceID, 10.0) / 10.0;\\n\\treturn texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n}\\n\\nvec3 getCompositeColor() {\\n\\tvec3 c;\\n\\tfloat w;\\n\\n\\tc += wRGB * getRGB();\\n\\tw += wRGB;\\n\\n\\tc += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);\\n\\tw += wIntensity;\\n\\n\\tc += wElevation * getElevation();\\n\\tw += wElevation;\\n\\n\\tc += wReturnNumber * getReturnNumber();\\n\\tw += wReturnNumber;\\n\\n\\tc += wSourceID * getSourceID();\\n\\tw += wSourceID;\\n\\n\\tvec4 cl = wClassification * getClassification();\\n\\tc += cl.a * cl.rgb;\\n\\tw += wClassification * cl.a;\\n\\n\\tc = c / w;\\n\\n\\tif (w == 0.0) {\\n\\t\\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\\n\\t}\\n\\n\\treturn c;\\n}\\n\\nvoid main() {\\n\\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\t\\tvViewPosition = mvPosition.xyz;\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t\\tvLinearDepth = gl_Position.w;\\n\\t#endif\\n\\n\\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\t\\tvNormal = normalize(normalMatrix * normal);\\n\\t#endif\\n\\n\\t#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\t\\tvLogDepth = log2(-mvPosition.z);\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// POINT SIZE\\n\\t// ---------------------\\n\\n\\tfloat pointSize = 1.0;\\n\\tfloat slope = tan(fov / 2.0);\\n\\tfloat projFactor =  -0.5 * screenHeight / (slope * mvPosition.z);\\n\\n\\t#if defined fixed_point_size\\n\\t\\tpointSize = size;\\n\\t#elif defined attenuated_point_size\\n\\t\\tpointSize = size * spacing * projFactor;\\n\\t#elif defined adaptive_point_size\\n\\t\\tfloat worldSpaceSize = 2.0 * size * spacing / getPointSizeAttenuation();\\n\\t\\tpointSize = worldSpaceSize * projFactor;\\n\\t#endif\\n\\n\\tpointSize = max(minSize, pointSize);\\n\\tpointSize = min(maxSize, pointSize);\\n\\n\\t#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\t\\tvRadius = pointSize / projFactor;\\n\\t#endif\\n\\n\\tgl_PointSize = pointSize;\\n\\n\\t// ---------------------\\n\\t// HIGHLIGHTING\\n\\t// ---------------------\\n\\n\\t#ifdef highlight_point\\n\\t\\tvec4 mPosition = modelMatrix * vec4(position, 1.0);\\n\\t\\tif (enablePointHighlighting && abs(mPosition.x - highlightedPointCoordinate.x) < 0.0001 &&\\n\\t\\t\\tabs(mPosition.y - highlightedPointCoordinate.y) < 0.0001 &&\\n\\t\\t\\tabs(mPosition.z - highlightedPointCoordinate.z) < 0.0001) {\\n\\t\\t\\tvHighlight = 1.0;\\n\\t\\t\\tgl_PointSize = pointSize * highlightedPointScale;\\n\\t\\t} else {\\n\\t\\t\\tvHighlight = 0.0;\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// OPACITY\\n\\t// ---------------------\\n\\n\\t#ifndef color_type_point_index\\n\\t\\t#ifdef attenuated_opacity\\n\\t\\t\\tvOpacity = opacity * exp(-length(-mvPosition.xyz) / opacityAttenuation);\\n\\t\\t#else\\n\\t\\t\\tvOpacity = opacity;\\n\\t\\t#endif\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// FILTERING\\n\\t// ---------------------\\n\\n\\t#ifdef use_filter_by_normal\\n\\t\\tbool discardPoint = false;\\n\\t\\t// Absolute normal filtering\\n\\t\\tif (normalFilteringMode == 1) {\\n\\t\\t\\tdiscardPoint = (abs((modelViewMatrix * vec4(normal, 0.0)).z) > filterByNormalThreshold);\\n\\t\\t}\\n\\t\\t// less than equal to\\n\\t\\telse if (normalFilteringMode == 2) {\\n\\t\\t\\tdiscardPoint = (modelViewMatrix * vec4(normal, 0.0)).z <= filterByNormalThreshold;\\n\\t\\t\\t}\\n\\t\\t// greater than\\n\\t\\telse if(normalFilteringMode == 3) {\\n\\t\\t\\tdiscardPoint = (modelViewMatrix * vec4(normal, 0.0)).z > filterByNormalThreshold;\\n\\t\\t\\t}\\n\\n\\t\\tif (discardPoint)\\n\\t\\t{\\n\\t\\t\\tgl_Position = vec4(0.0, 0.0, 2.0, 1.0);\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// POINT COLOR\\n\\t// ---------------------\\n\\n\\t#ifdef color_type_rgb\\n\\t\\tvColor = getRGB();\\n\\t#elif defined color_type_height\\n\\t\\tvColor = getElevation();\\n\\t#elif defined color_type_rgb_height\\n\\t\\tvec3 cHeight = getElevation();\\n\\t\\tvColor = (1.0 - transition) * getRGB() + transition * cHeight;\\n\\t#elif defined color_type_depth\\n\\t\\tfloat linearDepth = -mvPosition.z ;\\n\\t\\tfloat expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\\n\\t\\tvColor = vec3(linearDepth, expDepth, 0.0);\\n\\t#elif defined color_type_intensity\\n\\t\\tfloat w = getIntensity();\\n\\t\\tvColor = vec3(w, w, w);\\n\\t#elif defined color_type_intensity_gradient\\n\\t\\tfloat w = getIntensity();\\n\\t\\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n\\t#elif defined color_type_color\\n\\t\\tvColor = uColor;\\n\\t#elif defined color_type_lod\\n\\tfloat w = getLOD() / 10.0;\\n\\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n\\t#elif defined color_type_point_index\\n\\t\\tvColor = indices.rgb;\\n\\t#elif defined color_type_classification\\n\\t  vec4 cl = getClassification();\\n\\t\\tvColor = cl.rgb;\\n\\t#elif defined color_type_return_number\\n\\t\\tvColor = getReturnNumber();\\n\\t#elif defined color_type_source\\n\\t\\tvColor = getSourceID();\\n\\t#elif defined color_type_normal\\n\\t\\tvColor = (modelMatrix * vec4(normal, 0.0)).xyz;\\n\\t#elif defined color_type_phong\\n\\t\\tvColor = color;\\n\\t#elif defined color_type_composite\\n\\t\\tvColor = getCompositeColor();\\n\\t#endif\\n\\n\\t#if !defined color_type_composite && defined color_type_classification\\n\\t\\tif (cl.a == 0.0) {\\n\\t\\t\\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// CLIPPING\\n\\t// ---------------------\\n\\n\\t#if defined use_clip_box\\n\\t\\tbool insideAny = false;\\n\\t\\tfor (int i = 0; i < max_clip_boxes; i++) {\\n\\t\\t\\tif (i == int(clipBoxCount)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec4 clipPosition = clipBoxes[i] * modelMatrix * vec4(position, 1.0);\\n\\t\\t\\tbool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;\\n\\t\\t\\tinside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;\\n\\t\\t\\tinside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;\\n\\t\\t\\tinsideAny = insideAny || inside;\\n\\t\\t}\\n\\n\\t\\tif (!insideAny) {\\n\\t\\t\\t#if defined clip_outside\\n\\t\\t\\t\\tgl_Position = vec4(1000.0, 1000.0, 1000.0, 1.0);\\n\\t\\t\\t#elif defined clip_highlight_inside && !defined(color_type_depth)\\n\\t\\t\\t\\tfloat c = (vColor.r + vColor.g + vColor.b) / 6.0;\\n\\t\\t\\t#endif\\n\\t\\t} else {\\n\\t\\t\\t#if defined clip_highlight_inside\\n\\t\\t\\t\\tvColor.r += 0.5;\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#endif\\n}\\n");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///245\n')},238:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  BlurMaterial: () => (/* reexport */ BlurMaterial),\n  ClipMode: () => (/* reexport */ ClipMode),\n  GRAYSCALE: () => (/* reexport */ GRAYSCALE),\n  INFERNO: () => (/* reexport */ INFERNO),\n  NormalFilteringMode: () => (/* reexport */ NormalFilteringMode),\n  PLASMA: () => (/* reexport */ PLASMA),\n  POINT_ATTRIBUTES: () => (/* reexport */ POINT_ATTRIBUTES),\n  POINT_ATTRIBUTE_TYPES: () => (/* reexport */ POINT_ATTRIBUTE_TYPES),\n  PointAttributeName: () => (/* reexport */ PointAttributeName),\n  PointAttributes: () => (/* reexport */ PointAttributes),\n  PointCloudMaterial: () => (/* reexport */ PointCloudMaterial),\n  PointCloudMixingMode: () => (/* reexport */ PointCloudMixingMode),\n  PointCloudOctree: () => (/* reexport */ PointCloudOctree),\n  PointCloudOctreeGeometry: () => (/* reexport */ PointCloudOctreeGeometry),\n  PointCloudOctreeGeometryNode: () => (/* reexport */ PointCloudOctreeGeometryNode),\n  PointCloudOctreeNode: () => (/* reexport */ PointCloudOctreeNode),\n  PointCloudOctreePicker: () => (/* reexport */ PointCloudOctreePicker),\n  PointCloudTree: () => (/* reexport */ PointCloudTree),\n  PointColorType: () => (/* reexport */ PointColorType),\n  PointOpacityType: () => (/* reexport */ PointOpacityType),\n  PointShape: () => (/* reexport */ PointShape),\n  PointSizeType: () => (/* reexport */ PointSizeType),\n  Potree: () => (/* reexport */ Potree),\n  QueueItem: () => (/* reexport */ QueueItem),\n  RAINBOW: () => (/* reexport */ RAINBOW),\n  SPECTRAL: () => (/* reexport */ SPECTRAL),\n  TreeType: () => (/* reexport */ TreeType),\n  V1_LOADER: () => (/* reexport */ loadPOC),\n  V2_LOADER: () => (/* reexport */ loadOctree),\n  VIRIDIS: () => (/* reexport */ VIRIDIS),\n  Version: () => (/* reexport */ Version),\n  YELLOW_GREEN: () => (/* reexport */ YELLOW_GREEN),\n  generateClassificationTexture: () => (/* reexport */ generateClassificationTexture),\n  generateDataTexture: () => (/* reexport */ generateDataTexture),\n  generateGradientTexture: () => (/* reexport */ generateGradientTexture)\n});\n\n// EXTERNAL MODULE: external \"three\"\nvar external_three_ = __webpack_require__(604);\n;// CONCATENATED MODULE: ./src/materials/blur-material.ts\n\nclass BlurMaterial extends external_three_.ShaderMaterial {\n    constructor() {\n        super(...arguments);\n        this.vertexShader = __webpack_require__(575);\n        this.fragmentShader = __webpack_require__(414);\n        this.uniforms = {\n            screenWidth: { type: 'f', value: 0 },\n            screenHeight: { type: 'f', value: 0 },\n            map: { type: 't', value: null },\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/materials/clipping.ts\nvar ClipMode;\n(function (ClipMode) {\n    ClipMode[ClipMode[\"DISABLED\"] = 0] = \"DISABLED\";\n    ClipMode[ClipMode[\"CLIP_OUTSIDE\"] = 1] = \"CLIP_OUTSIDE\";\n    ClipMode[ClipMode[\"HIGHLIGHT_INSIDE\"] = 2] = \"HIGHLIGHT_INSIDE\";\n    ClipMode[ClipMode[\"CLIP_HORIZONTALLY\"] = 3] = \"CLIP_HORIZONTALLY\";\n    ClipMode[ClipMode[\"CLIP_VERTICALLY\"] = 4] = \"CLIP_VERTICALLY\";\n})(ClipMode || (ClipMode = {}));\n\n;// CONCATENATED MODULE: ./src/materials/enums.ts\nvar PointSizeType;\n(function (PointSizeType) {\n    PointSizeType[PointSizeType[\"FIXED\"] = 0] = \"FIXED\";\n    PointSizeType[PointSizeType[\"ATTENUATED\"] = 1] = \"ATTENUATED\";\n    PointSizeType[PointSizeType[\"ADAPTIVE\"] = 2] = \"ADAPTIVE\";\n})(PointSizeType || (PointSizeType = {}));\nvar PointShape;\n(function (PointShape) {\n    PointShape[PointShape[\"SQUARE\"] = 0] = \"SQUARE\";\n    PointShape[PointShape[\"CIRCLE\"] = 1] = \"CIRCLE\";\n    PointShape[PointShape[\"PARABOLOID\"] = 2] = \"PARABOLOID\";\n})(PointShape || (PointShape = {}));\nvar TreeType;\n(function (TreeType) {\n    TreeType[TreeType[\"OCTREE\"] = 0] = \"OCTREE\";\n    TreeType[TreeType[\"KDTREE\"] = 1] = \"KDTREE\";\n})(TreeType || (TreeType = {}));\nvar PointOpacityType;\n(function (PointOpacityType) {\n    PointOpacityType[PointOpacityType[\"FIXED\"] = 0] = \"FIXED\";\n    PointOpacityType[PointOpacityType[\"ATTENUATED\"] = 1] = \"ATTENUATED\";\n})(PointOpacityType || (PointOpacityType = {}));\nvar PointColorType;\n(function (PointColorType) {\n    PointColorType[PointColorType[\"RGB\"] = 0] = \"RGB\";\n    PointColorType[PointColorType[\"COLOR\"] = 1] = \"COLOR\";\n    PointColorType[PointColorType[\"DEPTH\"] = 2] = \"DEPTH\";\n    PointColorType[PointColorType[\"HEIGHT\"] = 3] = \"HEIGHT\";\n    PointColorType[PointColorType[\"ELEVATION\"] = 3] = \"ELEVATION\";\n    PointColorType[PointColorType[\"INTENSITY\"] = 4] = \"INTENSITY\";\n    PointColorType[PointColorType[\"INTENSITY_GRADIENT\"] = 5] = \"INTENSITY_GRADIENT\";\n    PointColorType[PointColorType[\"LOD\"] = 6] = \"LOD\";\n    PointColorType[PointColorType[\"LEVEL_OF_DETAIL\"] = 6] = \"LEVEL_OF_DETAIL\";\n    PointColorType[PointColorType[\"POINT_INDEX\"] = 7] = \"POINT_INDEX\";\n    PointColorType[PointColorType[\"CLASSIFICATION\"] = 8] = \"CLASSIFICATION\";\n    PointColorType[PointColorType[\"RETURN_NUMBER\"] = 9] = \"RETURN_NUMBER\";\n    PointColorType[PointColorType[\"SOURCE\"] = 10] = \"SOURCE\";\n    PointColorType[PointColorType[\"NORMAL\"] = 11] = \"NORMAL\";\n    PointColorType[PointColorType[\"PHONG\"] = 12] = \"PHONG\";\n    PointColorType[PointColorType[\"RGB_HEIGHT\"] = 13] = \"RGB_HEIGHT\";\n    PointColorType[PointColorType[\"COMPOSITE\"] = 50] = \"COMPOSITE\";\n})(PointColorType || (PointColorType = {}));\nvar NormalFilteringMode;\n(function (NormalFilteringMode) {\n    NormalFilteringMode[NormalFilteringMode[\"ABSOLUTE_NORMAL_FILTERING_MODE\"] = 1] = \"ABSOLUTE_NORMAL_FILTERING_MODE\";\n    NormalFilteringMode[NormalFilteringMode[\"LESS_EQUAL_NORMAL_FILTERING_MODE\"] = 2] = \"LESS_EQUAL_NORMAL_FILTERING_MODE\";\n    NormalFilteringMode[NormalFilteringMode[\"GREATER_NORMAL_FILTERING_MODE\"] = 3] = \"GREATER_NORMAL_FILTERING_MODE\";\n})(NormalFilteringMode || (NormalFilteringMode = {}));\nvar PointCloudMixingMode;\n(function (PointCloudMixingMode) {\n    PointCloudMixingMode[PointCloudMixingMode[\"CHECKBOARD\"] = 1] = \"CHECKBOARD\";\n    PointCloudMixingMode[PointCloudMixingMode[\"STRIPES\"] = 2] = \"STRIPES\";\n})(PointCloudMixingMode || (PointCloudMixingMode = {}));\n\n;// CONCATENATED MODULE: ./src/constants.ts\n\nconst DEFAULT_RGB_BRIGHTNESS = 0;\nconst DEFAULT_RGB_CONTRAST = 0;\nconst DEFAULT_RGB_GAMMA = 1;\nconst DEFAULT_MAX_POINT_SIZE = 50;\nconst DEFAULT_MIN_NODE_PIXEL_SIZE = 50;\nconst DEFAULT_MIN_POINT_SIZE = 2;\nconst DEFAULT_PICK_WINDOW_SIZE = 15;\nconst DEFAULT_POINT_BUDGET = 1000000;\nconst MAX_LOADS_TO_GPU = 2;\nconst MAX_NUM_NODES_LOADING = 4;\nconst PERSPECTIVE_CAMERA = 'PerspectiveCamera';\nconst COLOR_BLACK = new external_three_.Color(0, 0, 0);\nconst DEFAULT_HIGHLIGHT_COLOR = new external_three_.Vector4(1, 0, 0, 1);\n\n;// CONCATENATED MODULE: ./src/utils/utils.ts\nfunction getIndexFromName(name) {\n    return parseInt(name.charAt(name.length - 1), 10);\n}\n/**\n * When passed to `[].sort`, sorts the array by level and index: r, r0, r3, r4, r01, r07, r30, ...\n */\nfunction byLevelAndIndex(a, b) {\n    const na = a.name;\n    const nb = b.name;\n    if (na.length !== nb.length) {\n        return na.length - nb.length;\n    }\n    else if (na < nb) {\n        return -1;\n    }\n    else if (na > nb) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nfunction handleFailedRequest(response) {\n    if (response.status !== 200) {\n        throw Error('Response error');\n    }\n    return response;\n}\nfunction handleEmptyBuffer(buffer) {\n    if (!buffer || buffer.byteLength === 0) {\n        throw Error('Empty buffer');\n    }\n    return buffer;\n}\n\n;// CONCATENATED MODULE: ./src/materials/classification.ts\n\nconst DEFAULT_CLASSIFICATION = {\n    0: new external_three_.Vector4(0.5, 0.5, 0.5, 1.0),\n    1: new external_three_.Vector4(0.5, 0.5, 0.5, 1.0),\n    2: new external_three_.Vector4(0.63, 0.32, 0.18, 1.0),\n    3: new external_three_.Vector4(0.0, 1.0, 0.0, 1.0),\n    4: new external_three_.Vector4(0.0, 0.8, 0.0, 1.0),\n    5: new external_three_.Vector4(0.0, 0.6, 0.0, 1.0),\n    6: new external_three_.Vector4(1.0, 0.66, 0.0, 1.0),\n    7: new external_three_.Vector4(1.0, 0, 1.0, 1.0),\n    8: new external_three_.Vector4(1.0, 0, 0.0, 1.0),\n    9: new external_three_.Vector4(0.0, 0.0, 1.0, 1.0),\n    12: new external_three_.Vector4(1.0, 1.0, 0.0, 1.0),\n    DEFAULT: new external_three_.Vector4(0.3, 0.6, 0.6, 0.5),\n};\n\n;// CONCATENATED MODULE: ./src/materials/gradients/grayscale.ts\n\nconst GRAYSCALE = [\n    [0, new external_three_.Color(0, 0, 0)],\n    [1, new external_three_.Color(1, 1, 1)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/inferno.ts\n\nconst INFERNO = [\n    [0.0, new external_three_.Color(0.077, 0.042, 0.206)],\n    [0.1, new external_three_.Color(0.225, 0.036, 0.388)],\n    [0.2, new external_three_.Color(0.373, 0.074, 0.432)],\n    [0.3, new external_three_.Color(0.522, 0.128, 0.42)],\n    [0.4, new external_three_.Color(0.665, 0.182, 0.37)],\n    [0.5, new external_three_.Color(0.797, 0.255, 0.287)],\n    [0.6, new external_three_.Color(0.902, 0.364, 0.184)],\n    [0.7, new external_three_.Color(0.969, 0.516, 0.063)],\n    [0.8, new external_three_.Color(0.988, 0.683, 0.072)],\n    [0.9, new external_three_.Color(0.961, 0.859, 0.298)],\n    [1.0, new external_three_.Color(0.988, 0.998, 0.645)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/plasma.ts\n\nconst PLASMA = [\n    [0.0, new external_three_.Color(0.241, 0.015, 0.61)],\n    [0.1, new external_three_.Color(0.387, 0.001, 0.654)],\n    [0.2, new external_three_.Color(0.524, 0.025, 0.653)],\n    [0.3, new external_three_.Color(0.651, 0.125, 0.596)],\n    [0.4, new external_three_.Color(0.752, 0.227, 0.513)],\n    [0.5, new external_three_.Color(0.837, 0.329, 0.431)],\n    [0.6, new external_three_.Color(0.907, 0.435, 0.353)],\n    [0.7, new external_three_.Color(0.963, 0.554, 0.272)],\n    [0.8, new external_three_.Color(0.992, 0.681, 0.195)],\n    [0.9, new external_three_.Color(0.987, 0.822, 0.144)],\n    [1.0, new external_three_.Color(0.94, 0.975, 0.131)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/rainbow.ts\n\nconst RAINBOW = [\n    [0, new external_three_.Color(0.278, 0, 0.714)],\n    [1 / 6, new external_three_.Color(0, 0, 1)],\n    [2 / 6, new external_three_.Color(0, 1, 1)],\n    [3 / 6, new external_three_.Color(0, 1, 0)],\n    [4 / 6, new external_three_.Color(1, 1, 0)],\n    [5 / 6, new external_three_.Color(1, 0.64, 0)],\n    [1, new external_three_.Color(1, 0, 0)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/spectral.ts\n\n// From chroma spectral http://gka.github.io/chroma.js/\nconst SPECTRAL = [\n    [0, new external_three_.Color(0.3686, 0.3098, 0.6353)],\n    [0.1, new external_three_.Color(0.1961, 0.5333, 0.7412)],\n    [0.2, new external_three_.Color(0.4, 0.7608, 0.6471)],\n    [0.3, new external_three_.Color(0.6706, 0.8667, 0.6431)],\n    [0.4, new external_three_.Color(0.902, 0.9608, 0.5961)],\n    [0.5, new external_three_.Color(1.0, 1.0, 0.749)],\n    [0.6, new external_three_.Color(0.9961, 0.8784, 0.5451)],\n    [0.7, new external_three_.Color(0.9922, 0.6824, 0.3804)],\n    [0.8, new external_three_.Color(0.9569, 0.4275, 0.2627)],\n    [0.9, new external_three_.Color(0.8353, 0.2431, 0.3098)],\n    [1, new external_three_.Color(0.6196, 0.0039, 0.2588)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/vidris.ts\n\nconst VIRIDIS = [\n    [0.0, new external_three_.Color(0.267, 0.005, 0.329)],\n    [0.1, new external_three_.Color(0.283, 0.141, 0.458)],\n    [0.2, new external_three_.Color(0.254, 0.265, 0.53)],\n    [0.3, new external_three_.Color(0.207, 0.372, 0.553)],\n    [0.4, new external_three_.Color(0.164, 0.471, 0.558)],\n    [0.5, new external_three_.Color(0.128, 0.567, 0.551)],\n    [0.6, new external_three_.Color(0.135, 0.659, 0.518)],\n    [0.7, new external_three_.Color(0.267, 0.749, 0.441)],\n    [0.8, new external_three_.Color(0.478, 0.821, 0.318)],\n    [0.9, new external_three_.Color(0.741, 0.873, 0.15)],\n    [1.0, new external_three_.Color(0.993, 0.906, 0.144)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/yellow-green.ts\n\nconst YELLOW_GREEN = [\n    [0, new external_three_.Color(0.1647, 0.2824, 0.3451)],\n    [0.1, new external_three_.Color(0.1338, 0.3555, 0.4227)],\n    [0.2, new external_three_.Color(0.061, 0.4319, 0.4864)],\n    [0.3, new external_three_.Color(0.0, 0.5099, 0.5319)],\n    [0.4, new external_three_.Color(0.0, 0.5881, 0.5569)],\n    [0.5, new external_three_.Color(0.137, 0.665, 0.5614)],\n    [0.6, new external_three_.Color(0.2906, 0.7395, 0.5477)],\n    [0.7, new external_three_.Color(0.4453, 0.8099, 0.5201)],\n    [0.8, new external_three_.Color(0.6102, 0.8748, 0.485)],\n    [0.9, new external_three_.Color(0.7883, 0.9323, 0.4514)],\n    [1, new external_three_.Color(0.9804, 0.9804, 0.4314)],\n];\n\n;// CONCATENATED MODULE: ./src/materials/gradients/index.ts\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/materials/texture-generation.ts\n\nfunction generateDataTexture(width, height, color) {\n    const size = width * height;\n    const data = new Uint8Array(4 * size);\n    const r = Math.floor(color.r * 255);\n    const g = Math.floor(color.g * 255);\n    const b = Math.floor(color.b * 255);\n    for (let i = 0; i < size; i++) {\n        data[i * 3] = r;\n        data[i * 3 + 1] = g;\n        data[i * 3 + 2] = b;\n    }\n    const texture = new external_three_.DataTexture(data, width, height, external_three_.RGBAFormat);\n    texture.needsUpdate = true;\n    texture.magFilter = external_three_.NearestFilter;\n    return texture;\n}\nfunction generateGradientTexture(gradient) {\n    const size = 64;\n    const canvas = document.createElement('canvas');\n    canvas.width = size;\n    canvas.height = size;\n    const context = canvas.getContext('2d');\n    context.rect(0, 0, size, size);\n    const ctxGradient = context.createLinearGradient(0, 0, size, size);\n    for (let i = 0; i < gradient.length; i++) {\n        const step = gradient[i];\n        ctxGradient.addColorStop(step[0], `#${step[1].getHexString()}`);\n    }\n    context.fillStyle = ctxGradient;\n    context.fill();\n    const texture = new external_three_.CanvasTexture(canvas);\n    texture.needsUpdate = true;\n    texture.minFilter = external_three_.LinearFilter;\n    // textureImage = texture.image;\n    return texture;\n}\nfunction generateClassificationTexture(classification) {\n    const width = 256;\n    const height = 256;\n    const size = width * height;\n    const data = new Uint8Array(4 * size);\n    for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n            const i = x + width * y;\n            let color;\n            if (classification[x]) {\n                color = classification[x];\n            }\n            else if (classification[x % 32]) {\n                color = classification[x % 32];\n            }\n            else {\n                color = classification.DEFAULT;\n            }\n            data[4 * i + 0] = 255 * color.x;\n            data[4 * i + 1] = 255 * color.y;\n            data[4 * i + 2] = 255 * color.z;\n            data[4 * i + 3] = 255 * color.w;\n        }\n    }\n    const texture = new external_three_.DataTexture(data, width, height, external_three_.RGBAFormat);\n    texture.magFilter = external_three_.NearestFilter;\n    texture.needsUpdate = true;\n    return texture;\n}\n\n;// CONCATENATED MODULE: ./src/materials/point-cloud-material.ts\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\nconst TREE_TYPE_DEFS = {\n    [TreeType.OCTREE]: 'tree_type_octree',\n    [TreeType.KDTREE]: 'tree_type_kdtree',\n};\nconst SIZE_TYPE_DEFS = {\n    [PointSizeType.FIXED]: 'fixed_point_size',\n    [PointSizeType.ATTENUATED]: 'attenuated_point_size',\n    [PointSizeType.ADAPTIVE]: 'adaptive_point_size',\n};\nconst OPACITY_DEFS = {\n    [PointOpacityType.ATTENUATED]: 'attenuated_opacity',\n    [PointOpacityType.FIXED]: 'fixed_opacity',\n};\nconst SHAPE_DEFS = {\n    [PointShape.SQUARE]: 'square_point_shape',\n    [PointShape.CIRCLE]: 'circle_point_shape',\n    [PointShape.PARABOLOID]: 'paraboloid_point_shape',\n};\nconst COLOR_DEFS = {\n    [PointColorType.RGB]: 'color_type_rgb',\n    [PointColorType.COLOR]: 'color_type_color',\n    [PointColorType.DEPTH]: 'color_type_depth',\n    [PointColorType.HEIGHT]: 'color_type_height',\n    [PointColorType.INTENSITY]: 'color_type_intensity',\n    [PointColorType.INTENSITY_GRADIENT]: 'color_type_intensity_gradient',\n    [PointColorType.LOD]: 'color_type_lod',\n    [PointColorType.POINT_INDEX]: 'color_type_point_index',\n    [PointColorType.CLASSIFICATION]: 'color_type_classification',\n    [PointColorType.RETURN_NUMBER]: 'color_type_return_number',\n    [PointColorType.SOURCE]: 'color_type_source',\n    [PointColorType.NORMAL]: 'color_type_normal',\n    [PointColorType.PHONG]: 'color_type_phong',\n    [PointColorType.RGB_HEIGHT]: 'color_type_rgb_height',\n    [PointColorType.COMPOSITE]: 'color_type_composite',\n};\nconst CLIP_MODE_DEFS = {\n    [ClipMode.DISABLED]: 'clip_disabled',\n    [ClipMode.CLIP_OUTSIDE]: 'clip_outside',\n    [ClipMode.HIGHLIGHT_INSIDE]: 'clip_highlight_inside',\n    [ClipMode.CLIP_HORIZONTALLY]: 'clip_horizontally',\n    [ClipMode.CLIP_VERTICALLY]: 'clip_vertically',\n};\nclass PointCloudMaterial extends external_three_.RawShaderMaterial {\n    constructor(parameters = {}) {\n        super();\n        /**\n         * Use the drawing buffer size instead of the dom client width and height when passing the screen height and screen width uniforms to the\n         * shader. This is useful if you have offscreen canvases (which in some browsers return 0 as client width and client height).\n         */\n        this.useDrawingBufferSize = false;\n        this.lights = false;\n        this.fog = false;\n        this.colorRgba = false;\n        this.numClipBoxes = 0;\n        this.clipBoxes = [];\n        this.visibleNodeTextureOffsets = new Map();\n        this._gradient = SPECTRAL;\n        this.gradientTexture = generateGradientTexture(this._gradient);\n        this._classification = DEFAULT_CLASSIFICATION;\n        this.classificationTexture = generateClassificationTexture(this._classification);\n        this.uniforms = {\n            bbSize: makeUniform('fv', [0, 0, 0]),\n            blendDepthSupplement: makeUniform('f', 0.0),\n            blendHardness: makeUniform('f', 2.0),\n            classificationLUT: makeUniform('t', this.classificationTexture || new external_three_.Texture()),\n            clipBoxCount: makeUniform('f', 0),\n            clipBoxes: makeUniform('Matrix4fv', []),\n            clipExtent: makeUniform('fv', [0.0, 0.0, 1.0, 1.0]),\n            depthMap: makeUniform('t', null),\n            diffuse: makeUniform('fv', [1, 1, 1]),\n            fov: makeUniform('f', 1.0),\n            gradient: makeUniform('t', this.gradientTexture || new external_three_.Texture()),\n            heightMax: makeUniform('f', 1.0),\n            heightMin: makeUniform('f', 0.0),\n            intensityBrightness: makeUniform('f', 0),\n            intensityContrast: makeUniform('f', 0),\n            intensityGamma: makeUniform('f', 1),\n            intensityRange: makeUniform('fv', [0, 65000]),\n            isLeafNode: makeUniform('b', 0),\n            level: makeUniform('f', 0.0),\n            maxSize: makeUniform('f', DEFAULT_MAX_POINT_SIZE),\n            minSize: makeUniform('f', DEFAULT_MIN_POINT_SIZE),\n            octreeSize: makeUniform('f', 0),\n            opacity: makeUniform('f', 1.0),\n            pcIndex: makeUniform('f', 0),\n            rgbBrightness: makeUniform('f', DEFAULT_RGB_BRIGHTNESS),\n            rgbContrast: makeUniform('f', DEFAULT_RGB_CONTRAST),\n            rgbGamma: makeUniform('f', DEFAULT_RGB_GAMMA),\n            screenHeight: makeUniform('f', 1.0),\n            screenWidth: makeUniform('f', 1.0),\n            size: makeUniform('f', 1),\n            spacing: makeUniform('f', 1.0),\n            toModel: makeUniform('Matrix4f', []),\n            transition: makeUniform('f', 0.5),\n            uColor: makeUniform('c', new external_three_.Color(0xffffff)),\n            // @ts-ignore\n            visibleNodes: makeUniform('t', this.visibleNodesTexture || new external_three_.Texture()),\n            vnStart: makeUniform('f', 0.0),\n            wClassification: makeUniform('f', 0),\n            wElevation: makeUniform('f', 0),\n            wIntensity: makeUniform('f', 0),\n            wReturnNumber: makeUniform('f', 0),\n            wRGB: makeUniform('f', 1),\n            wSourceID: makeUniform('f', 0),\n            opacityAttenuation: makeUniform('f', 1),\n            filterByNormalThreshold: makeUniform('f', 0),\n            highlightedPointCoordinate: makeUniform('fv', new external_three_.Vector3()),\n            highlightedPointColor: makeUniform('fv', DEFAULT_HIGHLIGHT_COLOR.clone()),\n            enablePointHighlighting: makeUniform('b', true),\n            highlightedPointScale: makeUniform('f', 2.0),\n            backgroundMap: makeUniform('t', null),\n            normalFilteringMode: makeUniform('i', NormalFilteringMode.ABSOLUTE_NORMAL_FILTERING_MODE),\n            pointCloudID: makeUniform('f', 2),\n            pointCloudMixingMode: makeUniform('i', PointCloudMixingMode.CHECKBOARD),\n            stripeDistanceX: makeUniform('f', 5),\n            stripeDistanceY: makeUniform('f', 5),\n            stripeDivisorX: makeUniform('f', 2),\n            stripeDivisorY: makeUniform('f', 2),\n            pointCloudMixAngle: makeUniform('f', 31),\n        };\n        this.useClipBox = false;\n        this.weighted = false;\n        this.pointColorType = PointColorType.RGB;\n        this.pointSizeType = PointSizeType.ADAPTIVE;\n        this.clipMode = ClipMode.DISABLED;\n        this.useEDL = false;\n        this.shape = PointShape.SQUARE;\n        this.treeType = TreeType.OCTREE;\n        this.pointOpacityType = PointOpacityType.FIXED;\n        this.useFilterByNormal = false;\n        this.useTextureBlending = false;\n        this.usePointCloudMixing = false;\n        this.highlightPoint = false;\n        this.attributes = {\n            position: { type: 'fv', value: [] },\n            color: { type: 'fv', value: [] },\n            normal: { type: 'fv', value: [] },\n            intensity: { type: 'f', value: [] },\n            classification: { type: 'f', value: [] },\n            returnNumber: { type: 'f', value: [] },\n            numberOfReturns: { type: 'f', value: [] },\n            pointSourceID: { type: 'f', value: [] },\n            indices: { type: 'fv', value: [] },\n        };\n        const tex = (this.visibleNodesTexture = generateDataTexture(2048, 1, new external_three_.Color(0xffffff)));\n        tex.minFilter = external_three_.NearestFilter;\n        tex.magFilter = external_three_.NearestFilter;\n        this.setUniform('visibleNodes', tex);\n        this.treeType = getValid(parameters.treeType, TreeType.OCTREE);\n        this.size = getValid(parameters.size, 1.0);\n        this.minSize = getValid(parameters.minSize, 2.0);\n        this.maxSize = getValid(parameters.maxSize, 50.0);\n        this.colorRgba = Boolean(parameters.colorRgba);\n        this.classification = DEFAULT_CLASSIFICATION;\n        this.defaultAttributeValues.normal = [0, 0, 0];\n        this.defaultAttributeValues.classification = [0, 0, 0];\n        this.defaultAttributeValues.indices = [0, 0, 0, 0];\n        this.vertexColors = true;\n        this.updateShaderSource();\n    }\n    dispose() {\n        super.dispose();\n        if (this.gradientTexture) {\n            this.gradientTexture.dispose();\n            this.gradientTexture = undefined;\n        }\n        if (this.visibleNodesTexture) {\n            this.visibleNodesTexture.dispose();\n            this.visibleNodesTexture = undefined;\n        }\n        this.clearVisibleNodeTextureOffsets();\n        if (this.classificationTexture) {\n            this.classificationTexture.dispose();\n            this.classificationTexture = undefined;\n        }\n        if (this.depthMap) {\n            this.depthMap.dispose();\n            this.depthMap = undefined;\n        }\n        if (this.backgroundMap) {\n            this.backgroundMap.dispose();\n            this.backgroundMap = undefined;\n        }\n    }\n    clearVisibleNodeTextureOffsets() {\n        this.visibleNodeTextureOffsets.clear();\n    }\n    updateShaderSource() {\n        this.vertexShader = this.applyDefines((__webpack_require__(245)/* [\"default\"] */ .A));\n        this.fragmentShader = this.applyDefines((__webpack_require__(168)/* [\"default\"] */ .A));\n        if (this.opacity === 1.0) {\n            this.blending = external_three_.NoBlending;\n            this.transparent = false;\n            this.depthTest = true;\n            this.depthWrite = true;\n            this.depthFunc = external_three_.LessEqualDepth;\n        }\n        else if (this.opacity < 1.0 && !this.useEDL) {\n            this.blending = external_three_.AdditiveBlending;\n            this.transparent = true;\n            this.depthTest = false;\n            this.depthWrite = true;\n        }\n        if (this.weighted) {\n            this.blending = external_three_.AdditiveBlending;\n            this.transparent = true;\n            this.depthTest = true;\n            this.depthWrite = false;\n            this.depthFunc = external_three_.LessEqualDepth;\n        }\n        this.needsUpdate = true;\n    }\n    applyDefines(shaderSrc) {\n        const parts = [];\n        function define(value) {\n            if (value) {\n                parts.push(`#define ${value}`);\n            }\n        }\n        define(TREE_TYPE_DEFS[this.treeType]);\n        define(SIZE_TYPE_DEFS[this.pointSizeType]);\n        define(SHAPE_DEFS[this.shape]);\n        define(COLOR_DEFS[this.pointColorType]);\n        define(CLIP_MODE_DEFS[this.clipMode]);\n        define(OPACITY_DEFS[this.pointOpacityType]);\n        // We only perform gamma and brightness/contrast calculations per point if values are specified.\n        if (this.rgbGamma !== DEFAULT_RGB_GAMMA ||\n            this.rgbBrightness !== DEFAULT_RGB_BRIGHTNESS ||\n            this.rgbContrast !== DEFAULT_RGB_CONTRAST) {\n            define('use_rgb_gamma_contrast_brightness');\n        }\n        if (this.useFilterByNormal) {\n            define('use_filter_by_normal');\n        }\n        if (this.useEDL) {\n            define('use_edl');\n        }\n        if (this.weighted) {\n            define('weighted_splats');\n        }\n        if (this.numClipBoxes > 0) {\n            define('use_clip_box');\n        }\n        if (this.highlightPoint) {\n            define('highlight_point');\n        }\n        if (this.useTextureBlending) {\n            define('use_texture_blending');\n        }\n        if (this.usePointCloudMixing) {\n            define('use_point_cloud_mixing');\n        }\n        if (this.colorRgba) {\n            define('color_rgba');\n        }\n        define('MAX_POINT_LIGHTS 0');\n        define('MAX_DIR_LIGHTS 0');\n        parts.push(shaderSrc);\n        return parts.join('\\n');\n    }\n    setPointCloudMixingMode(mode) {\n        this.pointCloudMixingMode = mode;\n    }\n    getPointCloudMixingMode() {\n        if (this.pointCloudMixingMode === PointCloudMixingMode.STRIPES) {\n            return PointCloudMixingMode.STRIPES;\n        }\n        return PointCloudMixingMode.CHECKBOARD;\n    }\n    setClipBoxes(clipBoxes) {\n        if (!clipBoxes) {\n            return;\n        }\n        this.clipBoxes = clipBoxes;\n        const doUpdate = this.numClipBoxes !== clipBoxes.length && (clipBoxes.length === 0 || this.numClipBoxes === 0);\n        this.numClipBoxes = clipBoxes.length;\n        this.setUniform('clipBoxCount', this.numClipBoxes);\n        if (doUpdate) {\n            this.updateShaderSource();\n        }\n        const clipBoxesLength = this.numClipBoxes * 16;\n        const clipBoxesArray = new Float32Array(clipBoxesLength);\n        for (let i = 0; i < this.numClipBoxes; i++) {\n            clipBoxesArray.set(clipBoxes[i].inverse.elements, 16 * i);\n        }\n        for (let i = 0; i < clipBoxesLength; i++) {\n            if (isNaN(clipBoxesArray[i])) {\n                clipBoxesArray[i] = Infinity;\n            }\n        }\n        this.setUniform('clipBoxes', clipBoxesArray);\n    }\n    get gradient() {\n        return this._gradient;\n    }\n    set gradient(value) {\n        if (this._gradient !== value) {\n            this._gradient = value;\n            this.gradientTexture = generateGradientTexture(this._gradient);\n            this.setUniform('gradient', this.gradientTexture);\n        }\n    }\n    get classification() {\n        return this._classification;\n    }\n    set classification(value) {\n        const copy = {};\n        for (const key of Object.keys(value)) {\n            copy[key] = value[key].clone();\n        }\n        let isEqual = false;\n        if (this._classification === undefined) {\n            isEqual = false;\n        }\n        else {\n            isEqual = Object.keys(copy).length === Object.keys(this._classification).length;\n            for (const key of Object.keys(copy)) {\n                isEqual = isEqual && this._classification[key] !== undefined;\n                isEqual = isEqual && copy[key].equals(this._classification[key]);\n            }\n        }\n        if (!isEqual) {\n            this._classification = copy;\n            this.recomputeClassification();\n        }\n    }\n    recomputeClassification() {\n        this.classificationTexture = generateClassificationTexture(this._classification);\n        this.setUniform('classificationLUT', this.classificationTexture);\n    }\n    get elevationRange() {\n        return [this.heightMin, this.heightMax];\n    }\n    set elevationRange(value) {\n        this.heightMin = value[0];\n        this.heightMax = value[1];\n    }\n    getUniform(name) {\n        return this.uniforms === undefined ? undefined : this.uniforms[name].value;\n    }\n    setUniform(name, value) {\n        if (this.uniforms === undefined) {\n            return;\n        }\n        const uObj = this.uniforms[name];\n        if (uObj.type === 'c') {\n            uObj.value.copy(value);\n        }\n        else if (value !== uObj.value) {\n            uObj.value = value;\n        }\n    }\n    updateMaterial(octree, visibleNodes, camera, renderer) {\n        const pixelRatio = renderer.getPixelRatio();\n        if (camera.type === PERSPECTIVE_CAMERA) {\n            this.fov = camera.fov * (Math.PI / 180);\n        }\n        else {\n            this.fov = Math.PI / 2; // will result in slope = 1 in the shader\n        }\n        const renderTarget = renderer.getRenderTarget();\n        if (renderTarget !== null) {\n            this.screenWidth = renderTarget.width;\n            this.screenHeight = renderTarget.height;\n        }\n        else {\n            this.screenWidth = renderer.domElement.clientWidth * pixelRatio;\n            this.screenHeight = renderer.domElement.clientHeight * pixelRatio;\n        }\n        if (this.useDrawingBufferSize) {\n            renderer.getDrawingBufferSize(PointCloudMaterial.helperVec2);\n            this.screenWidth = PointCloudMaterial.helperVec2.width;\n            this.screenHeight = PointCloudMaterial.helperVec2.height;\n        }\n        const maxScale = Math.max(octree.scale.x, octree.scale.y, octree.scale.z);\n        this.spacing = octree.pcoGeometry.spacing * maxScale;\n        this.octreeSize = octree.pcoGeometry.boundingBox.getSize(PointCloudMaterial.helperVec3).x;\n        if (this.pointSizeType === PointSizeType.ADAPTIVE ||\n            this.pointColorType === PointColorType.LOD) {\n            this.updateVisibilityTextureData(visibleNodes);\n        }\n    }\n    updateVisibilityTextureData(nodes) {\n        nodes.sort(byLevelAndIndex);\n        const data = new Uint8Array(nodes.length * 4);\n        const offsetsToChild = new Array(nodes.length).fill(Infinity);\n        this.visibleNodeTextureOffsets.clear();\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            this.visibleNodeTextureOffsets.set(node.name, i);\n            if (i > 0) {\n                const parentName = node.name.slice(0, -1);\n                const parentOffset = this.visibleNodeTextureOffsets.get(parentName);\n                const parentOffsetToChild = i - parentOffset;\n                offsetsToChild[parentOffset] = Math.min(offsetsToChild[parentOffset], parentOffsetToChild);\n                // tslint:disable:no-bitwise\n                const offset = parentOffset * 4;\n                data[offset] = data[offset] | (1 << node.index);\n                data[offset + 1] = offsetsToChild[parentOffset] >> 8;\n                data[offset + 2] = offsetsToChild[parentOffset] % 256;\n                // tslint:enable:no-bitwise\n            }\n            data[i * 4 + 3] = node.name.length;\n        }\n        const texture = this.visibleNodesTexture;\n        if (texture) {\n            texture.image.data.set(data);\n            texture.needsUpdate = true;\n        }\n    }\n    static makeOnBeforeRender(octree, node, pcIndex) {\n        return (_renderer, _scene, _camera, _geometry, material) => {\n            const pointCloudMaterial = material;\n            const materialUniforms = pointCloudMaterial.uniforms;\n            materialUniforms.level.value = node.level;\n            materialUniforms.isLeafNode.value = node.isLeafNode;\n            const vnStart = pointCloudMaterial.visibleNodeTextureOffsets.get(node.name);\n            if (vnStart !== undefined) {\n                materialUniforms.vnStart.value = vnStart;\n            }\n            materialUniforms.pcIndex.value =\n                pcIndex !== undefined ? pcIndex : octree.visibleNodes.indexOf(node);\n            // Note: when changing uniforms in onBeforeRender, the flag uniformsNeedUpdate has to be\n            // set to true to instruct ThreeJS to upload them. See also\n            // https://github.com/mrdoob/three.js/issues/9870#issuecomment-368750182.\n            // Remove the cast to any after updating to Three.JS >= r113\n            material /*ShaderMaterial*/.uniformsNeedUpdate = true;\n        };\n    }\n}\nPointCloudMaterial.helperVec3 = new external_three_.Vector3();\nPointCloudMaterial.helperVec2 = new external_three_.Vector2();\n__decorate([\n    uniform('bbSize')\n], PointCloudMaterial.prototype, \"bbSize\", void 0);\n__decorate([\n    uniform('clipExtent')\n], PointCloudMaterial.prototype, \"clipExtent\", void 0);\n__decorate([\n    uniform('depthMap')\n], PointCloudMaterial.prototype, \"depthMap\", void 0);\n__decorate([\n    uniform('fov')\n], PointCloudMaterial.prototype, \"fov\", void 0);\n__decorate([\n    uniform('heightMax')\n], PointCloudMaterial.prototype, \"heightMax\", void 0);\n__decorate([\n    uniform('heightMin')\n], PointCloudMaterial.prototype, \"heightMin\", void 0);\n__decorate([\n    uniform('intensityBrightness')\n], PointCloudMaterial.prototype, \"intensityBrightness\", void 0);\n__decorate([\n    uniform('intensityContrast')\n], PointCloudMaterial.prototype, \"intensityContrast\", void 0);\n__decorate([\n    uniform('intensityGamma')\n], PointCloudMaterial.prototype, \"intensityGamma\", void 0);\n__decorate([\n    uniform('intensityRange')\n], PointCloudMaterial.prototype, \"intensityRange\", void 0);\n__decorate([\n    uniform('maxSize')\n], PointCloudMaterial.prototype, \"maxSize\", void 0);\n__decorate([\n    uniform('minSize')\n], PointCloudMaterial.prototype, \"minSize\", void 0);\n__decorate([\n    uniform('octreeSize')\n], PointCloudMaterial.prototype, \"octreeSize\", void 0);\n__decorate([\n    uniform('opacity', true)\n], PointCloudMaterial.prototype, \"opacity\", void 0);\n__decorate([\n    uniform('rgbBrightness', true)\n], PointCloudMaterial.prototype, \"rgbBrightness\", void 0);\n__decorate([\n    uniform('rgbContrast', true)\n], PointCloudMaterial.prototype, \"rgbContrast\", void 0);\n__decorate([\n    uniform('rgbGamma', true)\n], PointCloudMaterial.prototype, \"rgbGamma\", void 0);\n__decorate([\n    uniform('screenHeight')\n], PointCloudMaterial.prototype, \"screenHeight\", void 0);\n__decorate([\n    uniform('screenWidth')\n], PointCloudMaterial.prototype, \"screenWidth\", void 0);\n__decorate([\n    uniform('size')\n], PointCloudMaterial.prototype, \"size\", void 0);\n__decorate([\n    uniform('spacing')\n], PointCloudMaterial.prototype, \"spacing\", void 0);\n__decorate([\n    uniform('transition')\n], PointCloudMaterial.prototype, \"transition\", void 0);\n__decorate([\n    uniform('uColor')\n], PointCloudMaterial.prototype, \"color\", void 0);\n__decorate([\n    uniform('wClassification')\n], PointCloudMaterial.prototype, \"weightClassification\", void 0);\n__decorate([\n    uniform('wElevation')\n], PointCloudMaterial.prototype, \"weightElevation\", void 0);\n__decorate([\n    uniform('wIntensity')\n], PointCloudMaterial.prototype, \"weightIntensity\", void 0);\n__decorate([\n    uniform('wReturnNumber')\n], PointCloudMaterial.prototype, \"weightReturnNumber\", void 0);\n__decorate([\n    uniform('wRGB')\n], PointCloudMaterial.prototype, \"weightRGB\", void 0);\n__decorate([\n    uniform('wSourceID')\n], PointCloudMaterial.prototype, \"weightSourceID\", void 0);\n__decorate([\n    uniform('opacityAttenuation')\n], PointCloudMaterial.prototype, \"opacityAttenuation\", void 0);\n__decorate([\n    uniform('filterByNormalThreshold')\n], PointCloudMaterial.prototype, \"filterByNormalThreshold\", void 0);\n__decorate([\n    uniform('highlightedPointCoordinate')\n], PointCloudMaterial.prototype, \"highlightedPointCoordinate\", void 0);\n__decorate([\n    uniform('highlightedPointColor')\n], PointCloudMaterial.prototype, \"highlightedPointColor\", void 0);\n__decorate([\n    uniform('enablePointHighlighting')\n], PointCloudMaterial.prototype, \"enablePointHighlighting\", void 0);\n__decorate([\n    uniform('highlightedPointScale')\n], PointCloudMaterial.prototype, \"highlightedPointScale\", void 0);\n__decorate([\n    uniform('normalFilteringMode')\n], PointCloudMaterial.prototype, \"normalFilteringMode\", void 0);\n__decorate([\n    uniform('backgroundMap')\n], PointCloudMaterial.prototype, \"backgroundMap\", void 0);\n__decorate([\n    uniform('pointCloudID')\n], PointCloudMaterial.prototype, \"pointCloudID\", void 0);\n__decorate([\n    uniform('pointCloudMixingMode')\n], PointCloudMaterial.prototype, \"pointCloudMixingMode\", void 0);\n__decorate([\n    uniform('stripeDistanceX')\n], PointCloudMaterial.prototype, \"stripeDistanceX\", void 0);\n__decorate([\n    uniform('stripeDistanceY')\n], PointCloudMaterial.prototype, \"stripeDistanceY\", void 0);\n__decorate([\n    uniform('stripeDivisorX')\n], PointCloudMaterial.prototype, \"stripeDivisorX\", void 0);\n__decorate([\n    uniform('stripeDivisorY')\n], PointCloudMaterial.prototype, \"stripeDivisorY\", void 0);\n__decorate([\n    uniform('pointCloudMixAngle')\n], PointCloudMaterial.prototype, \"pointCloudMixAngle\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"useClipBox\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"weighted\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"pointColorType\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"pointSizeType\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"clipMode\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"useEDL\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"shape\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"treeType\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"pointOpacityType\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"useFilterByNormal\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"useTextureBlending\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"usePointCloudMixing\", void 0);\n__decorate([\n    requiresShaderUpdate()\n], PointCloudMaterial.prototype, \"highlightPoint\", void 0);\nfunction makeUniform(type, value) {\n    return { type, value };\n}\nfunction getValid(a, b) {\n    return a === undefined ? b : a;\n}\n// tslint:disable:no-invalid-this\nfunction uniform(uniformName, requireSrcUpdate = false) {\n    return (target, propertyKey) => {\n        Object.defineProperty(target, propertyKey, {\n            get() {\n                return this.getUniform(uniformName);\n            },\n            set(value) {\n                if (value !== this.getUniform(uniformName)) {\n                    this.setUniform(uniformName, value);\n                    if (requireSrcUpdate) {\n                        this.updateShaderSource();\n                    }\n                }\n            },\n        });\n    };\n}\nfunction requiresShaderUpdate() {\n    return (target, propertyKey) => {\n        const fieldName = `_${propertyKey.toString()}`;\n        Object.defineProperty(target, propertyKey, {\n            get() {\n                return this[fieldName];\n            },\n            set(value) {\n                if (value !== this[fieldName]) {\n                    this[fieldName] = value;\n                    this.updateShaderSource();\n                }\n            },\n        });\n    };\n}\n\n;// CONCATENATED MODULE: ./src/materials/index.ts\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/point-attributes.ts\n// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\nvar PointAttributeName;\n(function (PointAttributeName) {\n    PointAttributeName[PointAttributeName[\"POSITION_CARTESIAN\"] = 0] = \"POSITION_CARTESIAN\";\n    PointAttributeName[PointAttributeName[\"COLOR_PACKED\"] = 1] = \"COLOR_PACKED\";\n    PointAttributeName[PointAttributeName[\"COLOR_FLOATS_1\"] = 2] = \"COLOR_FLOATS_1\";\n    PointAttributeName[PointAttributeName[\"COLOR_FLOATS_255\"] = 3] = \"COLOR_FLOATS_255\";\n    PointAttributeName[PointAttributeName[\"NORMAL_FLOATS\"] = 4] = \"NORMAL_FLOATS\";\n    PointAttributeName[PointAttributeName[\"FILLER\"] = 5] = \"FILLER\";\n    PointAttributeName[PointAttributeName[\"INTENSITY\"] = 6] = \"INTENSITY\";\n    PointAttributeName[PointAttributeName[\"CLASSIFICATION\"] = 7] = \"CLASSIFICATION\";\n    PointAttributeName[PointAttributeName[\"NORMAL_SPHEREMAPPED\"] = 8] = \"NORMAL_SPHEREMAPPED\";\n    PointAttributeName[PointAttributeName[\"NORMAL_OCT16\"] = 9] = \"NORMAL_OCT16\";\n    PointAttributeName[PointAttributeName[\"NORMAL\"] = 10] = \"NORMAL\";\n})(PointAttributeName || (PointAttributeName = {}));\nconst POINT_ATTRIBUTE_TYPES = {\n    DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\n    DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\n    DATA_TYPE_INT8: { ordinal: 2, size: 1 },\n    DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\n    DATA_TYPE_INT16: { ordinal: 4, size: 2 },\n    DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\n    DATA_TYPE_INT32: { ordinal: 6, size: 4 },\n    DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\n    DATA_TYPE_INT64: { ordinal: 8, size: 8 },\n    DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\n};\nfunction makePointAttribute(name, type, numElements) {\n    return {\n        name,\n        type,\n        numElements,\n        byteSize: numElements * type.size,\n    };\n}\nconst RGBA_PACKED = makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 4);\nconst POINT_ATTRIBUTES = {\n    POSITION_CARTESIAN: makePointAttribute(PointAttributeName.POSITION_CARTESIAN, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n    RGBA_PACKED,\n    COLOR_PACKED: RGBA_PACKED,\n    RGB_PACKED: makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 3),\n    NORMAL_FLOATS: makePointAttribute(PointAttributeName.NORMAL_FLOATS, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n    FILLER_1B: makePointAttribute(PointAttributeName.FILLER, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\n    INTENSITY: makePointAttribute(PointAttributeName.INTENSITY, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16, 1),\n    CLASSIFICATION: makePointAttribute(PointAttributeName.CLASSIFICATION, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\n    NORMAL_SPHEREMAPPED: makePointAttribute(PointAttributeName.NORMAL_SPHEREMAPPED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\n    NORMAL_OCT16: makePointAttribute(PointAttributeName.NORMAL_OCT16, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\n    NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n};\nclass PointAttributes {\n    constructor(pointAttributeNames = []) {\n        this.attributes = [];\n        this.byteSize = 0;\n        this.size = 0;\n        for (let i = 0; i < pointAttributeNames.length; i++) {\n            const pointAttributeName = pointAttributeNames[i];\n            const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\n            this.attributes.push(pointAttribute);\n            this.byteSize += pointAttribute.byteSize;\n            this.size++;\n        }\n    }\n    add(pointAttribute) {\n        this.attributes.push(pointAttribute);\n        this.byteSize += pointAttribute.byteSize;\n        this.size++;\n    }\n    hasColors() {\n        return this.attributes.find(isColorAttribute) !== undefined;\n    }\n    hasNormals() {\n        return this.attributes.find(isNormalAttribute) !== undefined;\n    }\n}\nfunction isColorAttribute({ name }) {\n    return name === PointAttributeName.COLOR_PACKED;\n}\nfunction isNormalAttribute({ name }) {\n    return (name === PointAttributeName.NORMAL_SPHEREMAPPED ||\n        name === PointAttributeName.NORMAL_FLOATS ||\n        name === PointAttributeName.NORMAL ||\n        name === PointAttributeName.NORMAL_OCT16);\n}\n\n;// CONCATENATED MODULE: ./src/utils/bounds.ts\n\n/**\n * adapted from mhluska at https://github.com/mrdoob/three.js/issues/1561\n */\nfunction computeTransformedBoundingBox(box, transform) {\n    return new external_three_.Box3().setFromPoints([\n        new external_three_.Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.max.x, box.min.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.min.x, box.max.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.min.x, box.min.y, box.max.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.min.x, box.max.y, box.max.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.max.x, box.max.y, box.min.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.max.x, box.min.y, box.max.z).applyMatrix4(transform),\n        new external_three_.Vector3(box.max.x, box.max.y, box.max.z).applyMatrix4(transform),\n    ]);\n}\nfunction createChildAABB(aabb, index) {\n    const min = aabb.min.clone();\n    const max = aabb.max.clone();\n    const size = new external_three_.Vector3().subVectors(max, min);\n    // tslint:disable-next-line:no-bitwise\n    if ((index & 0b0001) > 0) {\n        min.z += size.z / 2;\n    }\n    else {\n        max.z -= size.z / 2;\n    }\n    // tslint:disable-next-line:no-bitwise\n    if ((index & 0b0010) > 0) {\n        min.y += size.y / 2;\n    }\n    else {\n        max.y -= size.y / 2;\n    }\n    // tslint:disable-next-line:no-bitwise\n    if ((index & 0b0100) > 0) {\n        min.x += size.x / 2;\n    }\n    else {\n        max.x -= size.x / 2;\n    }\n    return new external_three_.Box3(min, max);\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-geometry-node.ts\n/**\n * Adapted from Potree.js http://potree.org\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\n */\n\n\n\nconst NODE_STRIDE = 5;\nclass PointCloudOctreeGeometryNode extends external_three_.EventDispatcher {\n    constructor(name, pcoGeometry, boundingBox) {\n        super();\n        this.id = PointCloudOctreeGeometryNode.idCount++;\n        this.level = 0;\n        this.spacing = 0;\n        this.hasChildren = false;\n        this.children = [\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n        ];\n        this.mean = new external_three_.Vector3();\n        this.numPoints = 0;\n        this.loaded = false;\n        this.loading = false;\n        this.failed = false;\n        this.parent = null;\n        this.oneTimeDisposeHandlers = [];\n        this.isLeafNode = true;\n        this.isTreeNode = false;\n        this.isGeometryNode = true;\n        this.name = name;\n        this.index = getIndexFromName(name);\n        this.pcoGeometry = pcoGeometry;\n        this.boundingBox = boundingBox;\n        this.tightBoundingBox = boundingBox.clone();\n        this.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\n    }\n    dispose() {\n        if (!this.geometry || !this.parent) {\n            return;\n        }\n        this.geometry.dispose();\n        this.geometry = undefined;\n        this.loaded = false;\n        this.oneTimeDisposeHandlers.forEach(handler => handler());\n        this.oneTimeDisposeHandlers = [];\n    }\n    /**\n     * Gets the url of the binary file for this node.\n     */\n    getUrl() {\n        const geometry = this.pcoGeometry;\n        const version = geometry.loader.version;\n        const pathParts = [geometry.octreeDir];\n        if (geometry.loader && version.equalOrHigher('1.5')) {\n            pathParts.push(this.getHierarchyBaseUrl());\n            pathParts.push(this.name);\n        }\n        else if (version.equalOrHigher('1.4')) {\n            pathParts.push(this.name);\n        }\n        else if (version.upTo('1.3')) {\n            pathParts.push(this.name);\n        }\n        return pathParts.join('/');\n    }\n    /**\n     * Gets the url of the hierarchy file for this node.\n     */\n    getHierarchyUrl() {\n        return `${this.pcoGeometry.octreeDir}/${this.getHierarchyBaseUrl()}/${this.name}.hrc`;\n    }\n    /**\n     * Adds the specified node as a child of the current node.\n     *\n     * @param child\n     *    The node which is to be added as a child.\n     */\n    addChild(child) {\n        this.children[child.index] = child;\n        this.isLeafNode = false;\n        child.parent = this;\n    }\n    /**\n     * Calls the specified callback for the current node (if includeSelf is set to true) and all its\n     * children.\n     *\n     * @param cb\n     *    The function which is to be called for each node.\n     */\n    traverse(cb, includeSelf = true) {\n        const stack = includeSelf ? [this] : [];\n        let current;\n        while ((current = stack.pop()) !== undefined) {\n            cb(current);\n            for (const child of current.children) {\n                if (child !== null) {\n                    stack.push(child);\n                }\n            }\n        }\n    }\n    load() {\n        if (!this.canLoad()) {\n            return Promise.resolve();\n        }\n        this.loading = true;\n        this.pcoGeometry.numNodesLoading++;\n        this.pcoGeometry.needsUpdate = true;\n        let promise;\n        if (this.pcoGeometry.loader.version.equalOrHigher('1.5') &&\n            this.level % this.pcoGeometry.hierarchyStepSize === 0 &&\n            this.hasChildren) {\n            promise = this.loadHierachyThenPoints();\n        }\n        else {\n            promise = this.loadPoints();\n        }\n        return promise.catch(reason => {\n            this.loading = false;\n            this.failed = true;\n            this.pcoGeometry.numNodesLoading--;\n            throw reason;\n        });\n    }\n    canLoad() {\n        return (!this.loading &&\n            !this.loaded &&\n            !this.pcoGeometry.disposed &&\n            !this.pcoGeometry.loader.disposed &&\n            this.pcoGeometry.numNodesLoading < this.pcoGeometry.maxNumNodesLoading);\n    }\n    loadPoints() {\n        this.pcoGeometry.needsUpdate = true;\n        return this.pcoGeometry.loader.load(this);\n    }\n    loadHierachyThenPoints() {\n        if (this.level % this.pcoGeometry.hierarchyStepSize !== 0) {\n            return Promise.resolve();\n        }\n        return Promise.resolve(this.pcoGeometry.loader.getUrl(this.getHierarchyUrl()))\n            .then(url => this.pcoGeometry.xhrRequest(url, { mode: 'cors' }))\n            .then(res => handleFailedRequest(res))\n            .then(okRes => okRes.arrayBuffer())\n            .then(buffer => handleEmptyBuffer(buffer))\n            .then(okBuffer => this.loadHierarchy(this, okBuffer));\n    }\n    /**\n     * Gets the url of the folder where the hierarchy is, relative to the octreeDir.\n     */\n    getHierarchyBaseUrl() {\n        const hierarchyStepSize = this.pcoGeometry.hierarchyStepSize;\n        const indices = this.name.substr(1);\n        const numParts = Math.floor(indices.length / hierarchyStepSize);\n        let path = 'r/';\n        for (let i = 0; i < numParts; i++) {\n            path += `${indices.substr(i * hierarchyStepSize, hierarchyStepSize)}/`;\n        }\n        return path.slice(0, -1);\n    }\n    // tslint:disable:no-bitwise\n    loadHierarchy(node, buffer) {\n        const view = new DataView(buffer);\n        const firstNodeData = this.getNodeData(node.name, 0, view);\n        node.numPoints = firstNodeData.numPoints;\n        // Nodes which need be visited.\n        const stack = [firstNodeData];\n        // Nodes which have already been decoded. We will take nodes from the stack and place them here.\n        const decoded = [];\n        let offset = NODE_STRIDE;\n        while (stack.length > 0) {\n            const stackNodeData = stack.shift();\n            // From the last bit, all the way to the 8th one from the right.\n            let mask = 1;\n            for (let i = 0; i < 8 && offset + 1 < buffer.byteLength; i++) {\n                if ((stackNodeData.children & mask) !== 0) {\n                    const nodeData = this.getNodeData(stackNodeData.name + i, offset, view);\n                    decoded.push(nodeData); // Node is decoded.\n                    stack.push(nodeData); // Need to check its children.\n                    offset += NODE_STRIDE; // Move over to the next node in the buffer.\n                }\n                mask = mask * 2;\n            }\n        }\n        node.pcoGeometry.needsUpdate = true;\n        // Map containing all the nodes.\n        const nodes = new Map();\n        nodes.set(node.name, node);\n        decoded.forEach(nodeData => this.addNode(nodeData, node.pcoGeometry, nodes));\n        node.loadPoints();\n    }\n    // tslint:enable:no-bitwise\n    getNodeData(name, offset, view) {\n        const children = view.getUint8(offset);\n        const numPoints = view.getUint32(offset + 1, true);\n        return { children: children, numPoints: numPoints, name };\n    }\n    addNode({ name, numPoints, children }, pco, nodes) {\n        const index = getIndexFromName(name);\n        const parentName = name.substring(0, name.length - 1);\n        const parentNode = nodes.get(parentName);\n        const level = name.length - 1;\n        const boundingBox = createChildAABB(parentNode.boundingBox, index);\n        const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\n        node.level = level;\n        node.numPoints = numPoints;\n        node.hasChildren = children > 0;\n        node.spacing = pco.spacing / Math.pow(2, level);\n        parentNode.addChild(node);\n        nodes.set(name, node);\n    }\n}\nPointCloudOctreeGeometryNode.idCount = 0;\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-geometry.ts\n\nclass PointCloudOctreeGeometry {\n    constructor(loader, boundingBox, tightBoundingBox, offset, xhrRequest) {\n        this.loader = loader;\n        this.boundingBox = boundingBox;\n        this.tightBoundingBox = tightBoundingBox;\n        this.offset = offset;\n        this.xhrRequest = xhrRequest;\n        this.disposed = false;\n        this.needsUpdate = true;\n        this.octreeDir = '';\n        this.hierarchyStepSize = -1;\n        this.nodes = {};\n        this.numNodesLoading = 0;\n        this.maxNumNodesLoading = 3;\n        this.spacing = 0;\n        this.pointAttributes = new PointAttributes([]);\n        this.projection = null;\n        this.url = null;\n    }\n    dispose() {\n        this.loader.dispose();\n        this.root.traverse(node => node.dispose());\n        this.disposed = true;\n    }\n    addNodeLoadedCallback(callback) {\n        this.loader.callbacks.push(callback);\n    }\n    clearNodeLoadedCallbacks() {\n        this.loader.callbacks = [];\n    }\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-node.ts\n\nclass PointCloudOctreeNode extends external_three_.EventDispatcher {\n    constructor(geometryNode, sceneNode) {\n        super();\n        this.pcIndex = undefined;\n        this.boundingBoxNode = null;\n        this.loaded = true;\n        this.isTreeNode = true;\n        this.isGeometryNode = false;\n        this.geometryNode = geometryNode;\n        this.sceneNode = sceneNode;\n        this.children = geometryNode.children.slice();\n    }\n    dispose() {\n        this.geometryNode.dispose();\n    }\n    disposeSceneNode() {\n        const node = this.sceneNode;\n        if (node.geometry instanceof external_three_.BufferGeometry) {\n            const attributes = node.geometry.attributes;\n            // tslint:disable-next-line:forin\n            for (const key in attributes) {\n                if (key === 'position') {\n                    delete attributes[key].array;\n                }\n                delete attributes[key];\n            }\n            node.geometry.dispose();\n            node.geometry = undefined;\n        }\n    }\n    traverse(cb, includeSelf) {\n        this.geometryNode.traverse(cb, includeSelf);\n    }\n    get id() {\n        return this.geometryNode.id;\n    }\n    get name() {\n        return this.geometryNode.name;\n    }\n    get level() {\n        return this.geometryNode.level;\n    }\n    get isLeafNode() {\n        return this.geometryNode.isLeafNode;\n    }\n    get numPoints() {\n        return this.geometryNode.numPoints;\n    }\n    get index() {\n        return this.geometryNode.index;\n    }\n    get boundingSphere() {\n        return this.geometryNode.boundingSphere;\n    }\n    get boundingBox() {\n        return this.geometryNode.boundingBox;\n    }\n    get spacing() {\n        return this.geometryNode.spacing;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/math.ts\nfunction clamp(value, min, max) {\n    return Math.min(Math.max(min, value), max);\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-picker.ts\n\n\n\n\nclass PointCloudOctreePicker {\n    dispose() {\n        if (this.pickState) {\n            this.pickState.material.dispose();\n            this.pickState.renderTarget.dispose();\n        }\n    }\n    pick(renderer, camera, ray, octrees, params = {}) {\n        if (octrees.length === 0) {\n            return null;\n        }\n        const pickState = this.pickState\n            ? this.pickState\n            : (this.pickState = PointCloudOctreePicker.getPickState());\n        const pickMaterial = pickState.material;\n        const pixelRatio = renderer.getPixelRatio();\n        const width = Math.ceil(renderer.domElement.clientWidth * pixelRatio);\n        const height = Math.ceil(renderer.domElement.clientHeight * pixelRatio);\n        PointCloudOctreePicker.updatePickRenderTarget(this.pickState, width, height);\n        const pixelPosition = PointCloudOctreePicker.helperVec3; // Use helper vector to prevent extra allocations.\n        if (params.pixelPosition) {\n            pixelPosition.copy(params.pixelPosition);\n        }\n        else {\n            pixelPosition.addVectors(camera.position, ray.direction).project(camera);\n            pixelPosition.x = (pixelPosition.x + 1) * width * 0.5;\n            pixelPosition.y = (pixelPosition.y + 1) * height * 0.5;\n        }\n        const pickWndSize = Math.floor((params.pickWindowSize || DEFAULT_PICK_WINDOW_SIZE) * pixelRatio);\n        const halfPickWndSize = (pickWndSize - 1) / 2;\n        const x = Math.floor(clamp(pixelPosition.x - halfPickWndSize, 0, width));\n        const y = Math.floor(clamp(pixelPosition.y - halfPickWndSize, 0, height));\n        PointCloudOctreePicker.prepareRender(renderer, x, y, pickWndSize, pickMaterial, pickState);\n        const renderedNodes = PointCloudOctreePicker.render(renderer, camera, pickMaterial, octrees, ray, pickState, params);\n        // Cleanup\n        pickMaterial.clearVisibleNodeTextureOffsets();\n        // Read back image and decode hit point\n        const pixels = PointCloudOctreePicker.readPixels(renderer, x, y, pickWndSize);\n        const hit = PointCloudOctreePicker.findHit(pixels, pickWndSize);\n        return PointCloudOctreePicker.getPickPoint(hit, renderedNodes);\n    }\n    static prepareRender(renderer, x, y, pickWndSize, pickMaterial, pickState) {\n        // Render the intersected nodes onto the pick render target, clipping to a small pick window.\n        renderer.setScissor(x, y, pickWndSize, pickWndSize);\n        renderer.setScissorTest(true);\n        renderer.state.buffers.depth.setTest(pickMaterial.depthTest);\n        renderer.state.buffers.depth.setMask(pickMaterial.depthWrite);\n        renderer.state.setBlending(external_three_.NoBlending);\n        renderer.setRenderTarget(pickState.renderTarget);\n        // Save the current clear color and clear the renderer with black color and alpha 0.\n        renderer.getClearColor(this.clearColor);\n        const oldClearAlpha = renderer.getClearAlpha();\n        renderer.setClearColor(COLOR_BLACK, 0);\n        renderer.clear(true, true, true);\n        renderer.setClearColor(this.clearColor, oldClearAlpha);\n    }\n    static render(renderer, camera, pickMaterial, octrees, ray, pickState, params) {\n        const renderedNodes = [];\n        for (const octree of octrees) {\n            // Get all the octree nodes which intersect the picking ray. We only need to render those.\n            const nodes = PointCloudOctreePicker.nodesOnRay(octree, ray);\n            if (!nodes.length) {\n                continue;\n            }\n            PointCloudOctreePicker.updatePickMaterial(pickMaterial, octree.material, params);\n            pickMaterial.updateMaterial(octree, nodes, camera, renderer);\n            if (params.onBeforePickRender) {\n                params.onBeforePickRender(pickMaterial, pickState.renderTarget);\n            }\n            // Create copies of the nodes so we can render them differently than in the normal point cloud.\n            pickState.scene.children = PointCloudOctreePicker.createTempNodes(octree, nodes, pickMaterial, renderedNodes.length);\n            renderer.render(pickState.scene, camera);\n            nodes.forEach(node => renderedNodes.push({ node, octree }));\n        }\n        return renderedNodes;\n    }\n    static nodesOnRay(octree, ray) {\n        const nodesOnRay = [];\n        const rayClone = ray.clone();\n        for (const node of octree.visibleNodes) {\n            const sphere = PointCloudOctreePicker.helperSphere\n                .copy(node.boundingSphere)\n                .applyMatrix4(octree.matrixWorld);\n            if (rayClone.intersectsSphere(sphere)) {\n                nodesOnRay.push(node);\n            }\n        }\n        return nodesOnRay;\n    }\n    static readPixels(renderer, x, y, pickWndSize) {\n        // Read the pixel from the pick render target.\n        const pixels = new Uint8Array(4 * pickWndSize * pickWndSize);\n        renderer.readRenderTargetPixels(renderer.getRenderTarget(), x, y, pickWndSize, pickWndSize, pixels);\n        renderer.setScissorTest(false);\n        renderer.setRenderTarget(null);\n        return pixels;\n    }\n    static createTempNodes(octree, nodes, pickMaterial, nodeIndexOffset) {\n        const tempNodes = [];\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            const sceneNode = node.sceneNode;\n            const tempNode = new external_three_.Points(sceneNode.geometry, pickMaterial);\n            tempNode.matrix = sceneNode.matrix;\n            tempNode.matrixWorld = sceneNode.matrixWorld;\n            tempNode.matrixAutoUpdate = false;\n            tempNode.frustumCulled = false;\n            const nodeIndex = nodeIndexOffset + i + 1;\n            if (nodeIndex > 255) {\n                console.error('More than 255 nodes for pick are not supported.');\n            }\n            tempNode.onBeforeRender = PointCloudMaterial.makeOnBeforeRender(octree, node, nodeIndex);\n            tempNodes.push(tempNode);\n        }\n        return tempNodes;\n    }\n    static updatePickMaterial(pickMaterial, nodeMaterial, params) {\n        pickMaterial.pointSizeType = nodeMaterial.pointSizeType;\n        pickMaterial.shape = nodeMaterial.shape;\n        pickMaterial.size = nodeMaterial.size;\n        pickMaterial.minSize = nodeMaterial.minSize;\n        pickMaterial.maxSize = nodeMaterial.maxSize;\n        pickMaterial.classification = nodeMaterial.classification;\n        pickMaterial.useFilterByNormal = nodeMaterial.useFilterByNormal;\n        pickMaterial.filterByNormalThreshold = nodeMaterial.filterByNormalThreshold;\n        if (params.pickOutsideClipRegion) {\n            pickMaterial.clipMode = ClipMode.DISABLED;\n        }\n        else {\n            pickMaterial.clipMode = nodeMaterial.clipMode;\n            pickMaterial.setClipBoxes(nodeMaterial.clipMode === ClipMode.CLIP_OUTSIDE ? nodeMaterial.clipBoxes : []);\n        }\n    }\n    static updatePickRenderTarget(pickState, width, height) {\n        if (pickState.renderTarget.width === width && pickState.renderTarget.height === height) {\n            return;\n        }\n        pickState.renderTarget.dispose();\n        pickState.renderTarget = PointCloudOctreePicker.makePickRenderTarget();\n        pickState.renderTarget.setSize(width, height);\n    }\n    static makePickRenderTarget() {\n        return new external_three_.WebGLRenderTarget(1, 1, {\n            minFilter: external_three_.LinearFilter,\n            magFilter: external_three_.NearestFilter,\n            format: external_three_.RGBAFormat,\n        });\n    }\n    static findHit(pixels, pickWndSize) {\n        const ibuffer = new Uint32Array(pixels.buffer);\n        // Find closest hit inside pixelWindow boundaries\n        let min = Number.MAX_VALUE;\n        let hit = null;\n        for (let u = 0; u < pickWndSize; u++) {\n            for (let v = 0; v < pickWndSize; v++) {\n                const offset = u + v * pickWndSize;\n                const distance = Math.pow(u - (pickWndSize - 1) / 2, 2) + Math.pow(v - (pickWndSize - 1) / 2, 2);\n                const pcIndex = pixels[4 * offset + 3];\n                pixels[4 * offset + 3] = 0;\n                const pIndex = ibuffer[offset];\n                if (pcIndex > 0 && distance < min) {\n                    hit = {\n                        pIndex: pIndex,\n                        pcIndex: pcIndex - 1,\n                    };\n                    min = distance;\n                }\n            }\n        }\n        return hit;\n    }\n    static getPickPoint(hit, nodes) {\n        if (!hit) {\n            return null;\n        }\n        const point = {};\n        const points = nodes[hit.pcIndex] && nodes[hit.pcIndex].node.sceneNode;\n        if (!points) {\n            return null;\n        }\n        point.pointCloud = nodes[hit.pcIndex].octree;\n        const attributes = points.geometry.attributes;\n        for (const property in attributes) {\n            if (!attributes.hasOwnProperty(property)) {\n                continue;\n            }\n            const values = attributes[property];\n            // tslint:disable-next-line:prefer-switch\n            if (property === 'position') {\n                PointCloudOctreePicker.addPositionToPickPoint(point, hit, values, points);\n            }\n            else if (property === 'normal') {\n                PointCloudOctreePicker.addNormalToPickPoint(point, hit, values, points);\n            }\n            else if (property === 'indices') {\n                // TODO\n            }\n            else {\n                if (values.itemSize === 1) {\n                    point[property] = values.array[hit.pIndex];\n                }\n                else {\n                    const value = [];\n                    for (let j = 0; j < values.itemSize; j++) {\n                        value.push(values.array[values.itemSize * hit.pIndex + j]);\n                    }\n                    point[property] = value;\n                }\n            }\n        }\n        return point;\n    }\n    static addPositionToPickPoint(point, hit, values, points) {\n        point.position = new external_three_.Vector3()\n            .fromBufferAttribute(values, hit.pIndex)\n            .applyMatrix4(points.matrixWorld);\n    }\n    static addNormalToPickPoint(point, hit, values, points) {\n        const normal = new external_three_.Vector3().fromBufferAttribute(values, hit.pIndex);\n        const normal4 = new external_three_.Vector4(normal.x, normal.y, normal.z, 0).applyMatrix4(points.matrixWorld);\n        normal.set(normal4.x, normal4.y, normal4.z);\n        point.normal = normal;\n    }\n    static getPickState() {\n        const scene = new external_three_.Scene();\n        scene.matrixAutoUpdate = false;\n        const material = new PointCloudMaterial();\n        material.pointColorType = PointColorType.POINT_INDEX;\n        return {\n            renderTarget: PointCloudOctreePicker.makePickRenderTarget(),\n            material: material,\n            scene: scene,\n        };\n    }\n}\nPointCloudOctreePicker.helperVec3 = new external_three_.Vector3();\nPointCloudOctreePicker.helperSphere = new external_three_.Sphere();\nPointCloudOctreePicker.clearColor = new external_three_.Color();\n\n;// CONCATENATED MODULE: ./src/loading2/octree-geometry.ts\n\nclass OctreeGeometry {\n    constructor(loader, boundingBox) {\n        this.loader = loader;\n        this.boundingBox = boundingBox;\n        this.maxNumNodesLoading = 3;\n        this.numNodesLoading = 0;\n        this.needsUpdate = true;\n        this.disposed = false;\n        this.pointAttributes = null;\n        this.spacing = 0;\n        this.url = null;\n        this.tightBoundingBox = this.boundingBox.clone();\n        this.boundingSphere = this.boundingBox.getBoundingSphere(new external_three_.Sphere());\n        this.tightBoundingSphere = this.boundingSphere.clone();\n    }\n    dispose() {\n        this.root.traverse((node) => node.dispose());\n        this.disposed = true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-tree.ts\n\nclass PointCloudTree extends external_three_.Object3D {\n    constructor() {\n        super(...arguments);\n        this.root = null;\n    }\n    initialized() {\n        return this.root !== null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree.ts\n\n\n\n\n\n\n\n\nclass PointCloudOctree extends PointCloudTree {\n    constructor(potree, pcoGeometry, material) {\n        super();\n        this.disposed = false;\n        this.level = 0;\n        this.maxLevel = Infinity;\n        /**\n         * The minimum radius of a node's bounding sphere on the screen in order to be displayed.\n         */\n        this.minNodePixelSize = DEFAULT_MIN_NODE_PIXEL_SIZE;\n        this.root = null;\n        this.boundingBoxNodes = [];\n        this.visibleNodes = [];\n        this.visibleGeometry = [];\n        this.numVisiblePoints = 0;\n        this.showBoundingBox = false;\n        this.visibleBounds = new external_three_.Box3();\n        this.name = '';\n        this.potree = potree;\n        this.root = pcoGeometry.root;\n        this.pcoGeometry = pcoGeometry;\n        this.boundingBox = pcoGeometry.boundingBox;\n        this.boundingSphere = this.boundingBox.getBoundingSphere(new external_three_.Sphere());\n        this.position.copy(pcoGeometry.offset);\n        this.updateMatrix();\n        this.material = material || pcoGeometry instanceof OctreeGeometry ? new PointCloudMaterial({ colorRgba: true }) : new PointCloudMaterial();\n        this.initMaterial(this.material);\n    }\n    initMaterial(material) {\n        this.updateMatrixWorld(true);\n        const { min, max } = computeTransformedBoundingBox(this.pcoGeometry.tightBoundingBox || this.getBoundingBoxWorld(), this.matrixWorld);\n        const bWidth = max.z - min.z;\n        material.heightMin = min.z - 0.2 * bWidth;\n        material.heightMax = max.z + 0.2 * bWidth;\n    }\n    dispose() {\n        if (this.root) {\n            this.root.dispose();\n        }\n        this.pcoGeometry.root.traverse(n => this.potree.lru.remove(n));\n        this.pcoGeometry.dispose();\n        this.material.dispose();\n        this.visibleNodes = [];\n        this.visibleGeometry = [];\n        if (this.picker) {\n            this.picker.dispose();\n            this.picker = undefined;\n        }\n        this.disposed = true;\n    }\n    get pointSizeType() {\n        return this.material.pointSizeType;\n    }\n    set pointSizeType(value) {\n        this.material.pointSizeType = value;\n    }\n    toTreeNode(geometryNode, parent) {\n        const points = new external_three_.Points(geometryNode.geometry, this.material);\n        const node = new PointCloudOctreeNode(geometryNode, points);\n        points.name = geometryNode.name;\n        points.position.copy(geometryNode.boundingBox.min);\n        points.frustumCulled = false;\n        points.onBeforeRender = PointCloudMaterial.makeOnBeforeRender(this, node);\n        if (parent) {\n            parent.sceneNode.add(points);\n            parent.children[geometryNode.index] = node;\n            geometryNode.oneTimeDisposeHandlers.push(() => {\n                node.disposeSceneNode();\n                parent.sceneNode.remove(node.sceneNode);\n                // Replace the tree node (rendered and in the GPU) with the geometry node.\n                parent.children[geometryNode.index] = geometryNode;\n            });\n        }\n        else {\n            this.root = node;\n            this.add(points);\n        }\n        return node;\n    }\n    updateVisibleBounds() {\n        const bounds = this.visibleBounds;\n        bounds.min.set(Infinity, Infinity, Infinity);\n        bounds.max.set(-Infinity, -Infinity, -Infinity);\n        for (const node of this.visibleNodes) {\n            if (node.isLeafNode) {\n                bounds.expandByPoint(node.boundingBox.min);\n                bounds.expandByPoint(node.boundingBox.max);\n            }\n        }\n    }\n    updateBoundingBoxes() {\n        if (!this.showBoundingBox || !this.parent) {\n            return;\n        }\n        let bbRoot = this.parent.getObjectByName('bbroot');\n        if (!bbRoot) {\n            bbRoot = new external_three_.Object3D();\n            bbRoot.name = 'bbroot';\n            this.parent.add(bbRoot);\n        }\n        const visibleBoxes = [];\n        for (const node of this.visibleNodes) {\n            if (node.boundingBoxNode !== undefined && node.isLeafNode) {\n                visibleBoxes.push(node.boundingBoxNode);\n            }\n        }\n        bbRoot.children = visibleBoxes;\n    }\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate === true) {\n            this.updateMatrix();\n        }\n        if (this.matrixWorldNeedsUpdate === true || force === true) {\n            if (!this.parent) {\n                this.matrixWorld.copy(this.matrix);\n            }\n            else {\n                this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n            }\n            this.matrixWorldNeedsUpdate = false;\n            force = true;\n        }\n    }\n    hideDescendants(object) {\n        const toHide = [];\n        addVisibleChildren(object);\n        while (toHide.length > 0) {\n            const objToHide = toHide.shift();\n            objToHide.visible = false;\n            addVisibleChildren(objToHide);\n        }\n        function addVisibleChildren(obj) {\n            for (const child of obj.children) {\n                if (child.visible) {\n                    toHide.push(child);\n                }\n            }\n        }\n    }\n    moveToOrigin() {\n        this.position.set(0, 0, 0); // Reset, then the matrix will be updated in getBoundingBoxWorld()\n        this.position.set(0, 0, 0).sub(this.getBoundingBoxWorld().getCenter(new external_three_.Vector3()));\n    }\n    moveToGroundPlane() {\n        this.position.y += -this.getBoundingBoxWorld().min.y;\n    }\n    getBoundingBoxWorld() {\n        this.updateMatrixWorld(true);\n        return computeTransformedBoundingBox(this.boundingBox, this.matrixWorld);\n    }\n    getVisibleExtent() {\n        return this.visibleBounds.applyMatrix4(this.matrixWorld);\n    }\n    pick(renderer, camera, ray, params = {}) {\n        this.picker = this.picker || new PointCloudOctreePicker();\n        return this.picker.pick(renderer, camera, ray, [this], params);\n    }\n    get progress() {\n        return this.visibleGeometry.length === 0\n            ? 0\n            : this.visibleNodes.length / this.visibleGeometry.length;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/features.ts\nconst canvas = document.createElement('canvas');\nconst gl = canvas.getContext('webgl');\nconst FEATURES = {\n    SHADER_INTERPOLATION: hasExtension('EXT_frag_depth') && hasMinVaryingVectors(8),\n    SHADER_SPLATS: hasExtension('EXT_frag_depth') && hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\n    SHADER_EDL: hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\n    precision: getPrecision(),\n};\nfunction hasExtension(ext) {\n    return gl !== null && Boolean(gl.getExtension(ext));\n}\nfunction hasMinVaryingVectors(value) {\n    return gl !== null && gl.getParameter(gl.MAX_VARYING_VECTORS) >= value;\n}\nfunction getPrecision() {\n    if (gl === null) {\n        return '';\n    }\n    const vsHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);\n    const vsMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);\n    const fsHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n    const fsMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);\n    const highpAvailable = vsHighpFloat && fsHighpFloat && vsHighpFloat.precision > 0 && fsHighpFloat.precision > 0;\n    const mediumpAvailable = vsMediumpFloat &&\n        fsMediumpFloat &&\n        vsMediumpFloat.precision > 0 &&\n        fsMediumpFloat.precision > 0;\n    return highpAvailable ? 'highp' : mediumpAvailable ? 'mediump' : 'lowp';\n}\n\n;// CONCATENATED MODULE: ./src/utils/async-blocking-queue.ts\nclass AsyncBlockingQueue {\n    constructor() {\n        this.resolvers = [];\n        this.promises = [];\n    }\n    enqueue(t) {\n        if (!this.resolvers.length) {\n            this.add();\n        }\n        const resolve = this.resolvers.shift();\n        resolve(t);\n    }\n    dequeue() {\n        if (!this.promises.length) {\n            this.add();\n        }\n        return this.promises.shift();\n    }\n    add() {\n        this.promises.push(new Promise(resolve => {\n            this.resolvers.push(resolve);\n        }));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/worker-pool.ts\n\nclass AutoTerminatingWorker {\n    constructor(wrappedWorker, maxIdle) {\n        this.wrappedWorker = wrappedWorker;\n        this.maxIdle = maxIdle;\n        this.timeoutId = undefined;\n        this.terminated = false;\n    }\n    get worker() {\n        return this.wrappedWorker;\n    }\n    get isTerminated() {\n        return this.terminated;\n    }\n    markIdle() {\n        this.timeoutId = window.setTimeout(() => {\n            this.terminated = true;\n            this.wrappedWorker.terminate();\n        }, this.maxIdle);\n    }\n    markInUse() {\n        if (this.timeoutId) {\n            window.clearTimeout(this.timeoutId);\n        }\n    }\n}\nclass WorkerPool {\n    constructor(maxWorkers, workerType) {\n        this.maxWorkers = maxWorkers;\n        this.workerType = workerType;\n        this.pool = new AsyncBlockingQueue();\n        this.poolSize = 0;\n    }\n    /**\n     * Returns a worker promise which is resolved when one is available.\n     */\n    getWorker() {\n        // If the number of active workers is smaller than the maximum, return a new one.\n        // Otherwise, return a promise for worker from the pool.\n        if (this.poolSize < this.maxWorkers) {\n            this.poolSize++;\n            return Promise.resolve(new AutoTerminatingWorker(new this.workerType(), WorkerPool.POOL_MAX_IDLE));\n        }\n        else {\n            return this.pool.dequeue().then(worker => {\n                worker.markInUse();\n                // If the dequeued worker has been terminated, decrease the pool size and make a recursive call to get a new worker\n                if (worker.isTerminated) {\n                    this.poolSize--;\n                    return this.getWorker();\n                }\n                return worker;\n            });\n        }\n    }\n    /**\n     * Releases a Worker back into the pool\n     * @param worker\n     */\n    releaseWorker(worker) {\n        worker.markIdle();\n        this.pool.enqueue(worker);\n    }\n}\n/**\n * The maximum amount of idle time that can elapse before a worker from this pool is automatically terminated\n */\nWorkerPool.POOL_MAX_IDLE = 7000;\n\n;// CONCATENATED MODULE: ./src/version.ts\nclass Version {\n    constructor(version) {\n        this.versionMinor = 0;\n        this.version = version;\n        const vmLength = version.indexOf('.') === -1 ? version.length : version.indexOf('.');\n        this.versionMajor = parseInt(version.substr(0, vmLength), 10);\n        this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\n        if (isNaN(this.versionMinor)) {\n            this.versionMinor = 0;\n        }\n    }\n    newerThan(version) {\n        const v = new Version(version);\n        if (this.versionMajor > v.versionMajor) {\n            return true;\n        }\n        else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    equalOrHigher(version) {\n        const v = new Version(version);\n        if (this.versionMajor > v.versionMajor) {\n            return true;\n        }\n        else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    upTo(version) {\n        return !this.newerThan(version);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading/binary-loader.ts\n// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\n\n\n\n\nclass BinaryLoader {\n    constructor({ getUrl = s => Promise.resolve(s), version, boundingBox, scale, xhrRequest, }) {\n        this.disposed = false;\n        if (typeof version === 'string') {\n            this.version = new Version(version);\n        }\n        else {\n            this.version = version;\n        }\n        this.xhrRequest = xhrRequest;\n        this.getUrl = getUrl;\n        this.boundingBox = boundingBox;\n        this.scale = scale;\n        this.callbacks = [];\n    }\n    dispose() {\n        this.disposed = true;\n    }\n    load(node) {\n        if (node.loaded || this.disposed) {\n            return Promise.resolve();\n        }\n        return Promise.resolve(this.getUrl(this.getNodeUrl(node)))\n            .then(url => this.xhrRequest(url, { mode: 'cors' }))\n            .then(res => handleFailedRequest(res))\n            .then(okRes => okRes.arrayBuffer())\n            .then(buffer => handleEmptyBuffer(buffer))\n            .then(okBuffer => {\n            return new Promise(resolve => this.parse(node, okBuffer, resolve));\n        });\n    }\n    getNodeUrl(node) {\n        let url = node.getUrl();\n        if (this.version.equalOrHigher('1.4')) {\n            url += '.bin';\n        }\n        return url;\n    }\n    parse(node, buffer, resolve) {\n        if (this.disposed) {\n            resolve();\n            return;\n        }\n        BinaryLoader.WORKER_POOL.getWorker().then(autoTerminatingWorker => {\n            const pointAttributes = node.pcoGeometry.pointAttributes;\n            const numPoints = buffer.byteLength / pointAttributes.byteSize;\n            if (this.version.upTo('1.5')) {\n                node.numPoints = numPoints;\n            }\n            autoTerminatingWorker.worker.onmessage = (e) => {\n                if (this.disposed) {\n                    resolve();\n                    BinaryLoader.WORKER_POOL.releaseWorker(autoTerminatingWorker);\n                    return;\n                }\n                const data = e.data;\n                const geometry = (node.geometry = node.geometry || new external_three_.BufferGeometry());\n                geometry.boundingBox = node.boundingBox;\n                this.addBufferAttributes(geometry, data.attributeBuffers);\n                this.addIndices(geometry, data.indices);\n                this.addNormalAttribute(geometry, numPoints);\n                node.mean = new external_three_.Vector3().fromArray(data.mean);\n                node.tightBoundingBox = this.getTightBoundingBox(data.tightBoundingBox);\n                node.loaded = true;\n                node.loading = false;\n                node.failed = false;\n                node.pcoGeometry.numNodesLoading--;\n                node.pcoGeometry.needsUpdate = true;\n                this.callbacks.forEach(callback => callback(node));\n                resolve();\n                BinaryLoader.WORKER_POOL.releaseWorker(autoTerminatingWorker);\n            };\n            const message = {\n                buffer,\n                pointAttributes,\n                version: this.version.version,\n                min: node.boundingBox.min.toArray(),\n                offset: node.pcoGeometry.offset.toArray(),\n                scale: this.scale,\n                spacing: node.spacing,\n                hasChildren: node.hasChildren,\n            };\n            autoTerminatingWorker.worker.postMessage(message, [message.buffer]);\n        });\n    }\n    getTightBoundingBox({ min, max }) {\n        const box = new external_three_.Box3(new external_three_.Vector3().fromArray(min), new external_three_.Vector3().fromArray(max));\n        box.max.sub(box.min);\n        box.min.set(0, 0, 0);\n        return box;\n    }\n    addBufferAttributes(geometry, buffers) {\n        Object.keys(buffers).forEach(property => {\n            const buffer = buffers[property].buffer;\n            if (this.isAttribute(property, PointAttributeName.POSITION_CARTESIAN)) {\n                geometry.setAttribute('position', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n            }\n            else if (this.isAttribute(property, PointAttributeName.COLOR_PACKED)) {\n                geometry.setAttribute('color', new external_three_.BufferAttribute(new Uint8Array(buffer), 3, true));\n            }\n            else if (this.isAttribute(property, PointAttributeName.INTENSITY)) {\n                geometry.setAttribute('intensity', new external_three_.BufferAttribute(new Float32Array(buffer), 1));\n            }\n            else if (this.isAttribute(property, PointAttributeName.CLASSIFICATION)) {\n                geometry.setAttribute('classification', new external_three_.BufferAttribute(new Uint8Array(buffer), 1));\n            }\n            else if (this.isAttribute(property, PointAttributeName.NORMAL_SPHEREMAPPED)) {\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n            }\n            else if (this.isAttribute(property, PointAttributeName.NORMAL_OCT16)) {\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n            }\n            else if (this.isAttribute(property, PointAttributeName.NORMAL)) {\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n            }\n        });\n    }\n    addIndices(geometry, indices) {\n        const indicesAttribute = new external_three_.Uint8BufferAttribute(indices, 4);\n        indicesAttribute.normalized = true;\n        geometry.setAttribute('indices', indicesAttribute);\n    }\n    addNormalAttribute(geometry, numPoints) {\n        if (!geometry.getAttribute('normal')) {\n            const buffer = new Float32Array(numPoints * 3);\n            geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n        }\n    }\n    isAttribute(property, name) {\n        return parseInt(property, 10) === name;\n    }\n}\nBinaryLoader.WORKER_POOL = new WorkerPool(32, (__webpack_require__(91)/* [\"default\"] */ .A));\n\n;// CONCATENATED MODULE: ./src/loading/load-poc.ts\n// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n/**\n *\n * @param url\n *    The url of the point cloud file (usually cloud.js).\n * @param getUrl\n *    Function which receives the relative URL of a point cloud chunk file which is to be loaded\n *    and shoud return a new url (e.g. signed) in the form of a string or a promise.\n * @param xhrRequest An arrow function for a fetch request\n * @returns\n *    An observable which emits once when the first LOD of the point cloud is loaded.\n */\nfunction loadPOC(url, getUrl, xhrRequest) {\n    return Promise.resolve(getUrl(url)).then(transformedUrl => {\n        return xhrRequest(transformedUrl, { mode: 'cors' })\n            .then(res => handleFailedRequest(res))\n            .then(okRes => okRes.json())\n            .then(parse(transformedUrl, getUrl, xhrRequest));\n    });\n}\nfunction parse(url, getUrl, xhrRequest) {\n    return (data) => {\n        const { offset, boundingBox, tightBoundingBox } = getBoundingBoxes(data);\n        const loader = new BinaryLoader({\n            getUrl,\n            version: data.version,\n            boundingBox,\n            scale: data.scale,\n            xhrRequest,\n        });\n        const pco = new PointCloudOctreeGeometry(loader, boundingBox, tightBoundingBox, offset, xhrRequest);\n        pco.url = url;\n        pco.octreeDir = data.octreeDir;\n        pco.needsUpdate = true;\n        pco.spacing = data.spacing;\n        pco.hierarchyStepSize = data.hierarchyStepSize;\n        pco.projection = data.projection;\n        pco.offset = offset;\n        pco.pointAttributes = new PointAttributes(data.pointAttributes);\n        const nodes = {};\n        const version = new Version(data.version);\n        return loadRoot(pco, data, nodes, version).then(() => {\n            if (version.upTo('1.4')) {\n                loadRemainingHierarchy(pco, data, nodes);\n            }\n            pco.nodes = nodes;\n            return pco;\n        });\n    };\n}\nfunction getBoundingBoxes(data) {\n    const min = new external_three_.Vector3(data.boundingBox.lx, data.boundingBox.ly, data.boundingBox.lz);\n    const max = new external_three_.Vector3(data.boundingBox.ux, data.boundingBox.uy, data.boundingBox.uz);\n    const boundingBox = new external_three_.Box3(min, max);\n    const tightBoundingBox = boundingBox.clone();\n    const offset = min.clone();\n    if (data.tightBoundingBox) {\n        const { lx, ly, lz, ux, uy, uz } = data.tightBoundingBox;\n        tightBoundingBox.min.set(lx, ly, lz);\n        tightBoundingBox.max.set(ux, uy, uz);\n    }\n    boundingBox.min.sub(offset);\n    boundingBox.max.sub(offset);\n    tightBoundingBox.min.sub(offset);\n    tightBoundingBox.max.sub(offset);\n    return { offset, boundingBox, tightBoundingBox };\n}\nfunction loadRoot(pco, data, nodes, version) {\n    const name = 'r';\n    const root = new PointCloudOctreeGeometryNode(name, pco, pco.boundingBox);\n    root.hasChildren = true;\n    root.spacing = pco.spacing;\n    if (version.upTo('1.5')) {\n        root.numPoints = data.hierarchy[0][1];\n    }\n    else {\n        root.numPoints = 0;\n    }\n    pco.root = root;\n    nodes[name] = root;\n    return pco.root.load();\n}\nfunction loadRemainingHierarchy(pco, data, nodes) {\n    for (let i = 1; i < data.hierarchy.length; i++) {\n        const [name, numPoints] = data.hierarchy[i];\n        const { index, parentName, level } = parseName(name);\n        const parentNode = nodes[parentName];\n        const boundingBox = createChildAABB(parentNode.boundingBox, index);\n        const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\n        node.level = level;\n        node.numPoints = numPoints;\n        node.spacing = pco.spacing / Math.pow(2, node.level);\n        nodes[name] = node;\n        parentNode.addChild(node);\n    }\n}\nfunction parseName(name) {\n    return {\n        index: getIndexFromName(name),\n        parentName: name.substring(0, name.length - 1),\n        level: name.length - 1,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/loading/index.ts\n\n\n\n\n;// CONCATENATED MODULE: ./src/loading2/octree-geometry-node.ts\n\nclass OctreeGeometryNode {\n    constructor(name, octreeGeometry, boundingBox) {\n        this.name = name;\n        this.octreeGeometry = octreeGeometry;\n        this.boundingBox = boundingBox;\n        this.loaded = false;\n        this.loading = false;\n        this.parent = null;\n        this.geometry = null;\n        this.hasChildren = false;\n        this.isLeafNode = true;\n        this.isTreeNode = false;\n        this.isGeometryNode = true;\n        this.children = [\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null\n        ];\n        this.id = OctreeGeometryNode.IDCount++;\n        this.index = parseInt(name.charAt(name.length - 1));\n        this.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\n        this.tightBoundingBox = boundingBox.clone();\n        this.numPoints = 0;\n        this.oneTimeDisposeHandlers = [];\n    }\n    getLevel() {\n        return this.level;\n    }\n    isLoaded() {\n        return this.loaded;\n    }\n    getBoundingSphere() {\n        return this.boundingSphere;\n    }\n    getBoundingBox() {\n        return this.boundingBox;\n    }\n    load() {\n        if (this.octreeGeometry.numNodesLoading >= this.octreeGeometry.maxNumNodesLoading) {\n            return;\n        }\n        if (this.octreeGeometry.loader) {\n            this.octreeGeometry.loader.load(this);\n        }\n    }\n    getNumPoints() {\n        return this.numPoints;\n    }\n    dispose() {\n        if (this.geometry && this.parent != null) {\n            this.geometry.dispose();\n            this.geometry = null;\n            this.loaded = false;\n            for (let i = 0; i < this.oneTimeDisposeHandlers.length; i++) {\n                const handler = this.oneTimeDisposeHandlers[i];\n                handler();\n            }\n            this.oneTimeDisposeHandlers = [];\n        }\n    }\n    traverse(cb, includeSelf = true) {\n        const stack = includeSelf ? [this] : [];\n        let current;\n        while ((current = stack.pop()) !== undefined) {\n            cb(current);\n            for (const child of current.children) {\n                if (child !== null) {\n                    stack.push(child);\n                }\n            }\n        }\n    }\n}\nOctreeGeometryNode.IDCount = 0;\nOctreeGeometryNode.IDCount = 0;\n\n;// CONCATENATED MODULE: ./src/loading2/point-attributes.ts\n/**\n * Some types of possible point attribute data formats\n *\n * @class\n */\nconst PointAttributeTypes = {\n    DATA_TYPE_DOUBLE: { ordinal: 0, name: 'double', size: 8 },\n    DATA_TYPE_FLOAT: { ordinal: 1, name: 'float', size: 4 },\n    DATA_TYPE_INT8: { ordinal: 2, name: 'int8', size: 1 },\n    DATA_TYPE_UINT8: { ordinal: 3, name: 'uint8', size: 1 },\n    DATA_TYPE_INT16: { ordinal: 4, name: 'int16', size: 2 },\n    DATA_TYPE_UINT16: { ordinal: 5, name: 'uint16', size: 2 },\n    DATA_TYPE_INT32: { ordinal: 6, name: 'int32', size: 4 },\n    DATA_TYPE_UINT32: { ordinal: 7, name: 'uint32', size: 4 },\n    DATA_TYPE_INT64: { ordinal: 8, name: 'int64', size: 8 },\n    DATA_TYPE_UINT64: { ordinal: 9, name: 'uint64', size: 8 }\n};\nlet i = 0;\nfor (const obj in PointAttributeTypes) {\n    PointAttributeTypes[i] = PointAttributeTypes[obj];\n    i++;\n}\n\nclass PointAttribute {\n    constructor(name, type, numElements, range = [Infinity, -Infinity], uri = undefined) {\n        this.name = name;\n        this.type = type;\n        this.numElements = numElements;\n        this.range = range;\n        this.uri = uri;\n        this.byteSize = this.numElements * this.type.size;\n        this.description = '';\n    }\n}\n\nconst point_attributes_POINT_ATTRIBUTES = {\n    POSITION_CARTESIAN: new PointAttribute('POSITION_CARTESIAN', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n    RGBA_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\n    COLOR_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\n    RGB_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 3),\n    NORMAL_FLOATS: new PointAttribute('NORMAL_FLOATS', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n    INTENSITY: new PointAttribute('INTENSITY', PointAttributeTypes.DATA_TYPE_UINT16, 1),\n    CLASSIFICATION: new PointAttribute('CLASSIFICATION', PointAttributeTypes.DATA_TYPE_UINT8, 1),\n    NORMAL_SPHEREMAPPED: new PointAttribute('NORMAL_SPHEREMAPPED', PointAttributeTypes.DATA_TYPE_UINT8, 2),\n    NORMAL_OCT16: new PointAttribute('NORMAL_OCT16', PointAttributeTypes.DATA_TYPE_UINT8, 2),\n    NORMAL: new PointAttribute('NORMAL', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n    RETURN_NUMBER: new PointAttribute('RETURN_NUMBER', PointAttributeTypes.DATA_TYPE_UINT8, 1),\n    NUMBER_OF_RETURNS: new PointAttribute('NUMBER_OF_RETURNS', PointAttributeTypes.DATA_TYPE_UINT8, 1),\n    SOURCE_ID: new PointAttribute('SOURCE_ID', PointAttributeTypes.DATA_TYPE_UINT16, 1),\n    INDICES: new PointAttribute('INDICES', PointAttributeTypes.DATA_TYPE_UINT32, 1),\n    SPACING: new PointAttribute('SPACING', PointAttributeTypes.DATA_TYPE_FLOAT, 1),\n    GPS_TIME: new PointAttribute('GPS_TIME', PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\n};\nclass point_attributes_PointAttributes {\n    constructor(pointAttributes, attributes = [], byteSize = 0, size = 0, vectors = []) {\n        this.attributes = attributes;\n        this.byteSize = byteSize;\n        this.size = size;\n        this.vectors = vectors;\n        if (pointAttributes != null) {\n            for (let i = 0; i < pointAttributes.length; i++) {\n                const pointAttributeName = pointAttributes[i];\n                const pointAttribute = point_attributes_POINT_ATTRIBUTES[pointAttributeName];\n                this.attributes.push(pointAttribute);\n                this.byteSize += pointAttribute.byteSize;\n                this.size++;\n            }\n        }\n    }\n    add(pointAttribute) {\n        this.attributes.push(pointAttribute);\n        this.byteSize += pointAttribute.byteSize;\n        this.size++;\n    }\n    addVector(vector) {\n        this.vectors.push(vector);\n    }\n    hasNormals() {\n        for (const name in this.attributes) {\n            const pointAttribute = this.attributes[name];\n            if (pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_FLOATS ||\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL ||\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_OCT16) {\n                return true;\n            }\n        }\n        return false;\n    }\n    getAttribute(attributeName) {\n        return this.attributes.find(attr => attr.name === attributeName);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading2/worker-pool.ts\n// Create enums for different types of workers\nvar WorkerType;\n(function (WorkerType) {\n    WorkerType[\"DECODER_WORKER\"] = \"DECODER_WORKER\";\n    WorkerType[\"DECODER_WORKER_GLTF\"] = \"DECODER_WORKER_GLTF\";\n})(WorkerType || (WorkerType = {}));\n// Worker JS names: 'BinaryDecoderWorker.js', 'DEMWorker.js', 'EptBinaryDecoderWorker.js', 'EptLaszipDecoderWorker.js',\n// EptZstandardDecoder_preamble.js', 'EptZstandardDecoderWorker.js', 'LASDecoderWorker.js', 'LASLAZWorker.js', 'LazLoaderWorker.js'\nfunction createWorker(type) {\n    // console.log(type)\n    switch (type) {\n        case WorkerType.DECODER_WORKER: {\n            const DecoderWorker = (__webpack_require__(300)/* [\"default\"] */ .A);\n            return new DecoderWorker();\n        }\n        case WorkerType.DECODER_WORKER_GLTF: {\n            const DecoderWorker_GLTF = (__webpack_require__(218)/* [\"default\"] */ .A);\n            return new DecoderWorker_GLTF();\n        }\n        default:\n            throw new Error('Unknown worker type');\n    }\n}\nclass worker_pool_WorkerPool {\n    constructor() {\n        // Workers will be an object that has a key for each worker type and the value is an array of Workers that can be empty\n        this.workers = { DECODER_WORKER: [], DECODER_WORKER_GLTF: [] };\n    }\n    getWorker(workerType) {\n        // Throw error if workerType is not recognized\n        if (this.workers[workerType] === undefined) {\n            throw new Error('Unknown worker type');\n        }\n        // Given a worker URL, if URL does not exist in the worker object, create a new array with the URL as a key\n        if (this.workers[workerType].length === 0) {\n            const worker = createWorker(workerType);\n            this.workers[workerType].push(worker);\n        }\n        const worker = this.workers[workerType].pop();\n        if (worker === undefined) { // Typescript needs this\n            throw new Error('No workers available');\n        }\n        // Return the last worker in the array and remove it from the array\n        return worker;\n    }\n    returnWorker(workerType, worker) {\n        this.workers[workerType].push(worker);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading2/utils.ts\nfunction extractBasePath(url) {\n    return url.substring(0, url.lastIndexOf('/') + 1);\n}\nfunction buildUrl(basePath, fileName) {\n    return `${basePath}${fileName}`;\n}\n\n;// CONCATENATED MODULE: ./src/loading2/octree-loader.ts\n\n\n\n\n\n\n\n// Buffer files for DEFAULT encoding\nconst HIERARCHY_FILE = 'hierarchy.bin';\nconst OCTREE_FILE = 'octree.bin';\n// Default buffer files for GLTF encoding\nconst GLTF_COLORS_FILE = 'colors.glbin';\nconst GLTF_POSITIONS_FILE = 'positions.glbin';\nclass NodeLoader {\n    constructor(getUrl, url, workerPool, metadata) {\n        this.getUrl = getUrl;\n        this.url = url;\n        this.workerPool = workerPool;\n        this.metadata = metadata;\n        this.hierarchyPath = '';\n        this.octreePath = '';\n        this.gltfColorsPath = '';\n        this.gltfPositionsPath = '';\n    }\n    async load(node) {\n        if (node.loaded || node.loading) {\n            return;\n        }\n        node.loading = true;\n        node.octreeGeometry.numNodesLoading++;\n        try {\n            if (node.nodeType === 2) {\n                await this.loadHierarchy(node);\n            }\n            const { byteOffset, byteSize } = node;\n            if (byteOffset === undefined || byteSize === undefined) {\n                throw new Error('byteOffset and byteSize are required');\n            }\n            let buffer;\n            if (this.metadata.encoding === \"GLTF\") {\n                const urlColors = await this.getUrl(this.gltfColorsPath);\n                const urlPositions = await this.getUrl(this.gltfPositionsPath);\n                if (byteSize === BigInt(0)) {\n                    buffer = new ArrayBuffer(0);\n                    console.warn(`loaded node with 0 bytes: ${node.name}`);\n                }\n                else {\n                    const firstPositions = byteOffset * 4n * 3n;\n                    const lastPositions = byteOffset * 4n * 3n + byteSize * 4n * 3n - 1n;\n                    const headersPositions = { Range: `bytes=${firstPositions}-${lastPositions}` };\n                    const responsePositions = await fetch(urlPositions, { headers: headersPositions });\n                    const bufferPositions = await responsePositions.arrayBuffer();\n                    const firstColors = byteOffset * 4n;\n                    const lastColors = byteOffset * 4n + byteSize * 4n - 1n;\n                    const headersColors = { Range: `bytes=${firstColors}-${lastColors}` };\n                    const responseColors = await fetch(urlColors, { headers: headersColors });\n                    const bufferColors = await responseColors.arrayBuffer();\n                    buffer = appendBuffer(bufferPositions, bufferColors);\n                }\n            }\n            else {\n                const urlOctree = await this.getUrl(this.octreePath);\n                const first = byteOffset;\n                const last = byteOffset + byteSize - BigInt(1);\n                if (byteSize === BigInt(0)) {\n                    buffer = new ArrayBuffer(0);\n                    console.warn(`loaded node with 0 bytes: ${node.name}`);\n                }\n                else {\n                    const headers = { Range: `bytes=${first}-${last}` };\n                    const response = await fetch(urlOctree, { headers });\n                    buffer = await response.arrayBuffer();\n                }\n            }\n            const workerType = this.metadata.encoding === 'GLTF' ? WorkerType.DECODER_WORKER_GLTF : WorkerType.DECODER_WORKER;\n            const worker = this.workerPool.getWorker(workerType);\n            worker.onmessage = (e) => {\n                const data = e.data;\n                const buffers = data.attributeBuffers;\n                this.workerPool.returnWorker(workerType, worker);\n                const geometry = new external_three_.BufferGeometry();\n                for (const property in buffers) {\n                    const buffer = buffers[property].buffer;\n                    if (property === 'position') {\n                        geometry.setAttribute('position', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n                    }\n                    else if (property === 'rgba') {\n                        geometry.setAttribute('rgba', new external_three_.BufferAttribute(new Uint8Array(buffer), 4, true));\n                    }\n                    else if (property === 'NORMAL') {\n                        geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\n                    }\n                    else if (property === 'INDICES') {\n                        const bufferAttribute = new external_three_.BufferAttribute(new Uint8Array(buffer), 4);\n                        bufferAttribute.normalized = true;\n                        geometry.setAttribute('indices', bufferAttribute);\n                    }\n                    else {\n                        const bufferAttribute = new external_three_.BufferAttribute(new Float32Array(buffer), 1);\n                        const batchAttribute = buffers[property].attribute;\n                        bufferAttribute.potree = {\n                            offset: buffers[property].offset,\n                            scale: buffers[property].scale,\n                            preciseBuffer: buffers[property].preciseBuffer,\n                            range: batchAttribute.range\n                        };\n                        geometry.setAttribute(property, bufferAttribute);\n                    }\n                }\n                node.density = data.density;\n                node.geometry = geometry;\n                node.loaded = true;\n                node.loading = false;\n                node.octreeGeometry.numNodesLoading--;\n                node.octreeGeometry.needsUpdate = true;\n                node.tightBoundingBox = this.getTightBoundingBox(data.tightBoundingBox);\n            };\n            const pointAttributes = node.octreeGeometry.pointAttributes;\n            const scale = node.octreeGeometry.scale;\n            const box = node.boundingBox;\n            const min = node.octreeGeometry.offset.clone().add(box.min);\n            const size = box.max.clone().sub(box.min);\n            const max = min.clone().add(size);\n            const numPoints = node.numPoints;\n            const offset = node.octreeGeometry.loader.offset;\n            const message = {\n                name: node.name,\n                buffer: buffer,\n                pointAttributes: pointAttributes,\n                scale: scale,\n                min: min,\n                max: max,\n                size: size,\n                offset: offset,\n                numPoints: numPoints\n            };\n            worker.postMessage(message, [message.buffer]);\n        }\n        catch (e) {\n            node.loaded = false;\n            node.loading = false;\n            node.octreeGeometry.numNodesLoading--;\n        }\n    }\n    parseHierarchy(node, buffer) {\n        const view = new DataView(buffer);\n        const bytesPerNode = 22;\n        const numNodes = buffer.byteLength / bytesPerNode;\n        const octree = node.octreeGeometry;\n        const nodes = new Array(numNodes);\n        nodes[0] = node;\n        let nodePos = 1;\n        for (let i = 0; i < numNodes; i++) {\n            const current = nodes[i];\n            const type = view.getUint8(i * bytesPerNode + 0);\n            const childMask = view.getUint8(i * bytesPerNode + 1);\n            const numPoints = view.getUint32(i * bytesPerNode + 2, true);\n            const byteOffset = view.getBigInt64(i * bytesPerNode + 6, true);\n            const byteSize = view.getBigInt64(i * bytesPerNode + 14, true);\n            if (current.nodeType === 2) {\n                // replace proxy with real node\n                current.byteOffset = byteOffset;\n                current.byteSize = byteSize;\n                current.numPoints = numPoints;\n            }\n            else if (type === 2) {\n                // load proxy\n                current.hierarchyByteOffset = byteOffset;\n                current.hierarchyByteSize = byteSize;\n                current.numPoints = numPoints;\n            }\n            else {\n                // load real node\n                current.byteOffset = byteOffset;\n                current.byteSize = byteSize;\n                current.numPoints = numPoints;\n            }\n            current.nodeType = type;\n            if (current.nodeType === 2) {\n                continue;\n            }\n            for (let childIndex = 0; childIndex < 8; childIndex++) {\n                const childExists = (1 << childIndex & childMask) !== 0;\n                if (!childExists) {\n                    continue;\n                }\n                const childName = current.name + childIndex;\n                const childAABB = octree_loader_createChildAABB(current.boundingBox, childIndex);\n                const child = new OctreeGeometryNode(childName, octree, childAABB);\n                child.name = childName;\n                child.spacing = current.spacing / 2;\n                child.level = current.level + 1;\n                current.children[childIndex] = child;\n                child.parent = current;\n                nodes[nodePos] = child;\n                nodePos++;\n            }\n        }\n    }\n    async loadHierarchy(node) {\n        const { hierarchyByteOffset, hierarchyByteSize } = node;\n        if (hierarchyByteOffset === undefined || hierarchyByteSize === undefined) {\n            throw new Error(`hierarchyByteOffset and hierarchyByteSize are undefined for node ${node.name}`);\n        }\n        const hierarchyUrl = await this.getUrl(this.hierarchyPath);\n        const first = hierarchyByteOffset;\n        const last = first + hierarchyByteSize - BigInt(1);\n        const headers = { Range: `bytes=${first}-${last}` };\n        const response = await fetch(hierarchyUrl, { headers });\n        const buffer = await response.arrayBuffer();\n        this.parseHierarchy(node, buffer);\n    }\n    getTightBoundingBox({ min, max }) {\n        const box = new external_three_.Box3(new external_three_.Vector3().fromArray(min), new external_three_.Vector3().fromArray(max));\n        box.max.sub(box.min);\n        box.min.set(0, 0, 0);\n        return box;\n    }\n}\nconst tmpVec3 = new external_three_.Vector3();\nfunction octree_loader_createChildAABB(aabb, index) {\n    const min = aabb.min.clone();\n    const max = aabb.max.clone();\n    const size = tmpVec3.subVectors(max, min);\n    if ((index & 0b0001) > 0) {\n        min.z += size.z / 2;\n    }\n    else {\n        max.z -= size.z / 2;\n    }\n    if ((index & 0b0010) > 0) {\n        min.y += size.y / 2;\n    }\n    else {\n        max.y -= size.y / 2;\n    }\n    if ((index & 0b0100) > 0) {\n        min.x += size.x / 2;\n    }\n    else {\n        max.x -= size.x / 2;\n    }\n    return new external_three_.Box3(min, max);\n}\nfunction appendBuffer(buffer1, buffer2) {\n    var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    tmp.set(new Uint8Array(buffer1), 0);\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return tmp.buffer;\n}\nconst typenameTypeattributeMap = {\n    double: PointAttributeTypes.DATA_TYPE_DOUBLE,\n    float: PointAttributeTypes.DATA_TYPE_FLOAT,\n    int8: PointAttributeTypes.DATA_TYPE_INT8,\n    uint8: PointAttributeTypes.DATA_TYPE_UINT8,\n    int16: PointAttributeTypes.DATA_TYPE_INT16,\n    uint16: PointAttributeTypes.DATA_TYPE_UINT16,\n    int32: PointAttributeTypes.DATA_TYPE_INT32,\n    uint32: PointAttributeTypes.DATA_TYPE_UINT32,\n    int64: PointAttributeTypes.DATA_TYPE_INT64,\n    uint64: PointAttributeTypes.DATA_TYPE_UINT64\n};\nclass OctreeLoader {\n    constructor(getUrl, url) {\n        this.workerPool = new worker_pool_WorkerPool();\n        this.basePath = '';\n        this.hierarchyPath = '';\n        this.octreePath = '';\n        this.gltfColorsPath = '';\n        this.gltfPositionsPath = '';\n        this.getUrl = getUrl;\n        this.basePath = extractBasePath(url);\n        this.hierarchyPath = buildUrl(this.basePath, HIERARCHY_FILE);\n        this.octreePath = buildUrl(this.basePath, OCTREE_FILE);\n        // We default to the known naming convention for glTF datasets\n        this.gltfColorsPath = buildUrl(this.basePath, GLTF_COLORS_FILE);\n        this.gltfPositionsPath = buildUrl(this.basePath, GLTF_POSITIONS_FILE);\n    }\n    static parseAttributes(jsonAttributes) {\n        const attributes = new point_attributes_PointAttributes();\n        const replacements = { rgb: 'rgba' };\n        for (const jsonAttribute of jsonAttributes) {\n            const { name, numElements, min, max, bufferView } = jsonAttribute;\n            const type = typenameTypeattributeMap[jsonAttribute.type];\n            const potreeAttributeName = replacements[name] ? replacements[name] : name;\n            const attribute = new PointAttribute(potreeAttributeName, type, numElements);\n            if (bufferView) {\n                attribute.uri = bufferView.uri;\n            }\n            if (numElements === 1 && min && max) {\n                attribute.range = [min[0], max[0]];\n            }\n            else {\n                attribute.range = [min, max];\n            }\n            if (name === 'gps-time') { // HACK: Guard against bad gpsTime range in metadata, see potree/potree#909\n                if (typeof attribute.range[0] === 'number' && attribute.range[0] === attribute.range[1]) {\n                    attribute.range[1] += 1;\n                }\n            }\n            attribute.initialRange = attribute.range;\n            attributes.add(attribute);\n        }\n        {\n            const hasNormals = attributes.attributes.find((a) => a.name === 'NormalX') !== undefined &&\n                attributes.attributes.find((a) => a.name === 'NormalY') !== undefined &&\n                attributes.attributes.find((a) => a.name === 'NormalZ') !== undefined;\n            if (hasNormals) {\n                const vector = {\n                    name: 'NORMAL',\n                    attributes: ['NormalX', 'NormalY', 'NormalZ']\n                };\n                attributes.addVector(vector);\n            }\n        }\n        return attributes;\n    }\n    async load(url, xhrRequest) {\n        const metadata = await this.fetchMetadata(url, xhrRequest);\n        const attributes = OctreeLoader.parseAttributes(metadata.attributes);\n        this.applyCustomBufferURI(metadata.encoding, attributes);\n        const loader = this.createLoader(url, metadata, attributes);\n        const boundingBox = this.createBoundingBox(metadata);\n        const offset = this.getOffset(boundingBox);\n        const octree = this.initializeOctree(loader, url, metadata, boundingBox, offset, attributes);\n        const root = this.initializeRootNode(octree, boundingBox, metadata);\n        octree.root = root;\n        loader.load(root);\n        return { geometry: octree };\n    }\n    async fetchMetadata(url, xhrRequest) {\n        const response = await xhrRequest(url);\n        return response.json();\n    }\n    applyCustomBufferURI(encoding, attributes) {\n        // Only datasets with GLTF encoding support custom buffer URIs -\n        // as opposed to datasets with DEFAULT encoding coming from PotreeConverter\n        if (encoding === 'GLTF') {\n            this.gltfPositionsPath = attributes.getAttribute(\"position\")?.uri ?? this.gltfPositionsPath;\n            this.gltfColorsPath = attributes.getAttribute(\"rgba\")?.uri ?? this.gltfColorsPath;\n        }\n    }\n    createLoader(url, metadata, attributes) {\n        const loader = new NodeLoader(this.getUrl, url, this.workerPool, metadata);\n        loader.attributes = attributes;\n        loader.scale = metadata.scale;\n        loader.offset = metadata.offset;\n        loader.hierarchyPath = this.hierarchyPath;\n        loader.octreePath = this.octreePath;\n        loader.gltfColorsPath = this.gltfColorsPath;\n        loader.gltfPositionsPath = this.gltfPositionsPath;\n        return loader;\n    }\n    createBoundingBox(metadata) {\n        const min = new external_three_.Vector3(...metadata.boundingBox.min);\n        const max = new external_three_.Vector3(...metadata.boundingBox.max);\n        const boundingBox = new external_three_.Box3(min, max);\n        return boundingBox;\n    }\n    getOffset(boundingBox) {\n        const offset = boundingBox.min.clone();\n        boundingBox.min.sub(offset);\n        boundingBox.max.sub(offset);\n        return offset;\n    }\n    initializeOctree(loader, url, metadata, boundingBox, offset, attributes) {\n        const octree = new OctreeGeometry(loader, boundingBox);\n        octree.url = url;\n        octree.spacing = metadata.spacing;\n        octree.scale = metadata.scale;\n        octree.projection = metadata.projection;\n        octree.boundingBox = boundingBox;\n        octree.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\n        octree.tightBoundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\n        octree.tightBoundingBox = this.getTightBoundingBox(metadata);\n        octree.offset = offset;\n        octree.pointAttributes = attributes;\n        return octree;\n    }\n    initializeRootNode(octree, boundingBox, metadata) {\n        const root = new OctreeGeometryNode('r', octree, boundingBox);\n        root.level = 0;\n        root.nodeType = 2;\n        root.hierarchyByteOffset = BigInt(0);\n        root.hierarchyByteSize = BigInt(metadata.hierarchy.firstChunkSize);\n        root.spacing = octree.spacing;\n        root.byteOffset = BigInt(0);\n        return root;\n    }\n    getTightBoundingBox(metadata) {\n        const positionAttribute = metadata.attributes.find((attr) => attr.name === 'position');\n        if (!positionAttribute || !positionAttribute.min || !positionAttribute.max) {\n            console.warn('Position attribute (min, max) not found. Falling back to boundingBox for tightBoundingBox');\n            return new external_three_.Box3(new external_three_.Vector3(...metadata.boundingBox.min), new external_three_.Vector3(...metadata.boundingBox.max));\n        }\n        const offset = metadata.boundingBox.min;\n        const tightBoundingBox = new external_three_.Box3(new external_three_.Vector3(positionAttribute.min[0] - offset[0], positionAttribute.min[1] - offset[1], positionAttribute.min[2] - offset[2]), new external_three_.Vector3(positionAttribute.max[0] - offset[0], positionAttribute.max[1] - offset[1], positionAttribute.max[2] - offset[2]));\n        return tightBoundingBox;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading2/load-octree.ts\n\nasync function loadOctree(url, getUrl, xhrRequest) {\n    const trueUrl = await getUrl(url);\n    const loader = new OctreeLoader(getUrl, url);\n    const { geometry } = await loader.load(trueUrl, xhrRequest);\n    return geometry;\n}\n\n;// CONCATENATED MODULE: ./src/type-predicates.ts\nfunction isGeometryNode(node) {\n    return node !== undefined && node !== null && node.isGeometryNode;\n}\nfunction isTreeNode(node) {\n    return node !== undefined && node !== null && node.isTreeNode;\n}\n\n;// CONCATENATED MODULE: ./src/utils/binary-heap.js\n/**\n * from: http://eloquentjavascript.net/1st_edition/appendix2.html\n *\n */\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\nBinaryHeap.prototype = {\n  push: function push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  },\n  pop: function pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  },\n  remove: function remove(node) {\n    var length = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (var i = 0; i < length; i++) {\n      if (this.content[i] != node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      var end = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i == length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  },\n  size: function size() {\n    return this.content.length;\n  },\n  bubbleUp: function bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n],\n      score = this.scoreFunction(element);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      var parentN = Math.floor((n + 1) / 2) - 1,\n        parent = this.content[parentN];\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      if (score >= this.scoreFunction(parent)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  },\n  sinkDown: function sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N],\n          child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N;\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap == null ? elemScore : child1Score)) swap = child2N;\n      }\n\n      // No need to swap further, we are done.\n      if (swap == null) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n};\n;// CONCATENATED MODULE: ./src/utils/box3-helper.ts\n\n/**\n *\n * code adapted from three.js BoxHelper.js\n * https://github.com/mrdoob/three.js/blob/dev/src/helpers/BoxHelper.js\n *\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author mschuetz / http://potree.org\n */\nclass Box3Helper extends external_three_.LineSegments {\n    constructor(box, color = new external_three_.Color(0xffff00)) {\n        // prettier-ignore\n        const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n        // prettier-ignore\n        const positions = new Float32Array([\n            box.min.x, box.min.y, box.min.z,\n            box.max.x, box.min.y, box.min.z,\n            box.max.x, box.min.y, box.max.z,\n            box.min.x, box.min.y, box.max.z,\n            box.min.x, box.max.y, box.min.z,\n            box.max.x, box.max.y, box.min.z,\n            box.max.x, box.max.y, box.max.z,\n            box.min.x, box.max.y, box.max.z\n        ]);\n        const geometry = new external_three_.BufferGeometry();\n        geometry.setIndex(new external_three_.BufferAttribute(indices, 1));\n        geometry.setAttribute('position', new external_three_.BufferAttribute(positions, 3));\n        const material = new external_three_.LineBasicMaterial({ color: color });\n        super(geometry, material);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/lru.ts\nclass LRUItem {\n    constructor(node) {\n        this.node = node;\n        this.next = null;\n        this.previous = null;\n    }\n}\n/**\n * A doubly-linked-list of the least recently used elements.\n */\nclass LRU {\n    constructor(pointBudget = 1000000) {\n        this.pointBudget = pointBudget;\n        // the least recently used item\n        this.first = null;\n        // the most recently used item\n        this.last = null;\n        this.numPoints = 0;\n        this.items = new Map();\n    }\n    get size() {\n        return this.items.size;\n    }\n    has(node) {\n        return this.items.has(node.id);\n    }\n    /**\n     * Makes the specified the most recently used item. if the list does not contain node, it will\n     * be added.\n     */\n    touch(node) {\n        if (!node.loaded) {\n            return;\n        }\n        const item = this.items.get(node.id);\n        if (item) {\n            this.touchExisting(item);\n        }\n        else {\n            this.addNew(node);\n        }\n    }\n    addNew(node) {\n        const item = new LRUItem(node);\n        item.previous = this.last;\n        this.last = item;\n        if (item.previous) {\n            item.previous.next = item;\n        }\n        if (!this.first) {\n            this.first = item;\n        }\n        this.items.set(node.id, item);\n        this.numPoints += node.numPoints;\n    }\n    touchExisting(item) {\n        if (!item.previous) {\n            // handle touch on first element\n            if (item.next) {\n                this.first = item.next;\n                this.first.previous = null;\n                item.previous = this.last;\n                item.next = null;\n                this.last = item;\n                if (item.previous) {\n                    item.previous.next = item;\n                }\n            }\n        }\n        else if (!item.next) {\n            // handle touch on last element\n        }\n        else {\n            // handle touch on any other element\n            item.previous.next = item.next;\n            item.next.previous = item.previous;\n            item.previous = this.last;\n            item.next = null;\n            this.last = item;\n            if (item.previous) {\n                item.previous.next = item;\n            }\n        }\n    }\n    remove(node) {\n        const item = this.items.get(node.id);\n        if (!item) {\n            return;\n        }\n        if (this.items.size === 1) {\n            this.first = null;\n            this.last = null;\n        }\n        else {\n            if (!item.previous) {\n                this.first = item.next;\n                this.first.previous = null;\n            }\n            if (!item.next) {\n                this.last = item.previous;\n                this.last.next = null;\n            }\n            if (item.previous && item.next) {\n                item.previous.next = item.next;\n                item.next.previous = item.previous;\n            }\n        }\n        this.items.delete(node.id);\n        this.numPoints -= node.numPoints;\n    }\n    getLRUItem() {\n        return this.first ? this.first.node : undefined;\n    }\n    freeMemory() {\n        if (this.items.size <= 1) {\n            return;\n        }\n        while (this.numPoints > this.pointBudget * 2) {\n            const node = this.getLRUItem();\n            if (node) {\n                this.disposeSubtree(node);\n            }\n        }\n    }\n    disposeSubtree(node) {\n        // Collect all the nodes which are to be disposed and removed.\n        const nodesToDispose = [node];\n        node.traverse(n => {\n            if (n.loaded) {\n                nodesToDispose.push(n);\n            }\n        });\n        // Dispose of all the nodes in one go.\n        for (const n of nodesToDispose) {\n            n.dispose();\n            this.remove(n);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/potree.ts\n\n\n\n\n\n\n\n\n\n\n\n\nclass QueueItem {\n    constructor(pointCloudIndex, weight, node, parent) {\n        this.pointCloudIndex = pointCloudIndex;\n        this.weight = weight;\n        this.node = node;\n        this.parent = parent;\n    }\n}\nconst GEOMETRY_LOADERS = {\n    v1: loadPOC,\n    v2: loadOctree\n};\nclass Potree {\n    constructor(version = \"v1\") {\n        this._pointBudget = DEFAULT_POINT_BUDGET;\n        this._rendererSize = new external_three_.Vector2();\n        this.maxNumNodesLoading = MAX_NUM_NODES_LOADING;\n        this.features = FEATURES;\n        this.lru = new LRU(this._pointBudget);\n        this.updateVisibilityStructures = (() => {\n            const frustumMatrix = new external_three_.Matrix4();\n            const inverseWorldMatrix = new external_three_.Matrix4();\n            const cameraMatrix = new external_three_.Matrix4();\n            return (pointClouds, camera) => {\n                const frustums = [];\n                const cameraPositions = [];\n                const priorityQueue = new BinaryHeap(x => 1 / x.weight);\n                for (let i = 0; i < pointClouds.length; i++) {\n                    const pointCloud = pointClouds[i];\n                    if (!pointCloud.initialized()) {\n                        continue;\n                    }\n                    pointCloud.numVisiblePoints = 0;\n                    pointCloud.visibleNodes = [];\n                    pointCloud.visibleGeometry = [];\n                    camera.updateMatrixWorld(false);\n                    // Furstum in object space.\n                    const inverseViewMatrix = camera.matrixWorldInverse;\n                    const worldMatrix = pointCloud.matrixWorld;\n                    frustumMatrix\n                        .identity()\n                        .multiply(camera.projectionMatrix)\n                        .multiply(inverseViewMatrix)\n                        .multiply(worldMatrix);\n                    frustums.push(new external_three_.Frustum().setFromProjectionMatrix(frustumMatrix));\n                    // Camera position in object space\n                    inverseWorldMatrix.copy(worldMatrix).invert();\n                    cameraMatrix\n                        .identity()\n                        .multiply(inverseWorldMatrix)\n                        .multiply(camera.matrixWorld);\n                    cameraPositions.push(new external_three_.Vector3().setFromMatrixPosition(cameraMatrix));\n                    if (pointCloud.visible && pointCloud.root !== null) {\n                        const weight = Number.MAX_VALUE;\n                        priorityQueue.push(new QueueItem(i, weight, pointCloud.root));\n                    }\n                    // Hide any previously visible nodes. We will later show only the needed ones.\n                    if (isTreeNode(pointCloud.root)) {\n                        pointCloud.hideDescendants(pointCloud.root.sceneNode);\n                    }\n                    for (const boundingBoxNode of pointCloud.boundingBoxNodes) {\n                        boundingBoxNode.visible = false;\n                    }\n                }\n                return { frustums, cameraPositions, priorityQueue };\n            };\n        })();\n        this.loadGeometry = GEOMETRY_LOADERS[version];\n    }\n    loadPointCloud(url, getUrl, xhrRequest = (input, init) => fetch(input, init)) {\n        return this.loadGeometry(url, getUrl, xhrRequest).then(geometry => new PointCloudOctree(this, geometry));\n    }\n    updatePointClouds(pointClouds, camera, renderer) {\n        const result = this.updateVisibility(pointClouds, camera, renderer);\n        for (let i = 0; i < pointClouds.length; i++) {\n            const pointCloud = pointClouds[i];\n            if (pointCloud.disposed) {\n                continue;\n            }\n            pointCloud.material.updateMaterial(pointCloud, pointCloud.visibleNodes, camera, renderer);\n            pointCloud.updateVisibleBounds();\n            pointCloud.updateBoundingBoxes();\n        }\n        this.lru.freeMemory();\n        return result;\n    }\n    static pick(pointClouds, renderer, camera, ray, params = {}) {\n        Potree.picker = Potree.picker || new PointCloudOctreePicker();\n        return Potree.picker.pick(renderer, camera, ray, pointClouds, params);\n    }\n    get pointBudget() {\n        return this._pointBudget;\n    }\n    set pointBudget(value) {\n        if (value !== this._pointBudget) {\n            this._pointBudget = value;\n            this.lru.pointBudget = value;\n            this.lru.freeMemory();\n        }\n    }\n    static set maxLoaderWorkers(value) {\n        BinaryLoader.WORKER_POOL.maxWorkers = value;\n    }\n    static get maxLoaderWorkers() {\n        return BinaryLoader.WORKER_POOL.maxWorkers;\n    }\n    updateVisibility(pointClouds, camera, renderer) {\n        let numVisiblePoints = 0;\n        const visibleNodes = [];\n        const unloadedGeometry = [];\n        // calculate object space frustum and cam pos and setup priority queue\n        const { frustums, cameraPositions, priorityQueue } = this.updateVisibilityStructures(pointClouds, camera);\n        let loadedToGPUThisFrame = 0;\n        let exceededMaxLoadsToGPU = false;\n        let nodeLoadFailed = false;\n        let queueItem;\n        while ((queueItem = priorityQueue.pop()) !== undefined) {\n            let node = queueItem.node;\n            // If we will end up with too many points, we stop right away.\n            if (numVisiblePoints + node.numPoints > this.pointBudget) {\n                break;\n            }\n            const pointCloudIndex = queueItem.pointCloudIndex;\n            const pointCloud = pointClouds[pointCloudIndex];\n            const maxLevel = pointCloud.maxLevel !== undefined ? pointCloud.maxLevel : Infinity;\n            if (node.level > maxLevel ||\n                !frustums[pointCloudIndex].intersectsBox(node.boundingBox) ||\n                this.shouldClip(pointCloud, node.boundingBox)) {\n                continue;\n            }\n            numVisiblePoints += node.numPoints;\n            pointCloud.numVisiblePoints += node.numPoints;\n            const parentNode = queueItem.parent;\n            if (isGeometryNode(node) && (!parentNode || isTreeNode(parentNode))) {\n                if (node.loaded && loadedToGPUThisFrame < MAX_LOADS_TO_GPU) {\n                    node = pointCloud.toTreeNode(node, parentNode);\n                    loadedToGPUThisFrame++;\n                }\n                else if (!node.failed) {\n                    if (node.loaded && loadedToGPUThisFrame >= MAX_LOADS_TO_GPU) {\n                        exceededMaxLoadsToGPU = true;\n                    }\n                    unloadedGeometry.push(node);\n                    pointCloud.visibleGeometry.push(node);\n                }\n                else {\n                    nodeLoadFailed = true;\n                    continue;\n                }\n            }\n            if (isTreeNode(node)) {\n                this.updateTreeNodeVisibility(pointCloud, node, visibleNodes);\n                pointCloud.visibleGeometry.push(node.geometryNode);\n            }\n            const halfHeight = 0.5 * renderer.getSize(this._rendererSize).height * renderer.getPixelRatio();\n            this.updateChildVisibility(queueItem, priorityQueue, pointCloud, node, cameraPositions[pointCloudIndex], camera, halfHeight);\n        } // end priority queue loop\n        const numNodesToLoad = Math.min(this.maxNumNodesLoading, unloadedGeometry.length);\n        const nodeLoadPromises = [];\n        for (let i = 0; i < numNodesToLoad; i++) {\n            nodeLoadPromises.push(unloadedGeometry[i].load());\n        }\n        return {\n            visibleNodes: visibleNodes,\n            numVisiblePoints: numVisiblePoints,\n            exceededMaxLoadsToGPU: exceededMaxLoadsToGPU,\n            nodeLoadFailed: nodeLoadFailed,\n            nodeLoadPromises: nodeLoadPromises,\n        };\n    }\n    updateTreeNodeVisibility(pointCloud, node, visibleNodes) {\n        this.lru.touch(node.geometryNode);\n        const sceneNode = node.sceneNode;\n        sceneNode.visible = true;\n        sceneNode.material = pointCloud.material;\n        sceneNode.updateMatrix();\n        sceneNode.matrixWorld.multiplyMatrices(pointCloud.matrixWorld, sceneNode.matrix);\n        visibleNodes.push(node);\n        pointCloud.visibleNodes.push(node);\n        this.updateBoundingBoxVisibility(pointCloud, node);\n    }\n    updateChildVisibility(queueItem, priorityQueue, pointCloud, node, cameraPosition, camera, halfHeight) {\n        const children = node.children;\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            if (child === null) {\n                continue;\n            }\n            const sphere = child.boundingSphere;\n            const distance = sphere.center.distanceTo(cameraPosition);\n            const radius = sphere.radius;\n            let projectionFactor = 0.0;\n            if (camera.type === PERSPECTIVE_CAMERA) {\n                const perspective = camera;\n                const fov = (perspective.fov * Math.PI) / 180.0;\n                const slope = Math.tan(fov / 2.0);\n                projectionFactor = halfHeight / (slope * distance);\n            }\n            else {\n                const orthographic = camera;\n                projectionFactor = (2 * halfHeight) / (orthographic.top - orthographic.bottom);\n            }\n            const screenPixelRadius = radius * projectionFactor;\n            // Don't add the node if it'll be too small on the screen.\n            if (screenPixelRadius < pointCloud.minNodePixelSize) {\n                continue;\n            }\n            // Nodes which are larger will have priority in loading/displaying.\n            const weight = distance < radius ? Number.MAX_VALUE : screenPixelRadius + 1 / distance;\n            priorityQueue.push(new QueueItem(queueItem.pointCloudIndex, weight, child, node));\n        }\n    }\n    updateBoundingBoxVisibility(pointCloud, node) {\n        if (pointCloud.showBoundingBox && !node.boundingBoxNode) {\n            const boxHelper = new Box3Helper(node.boundingBox);\n            boxHelper.matrixAutoUpdate = false;\n            pointCloud.boundingBoxNodes.push(boxHelper);\n            node.boundingBoxNode = boxHelper;\n            node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\n        }\n        else if (pointCloud.showBoundingBox && node.boundingBoxNode) {\n            node.boundingBoxNode.visible = true;\n            node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\n        }\n        else if (!pointCloud.showBoundingBox && node.boundingBoxNode) {\n            node.boundingBoxNode.visible = false;\n        }\n    }\n    shouldClip(pointCloud, boundingBox) {\n        const material = pointCloud.material;\n        if (material.numClipBoxes === 0 || material.clipMode !== ClipMode.CLIP_OUTSIDE) {\n            return false;\n        }\n        const box2 = boundingBox.clone();\n        pointCloud.updateMatrixWorld(true);\n        box2.applyMatrix4(pointCloud.matrixWorld);\n        const clipBoxes = material.clipBoxes;\n        for (let i = 0; i < clipBoxes.length; i++) {\n            const clipMatrixWorld = clipBoxes[i].matrix;\n            const clipBoxWorld = new external_three_.Box3(new external_three_.Vector3(-0.5, -0.5, -0.5), new external_three_.Vector3(0.5, 0.5, 0.5)).applyMatrix4(clipMatrixWorld);\n            if (box2.intersectsBox(clipBoxWorld)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/loading2/index.ts\n\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///238\n")},300:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(512);\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()(\"(()=>{\\\"use strict\\\";var __webpack_modules__={256:()=>{eval(\\\"\\\\n;// CONCATENATED MODULE: ./src/loading2/point-attributes.ts\\\\n/**\\\\n * Some types of possible point attribute data formats\\\\n *\\\\n * @class\\\\n */\\\\nconst PointAttributeTypes = {\\\\n    DATA_TYPE_DOUBLE: { ordinal: 0, name: 'double', size: 8 },\\\\n    DATA_TYPE_FLOAT: { ordinal: 1, name: 'float', size: 4 },\\\\n    DATA_TYPE_INT8: { ordinal: 2, name: 'int8', size: 1 },\\\\n    DATA_TYPE_UINT8: { ordinal: 3, name: 'uint8', size: 1 },\\\\n    DATA_TYPE_INT16: { ordinal: 4, name: 'int16', size: 2 },\\\\n    DATA_TYPE_UINT16: { ordinal: 5, name: 'uint16', size: 2 },\\\\n    DATA_TYPE_INT32: { ordinal: 6, name: 'int32', size: 4 },\\\\n    DATA_TYPE_UINT32: { ordinal: 7, name: 'uint32', size: 4 },\\\\n    DATA_TYPE_INT64: { ordinal: 8, name: 'int64', size: 8 },\\\\n    DATA_TYPE_UINT64: { ordinal: 9, name: 'uint64', size: 8 }\\\\n};\\\\nlet i = 0;\\\\nfor (const obj in PointAttributeTypes) {\\\\n    PointAttributeTypes[i] = PointAttributeTypes[obj];\\\\n    i++;\\\\n}\\\\n\\\\nclass PointAttribute {\\\\n    constructor(name, type, numElements, range = [Infinity, -Infinity], uri = undefined) {\\\\n        this.name = name;\\\\n        this.type = type;\\\\n        this.numElements = numElements;\\\\n        this.range = range;\\\\n        this.uri = uri;\\\\n        this.byteSize = this.numElements * this.type.size;\\\\n        this.description = '';\\\\n    }\\\\n}\\\\n\\\\nconst POINT_ATTRIBUTES = {\\\\n    POSITION_CARTESIAN: new PointAttribute('POSITION_CARTESIAN', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    RGBA_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\n    COLOR_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\n    RGB_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 3),\\\\n    NORMAL_FLOATS: new PointAttribute('NORMAL_FLOATS', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    INTENSITY: new PointAttribute('INTENSITY', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\n    CLASSIFICATION: new PointAttribute('CLASSIFICATION', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    NORMAL_SPHEREMAPPED: new PointAttribute('NORMAL_SPHEREMAPPED', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\n    NORMAL_OCT16: new PointAttribute('NORMAL_OCT16', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\n    NORMAL: new PointAttribute('NORMAL', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    RETURN_NUMBER: new PointAttribute('RETURN_NUMBER', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    NUMBER_OF_RETURNS: new PointAttribute('NUMBER_OF_RETURNS', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    SOURCE_ID: new PointAttribute('SOURCE_ID', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\n    INDICES: new PointAttribute('INDICES', PointAttributeTypes.DATA_TYPE_UINT32, 1),\\\\n    SPACING: new PointAttribute('SPACING', PointAttributeTypes.DATA_TYPE_FLOAT, 1),\\\\n    GPS_TIME: new PointAttribute('GPS_TIME', PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\\\\n};\\\\nclass PointAttributes {\\\\n    constructor(pointAttributes, attributes = [], byteSize = 0, size = 0, vectors = []) {\\\\n        this.attributes = attributes;\\\\n        this.byteSize = byteSize;\\\\n        this.size = size;\\\\n        this.vectors = vectors;\\\\n        if (pointAttributes != null) {\\\\n            for (let i = 0; i < pointAttributes.length; i++) {\\\\n                const pointAttributeName = pointAttributes[i];\\\\n                const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\\\\n                this.attributes.push(pointAttribute);\\\\n                this.byteSize += pointAttribute.byteSize;\\\\n                this.size++;\\\\n            }\\\\n        }\\\\n    }\\\\n    add(pointAttribute) {\\\\n        this.attributes.push(pointAttribute);\\\\n        this.byteSize += pointAttribute.byteSize;\\\\n        this.size++;\\\\n    }\\\\n    addVector(vector) {\\\\n        this.vectors.push(vector);\\\\n    }\\\\n    hasNormals() {\\\\n        for (const name in this.attributes) {\\\\n            const pointAttribute = this.attributes[name];\\\\n            if (pointAttribute === POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_FLOATS ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_OCT16) {\\\\n                return true;\\\\n            }\\\\n        }\\\\n        return false;\\\\n    }\\\\n    getAttribute(attributeName) {\\\\n        return this.attributes.find(attr => attr.name === attributeName);\\\\n    }\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/loading2/decoder.worker.js\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\\\"); }\\\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\\\\\\"undefined\\\\\\\" != typeof Symbol && r[Symbol.iterator] || r[\\\\\\\"@@iterator\\\\\\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \\\\\\\"undefined\\\\\\\" && o[Symbol.iterator] || o[\\\\\\\"@@iterator\\\\\\\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \\\\\\\"number\\\\\\\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\\\\\\\"Invalid attempt to iterate non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\\\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\\\"string\\\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\\\"Object\\\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\\\"Map\\\\\\\" || n === \\\\\\\"Set\\\\\\\") return Array.from(o); if (n === \\\\\\\"Arguments\\\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\\\\n\\\\nvar typedArrayMapping = {\\\\n  'int8': Int8Array,\\\\n  'int16': Int16Array,\\\\n  'int32': Int32Array,\\\\n  'int64': Float64Array,\\\\n  'uint8': Uint8Array,\\\\n  'uint16': Uint16Array,\\\\n  'uint32': Uint32Array,\\\\n  'uint64': Float64Array,\\\\n  'float': Float32Array,\\\\n  'double': Float64Array\\\\n};\\\\nonmessage = function onmessage(event) {\\\\n  var _event$data = event.data,\\\\n    buffer = _event$data.buffer,\\\\n    pointAttributes = _event$data.pointAttributes,\\\\n    scale = _event$data.scale,\\\\n    name = _event$data.name,\\\\n    min = _event$data.min,\\\\n    max = _event$data.max,\\\\n    size = _event$data.size,\\\\n    offset = _event$data.offset,\\\\n    numPoints = _event$data.numPoints;\\\\n  var view = new DataView(buffer);\\\\n  var attributeBuffers = {};\\\\n  var attributeOffset = 0;\\\\n  var bytesPerPoint = 0;\\\\n  var _iterator = _createForOfIteratorHelper(pointAttributes.attributes),\\\\n    _step;\\\\n  try {\\\\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\\\\n      var pointAttribute = _step.value;\\\\n      bytesPerPoint += pointAttribute.byteSize;\\\\n    }\\\\n  } catch (err) {\\\\n    _iterator.e(err);\\\\n  } finally {\\\\n    _iterator.f();\\\\n  }\\\\n  var gridSize = 32;\\\\n  var grid = new Uint32Array(Math.pow(gridSize, 3));\\\\n  var toIndex = function toIndex(x, y, z) {\\\\n    // min is already subtracted\\\\n    var dx = gridSize * x / size.x;\\\\n    var dy = gridSize * y / size.y;\\\\n    var dz = gridSize * z / size.z;\\\\n    var ix = Math.min(parseInt(dx), gridSize - 1);\\\\n    var iy = Math.min(parseInt(dy), gridSize - 1);\\\\n    var iz = Math.min(parseInt(dz), gridSize - 1);\\\\n    var index = ix + iy * gridSize + iz * gridSize * gridSize;\\\\n    return index;\\\\n  };\\\\n  var numOccupiedCells = 0;\\\\n  var tightBoxMin = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];\\\\n  var tightBoxMax = [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY];\\\\n  var _iterator2 = _createForOfIteratorHelper(pointAttributes.attributes),\\\\n    _step2;\\\\n  try {\\\\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\\\\n      var _pointAttribute = _step2.value;\\\\n      if (['POSITION_CARTESIAN', 'position'].includes(_pointAttribute.name)) {\\\\n        var _buff = new ArrayBuffer(numPoints * 4 * 3);\\\\n        var positions = new Float32Array(_buff);\\\\n        for (var _j = 0; _j < numPoints; _j++) {\\\\n          var pointOffset = _j * bytesPerPoint;\\\\n          var x = view.getInt32(pointOffset + attributeOffset + 0, true) * scale[0] + offset[0] - min.x;\\\\n          var y = view.getInt32(pointOffset + attributeOffset + 4, true) * scale[1] + offset[1] - min.y;\\\\n          var z = view.getInt32(pointOffset + attributeOffset + 8, true) * scale[2] + offset[2] - min.z;\\\\n          tightBoxMin[0] = Math.min(tightBoxMin[0], x);\\\\n          tightBoxMin[1] = Math.min(tightBoxMin[1], y);\\\\n          tightBoxMin[2] = Math.min(tightBoxMin[2], z);\\\\n          tightBoxMax[0] = Math.max(tightBoxMax[0], x);\\\\n          tightBoxMax[1] = Math.max(tightBoxMax[1], y);\\\\n          tightBoxMax[2] = Math.max(tightBoxMax[2], z);\\\\n          var index = toIndex(x, y, z);\\\\n          var count = grid[index]++;\\\\n          if (count === 0) {\\\\n            numOccupiedCells++;\\\\n          }\\\\n          positions[3 * _j + 0] = x;\\\\n          positions[3 * _j + 1] = y;\\\\n          positions[3 * _j + 2] = z;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff,\\\\n          attribute: _pointAttribute\\\\n        };\\\\n      } else if (['RGBA', 'rgba'].includes(_pointAttribute.name)) {\\\\n        var _buff2 = new ArrayBuffer(numPoints * 4);\\\\n        var colors = new Uint8Array(_buff2);\\\\n        for (var _j2 = 0; _j2 < numPoints; _j2++) {\\\\n          var _pointOffset = _j2 * bytesPerPoint;\\\\n          var r = view.getUint16(_pointOffset + attributeOffset + 0, true);\\\\n          var g = view.getUint16(_pointOffset + attributeOffset + 2, true);\\\\n          var b = view.getUint16(_pointOffset + attributeOffset + 4, true);\\\\n          colors[4 * _j2 + 0] = r > 255 ? r / 256 : r;\\\\n          colors[4 * _j2 + 1] = g > 255 ? g / 256 : g;\\\\n          colors[4 * _j2 + 2] = b > 255 ? b / 256 : b;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff2,\\\\n          attribute: _pointAttribute\\\\n        };\\\\n      } else {\\\\n        var _buff3 = new ArrayBuffer(numPoints * 4);\\\\n        var _f = new Float32Array(_buff3);\\\\n        var TypedArray = typedArrayMapping[_pointAttribute.type.name];\\\\n        var preciseBuffer = new TypedArray(numPoints);\\\\n        var _offset2 = 0,\\\\n          _scale2 = 1;\\\\n        var getterMap = {\\\\n          'int8': view.getInt8,\\\\n          'int16': view.getInt16,\\\\n          'int32': view.getInt32,\\\\n          // 'int64':  view.getInt64,\\\\n          'uint8': view.getUint8,\\\\n          'uint16': view.getUint16,\\\\n          'uint32': view.getUint32,\\\\n          // 'uint64': view.getUint64,\\\\n          'float': view.getFloat32,\\\\n          'double': view.getFloat64\\\\n        };\\\\n        var _getter = getterMap[_pointAttribute.type.name].bind(view);\\\\n\\\\n        // compute offset and scale to pack larger types into 32 bit floats\\\\n        if (_pointAttribute.type.size > 4) {\\\\n          var _pointAttribute$range = _slicedToArray(_pointAttribute.range, 2),\\\\n            amin = _pointAttribute$range[0],\\\\n            amax = _pointAttribute$range[1];\\\\n          _offset2 = amin;\\\\n          _scale2 = 1 / (amax - amin);\\\\n        }\\\\n        for (var _j3 = 0; _j3 < numPoints; _j3++) {\\\\n          var _pointOffset2 = _j3 * bytesPerPoint;\\\\n          var _value = _getter(_pointOffset2 + attributeOffset, true);\\\\n          _f[_j3] = (_value - _offset2) * _scale2;\\\\n          preciseBuffer[_j3] = _value;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff3,\\\\n          preciseBuffer: preciseBuffer,\\\\n          attribute: _pointAttribute,\\\\n          offset: _offset2,\\\\n          scale: _scale2\\\\n        };\\\\n      }\\\\n      attributeOffset += _pointAttribute.byteSize;\\\\n    }\\\\n  } catch (err) {\\\\n    _iterator2.e(err);\\\\n  } finally {\\\\n    _iterator2.f();\\\\n  }\\\\n  var occupancy = parseInt(numPoints / numOccupiedCells);\\\\n  {\\\\n    // add indices\\\\n    var buff = new ArrayBuffer(numPoints * 4);\\\\n    var indices = new Uint32Array(buff);\\\\n    for (var i = 0; i < numPoints; i++) {\\\\n      indices[i] = i;\\\\n    }\\\\n    attributeBuffers['INDICES'] = {\\\\n      buffer: buff,\\\\n      attribute: PointAttribute.INDICES\\\\n    };\\\\n  }\\\\n  {\\\\n    // handle attribute vectors\\\\n    var vectors = pointAttributes.vectors;\\\\n    var _iterator3 = _createForOfIteratorHelper(vectors),\\\\n      _step3;\\\\n    try {\\\\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\\\\n        var vector = _step3.value;\\\\n        var _name = vector.name,\\\\n          attributes = vector.attributes;\\\\n        var numVectorElements = attributes.length;\\\\n        var _buffer = new ArrayBuffer(numVectorElements * numPoints * 4);\\\\n        var f32 = new Float32Array(_buffer);\\\\n        var iElement = 0;\\\\n        var _iterator4 = _createForOfIteratorHelper(attributes),\\\\n          _step4;\\\\n        try {\\\\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\\\\n            var sourceName = _step4.value;\\\\n            var sourceBuffer = attributeBuffers[sourceName];\\\\n            var _offset = sourceBuffer.offset,\\\\n              _scale = sourceBuffer.scale;\\\\n            var _view = new DataView(sourceBuffer.buffer);\\\\n            var getter = _view.getFloat32.bind(_view);\\\\n            for (var j = 0; j < numPoints; j++) {\\\\n              var value = getter(j * 4, true);\\\\n              f32[j * numVectorElements + iElement] = value / _scale + _offset;\\\\n            }\\\\n            iElement++;\\\\n          }\\\\n        } catch (err) {\\\\n          _iterator4.e(err);\\\\n        } finally {\\\\n          _iterator4.f();\\\\n        }\\\\n        var vecAttribute = new PointAttribute(_name, PointAttributeTypes.DATA_TYPE_FLOAT, 3);\\\\n        attributeBuffers[_name] = {\\\\n          buffer: _buffer,\\\\n          attribute: vecAttribute\\\\n        };\\\\n      }\\\\n    } catch (err) {\\\\n      _iterator3.e(err);\\\\n    } finally {\\\\n      _iterator3.f();\\\\n    }\\\\n  }\\\\n  var message = {\\\\n    buffer: buffer,\\\\n    attributeBuffers: attributeBuffers,\\\\n    density: occupancy,\\\\n    tightBoundingBox: {\\\\n      min: tightBoxMin,\\\\n      max: tightBoxMax\\\\n    }\\\\n  };\\\\n  var transferables = [];\\\\n  for (var property in message.attributeBuffers) {\\\\n    transferables.push(message.attributeBuffers[property].buffer);\\\\n  }\\\\n  transferables.push(buffer);\\\\n  postMessage(message, transferables);\\\\n};//# sourceURL=[module]\\\\n\\\")}},__webpack_exports__={};__webpack_modules__[256]()})();\", \"Worker\", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///300\n")},218:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(512);\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()(\"(()=>{\\\"use strict\\\";var __webpack_modules__={374:()=>{eval(\\\"\\\\n;// CONCATENATED MODULE: ./src/loading2/point-attributes.ts\\\\n/**\\\\n * Some types of possible point attribute data formats\\\\n *\\\\n * @class\\\\n */\\\\nconst PointAttributeTypes = {\\\\n    DATA_TYPE_DOUBLE: { ordinal: 0, name: 'double', size: 8 },\\\\n    DATA_TYPE_FLOAT: { ordinal: 1, name: 'float', size: 4 },\\\\n    DATA_TYPE_INT8: { ordinal: 2, name: 'int8', size: 1 },\\\\n    DATA_TYPE_UINT8: { ordinal: 3, name: 'uint8', size: 1 },\\\\n    DATA_TYPE_INT16: { ordinal: 4, name: 'int16', size: 2 },\\\\n    DATA_TYPE_UINT16: { ordinal: 5, name: 'uint16', size: 2 },\\\\n    DATA_TYPE_INT32: { ordinal: 6, name: 'int32', size: 4 },\\\\n    DATA_TYPE_UINT32: { ordinal: 7, name: 'uint32', size: 4 },\\\\n    DATA_TYPE_INT64: { ordinal: 8, name: 'int64', size: 8 },\\\\n    DATA_TYPE_UINT64: { ordinal: 9, name: 'uint64', size: 8 }\\\\n};\\\\nlet i = 0;\\\\nfor (const obj in PointAttributeTypes) {\\\\n    PointAttributeTypes[i] = PointAttributeTypes[obj];\\\\n    i++;\\\\n}\\\\n\\\\nclass PointAttribute {\\\\n    constructor(name, type, numElements, range = [Infinity, -Infinity], uri = undefined) {\\\\n        this.name = name;\\\\n        this.type = type;\\\\n        this.numElements = numElements;\\\\n        this.range = range;\\\\n        this.uri = uri;\\\\n        this.byteSize = this.numElements * this.type.size;\\\\n        this.description = '';\\\\n    }\\\\n}\\\\n\\\\nconst POINT_ATTRIBUTES = {\\\\n    POSITION_CARTESIAN: new PointAttribute('POSITION_CARTESIAN', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    RGBA_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\n    COLOR_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\n    RGB_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 3),\\\\n    NORMAL_FLOATS: new PointAttribute('NORMAL_FLOATS', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    INTENSITY: new PointAttribute('INTENSITY', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\n    CLASSIFICATION: new PointAttribute('CLASSIFICATION', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    NORMAL_SPHEREMAPPED: new PointAttribute('NORMAL_SPHEREMAPPED', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\n    NORMAL_OCT16: new PointAttribute('NORMAL_OCT16', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\n    NORMAL: new PointAttribute('NORMAL', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\n    RETURN_NUMBER: new PointAttribute('RETURN_NUMBER', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    NUMBER_OF_RETURNS: new PointAttribute('NUMBER_OF_RETURNS', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\n    SOURCE_ID: new PointAttribute('SOURCE_ID', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\n    INDICES: new PointAttribute('INDICES', PointAttributeTypes.DATA_TYPE_UINT32, 1),\\\\n    SPACING: new PointAttribute('SPACING', PointAttributeTypes.DATA_TYPE_FLOAT, 1),\\\\n    GPS_TIME: new PointAttribute('GPS_TIME', PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\\\\n};\\\\nclass PointAttributes {\\\\n    constructor(pointAttributes, attributes = [], byteSize = 0, size = 0, vectors = []) {\\\\n        this.attributes = attributes;\\\\n        this.byteSize = byteSize;\\\\n        this.size = size;\\\\n        this.vectors = vectors;\\\\n        if (pointAttributes != null) {\\\\n            for (let i = 0; i < pointAttributes.length; i++) {\\\\n                const pointAttributeName = pointAttributes[i];\\\\n                const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\\\\n                this.attributes.push(pointAttribute);\\\\n                this.byteSize += pointAttribute.byteSize;\\\\n                this.size++;\\\\n            }\\\\n        }\\\\n    }\\\\n    add(pointAttribute) {\\\\n        this.attributes.push(pointAttribute);\\\\n        this.byteSize += pointAttribute.byteSize;\\\\n        this.size++;\\\\n    }\\\\n    addVector(vector) {\\\\n        this.vectors.push(vector);\\\\n    }\\\\n    hasNormals() {\\\\n        for (const name in this.attributes) {\\\\n            const pointAttribute = this.attributes[name];\\\\n            if (pointAttribute === POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_FLOATS ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL ||\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_OCT16) {\\\\n                return true;\\\\n            }\\\\n        }\\\\n        return false;\\\\n    }\\\\n    getAttribute(attributeName) {\\\\n        return this.attributes.find(attr => attr.name === attributeName);\\\\n    }\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/loading2/gltf-decoder.worker.js\\\\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \\\\\\\"undefined\\\\\\\" && o[Symbol.iterator] || o[\\\\\\\"@@iterator\\\\\\\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \\\\\\\"number\\\\\\\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\\\\\\\"Invalid attempt to iterate non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\\\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\\\"string\\\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\\\"Object\\\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\\\"Map\\\\\\\" || n === \\\\\\\"Set\\\\\\\") return Array.from(o); if (n === \\\\\\\"Arguments\\\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\\\\n\\\\nvar typedArrayMapping = {\\\\n  'int8': Int8Array,\\\\n  'int16': Int16Array,\\\\n  'int32': Int32Array,\\\\n  'int64': Float64Array,\\\\n  'uint8': Uint8Array,\\\\n  'uint16': Uint16Array,\\\\n  'uint32': Uint32Array,\\\\n  'uint64': Float64Array,\\\\n  'float': Float32Array,\\\\n  'double': Float64Array\\\\n};\\\\nonmessage = function onmessage(event) {\\\\n  var _event$data = event.data,\\\\n    buffer = _event$data.buffer,\\\\n    pointAttributes = _event$data.pointAttributes,\\\\n    scale = _event$data.scale,\\\\n    name = _event$data.name,\\\\n    min = _event$data.min,\\\\n    max = _event$data.max,\\\\n    size = _event$data.size,\\\\n    offset = _event$data.offset,\\\\n    numPoints = _event$data.numPoints;\\\\n  var view = new DataView(buffer);\\\\n  var attributeBuffers = {};\\\\n  var bytesPerPointPosition = 4 * 3;\\\\n  var gridSize = 32;\\\\n  var grid = new Uint32Array(Math.pow(gridSize, 3));\\\\n  var toIndex = function toIndex(x, y, z) {\\\\n    // min is already subtracted\\\\n    var dx = gridSize * x / size.x;\\\\n    var dy = gridSize * y / size.y;\\\\n    var dz = gridSize * z / size.z;\\\\n    var ix = Math.min(parseInt(dx), gridSize - 1);\\\\n    var iy = Math.min(parseInt(dy), gridSize - 1);\\\\n    var iz = Math.min(parseInt(dz), gridSize - 1);\\\\n    var index = ix + iy * gridSize + iz * gridSize * gridSize;\\\\n    return index;\\\\n  };\\\\n  var numOccupiedCells = 0;\\\\n  var tightBoxMin = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];\\\\n  var tightBoxMax = [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY];\\\\n  var _iterator = _createForOfIteratorHelper(pointAttributes.attributes),\\\\n    _step;\\\\n  try {\\\\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\\\\n      var pointAttribute = _step.value;\\\\n      if ([\\\\\\\"POSITION_CARTESIAN\\\\\\\", \\\\\\\"position\\\\\\\"].includes(pointAttribute.name)) {\\\\n        var _buff = new ArrayBuffer(numPoints * 4 * 3);\\\\n        var positions = new Float32Array(_buff);\\\\n        for (var _j = 0; _j < numPoints; _j++) {\\\\n          var pointOffset = _j * bytesPerPointPosition;\\\\n          var x = view.getFloat32(pointOffset + 0, true) + offset[0] - min.x;\\\\n          var y = view.getFloat32(pointOffset + 4, true) + offset[1] - min.y;\\\\n          var z = view.getFloat32(pointOffset + 8, true) + offset[2] - min.z;\\\\n          tightBoxMin[0] = Math.min(tightBoxMin[0], x);\\\\n          tightBoxMin[1] = Math.min(tightBoxMin[1], y);\\\\n          tightBoxMin[2] = Math.min(tightBoxMin[2], z);\\\\n          tightBoxMax[0] = Math.max(tightBoxMax[0], x);\\\\n          tightBoxMax[1] = Math.max(tightBoxMax[1], y);\\\\n          tightBoxMax[2] = Math.max(tightBoxMax[2], z);\\\\n          var index = toIndex(x, y, z);\\\\n          var count = grid[index]++;\\\\n          if (count === 0) {\\\\n            numOccupiedCells++;\\\\n          }\\\\n          positions[3 * _j + 0] = x;\\\\n          positions[3 * _j + 1] = y;\\\\n          positions[3 * _j + 2] = z;\\\\n        }\\\\n        attributeBuffers[pointAttribute.name] = {\\\\n          buffer: _buff,\\\\n          attribute: pointAttribute\\\\n        };\\\\n      } else if ([\\\\\\\"RGBA\\\\\\\", \\\\\\\"rgba\\\\\\\"].includes(pointAttribute.name)) {\\\\n        attributeBuffers[pointAttribute.name] = {\\\\n          buffer: buffer.slice(numPoints * bytesPerPointPosition),\\\\n          attribute: pointAttribute\\\\n        };\\\\n      }\\\\n    }\\\\n  } catch (err) {\\\\n    _iterator.e(err);\\\\n  } finally {\\\\n    _iterator.f();\\\\n  }\\\\n  var occupancy = parseInt(numPoints / numOccupiedCells);\\\\n  {\\\\n    // add indices\\\\n    var buff = new ArrayBuffer(numPoints * 4);\\\\n    var indices = new Uint32Array(buff);\\\\n    for (var i = 0; i < numPoints; i++) {\\\\n      indices[i] = i;\\\\n    }\\\\n    attributeBuffers[\\\\\\\"INDICES\\\\\\\"] = {\\\\n      buffer: buff,\\\\n      attribute: PointAttribute.INDICES\\\\n    };\\\\n  }\\\\n  {\\\\n    // handle attribute vectors\\\\n    var vectors = pointAttributes.vectors;\\\\n    var _iterator2 = _createForOfIteratorHelper(vectors),\\\\n      _step2;\\\\n    try {\\\\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\\\\n        var vector = _step2.value;\\\\n        var _name = vector.name,\\\\n          attributes = vector.attributes;\\\\n        var numVectorElements = attributes.length;\\\\n        var _buffer = new ArrayBuffer(numVectorElements * numPoints * 4);\\\\n        var f32 = new Float32Array(_buffer);\\\\n        var iElement = 0;\\\\n        var _iterator3 = _createForOfIteratorHelper(attributes),\\\\n          _step3;\\\\n        try {\\\\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\\\\n            var sourceName = _step3.value;\\\\n            var sourceBuffer = attributeBuffers[sourceName];\\\\n            var _offset = sourceBuffer.offset,\\\\n              _scale = sourceBuffer.scale;\\\\n            var _view = new DataView(sourceBuffer.buffer);\\\\n            var getter = _view.getFloat32.bind(_view);\\\\n            for (var j = 0; j < numPoints; j++) {\\\\n              var value = getter(j * 4, true);\\\\n              f32[j * numVectorElements + iElement] = value / _scale + _offset;\\\\n            }\\\\n            iElement++;\\\\n          }\\\\n        } catch (err) {\\\\n          _iterator3.e(err);\\\\n        } finally {\\\\n          _iterator3.f();\\\\n        }\\\\n        var vecAttribute = new PointAttribute(_name, PointAttributeTypes.DATA_TYPE_FLOAT, 3);\\\\n        attributeBuffers[_name] = {\\\\n          buffer: _buffer,\\\\n          attribute: vecAttribute\\\\n        };\\\\n      }\\\\n    } catch (err) {\\\\n      _iterator2.e(err);\\\\n    } finally {\\\\n      _iterator2.f();\\\\n    }\\\\n  }\\\\n  var message = {\\\\n    buffer: buffer,\\\\n    attributeBuffers: attributeBuffers,\\\\n    density: occupancy,\\\\n    tightBoundingBox: {\\\\n      min: tightBoxMin,\\\\n      max: tightBoxMax\\\\n    }\\\\n  };\\\\n  var transferables = [];\\\\n  for (var property in message.attributeBuffers) {\\\\n    transferables.push(message.attributeBuffers[property].buffer);\\\\n  }\\\\n  transferables.push(buffer);\\\\n  postMessage(message, transferables);\\\\n};//# sourceURL=[module]\\\\n\\\")}},__webpack_exports__={};__webpack_modules__[374]()})();\", \"Worker\", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///218\n")},91:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(512);\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()("(()=>{\\"use strict\\";var __webpack_modules__={717:()=>{eval(\'\\\\n;// CONCATENATED MODULE: ./src/point-attributes.ts\\\\n// -------------------------------------------------------------------------------------------------\\\\n// Converted to Typescript and adapted from https://github.com/potree/potree\\\\n// -------------------------------------------------------------------------------------------------\\\\nvar PointAttributeName;\\\\n(function (PointAttributeName) {\\\\n    PointAttributeName[PointAttributeName[\\"POSITION_CARTESIAN\\"] = 0] = \\"POSITION_CARTESIAN\\";\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_PACKED\\"] = 1] = \\"COLOR_PACKED\\";\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_FLOATS_1\\"] = 2] = \\"COLOR_FLOATS_1\\";\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_FLOATS_255\\"] = 3] = \\"COLOR_FLOATS_255\\";\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_FLOATS\\"] = 4] = \\"NORMAL_FLOATS\\";\\\\n    PointAttributeName[PointAttributeName[\\"FILLER\\"] = 5] = \\"FILLER\\";\\\\n    PointAttributeName[PointAttributeName[\\"INTENSITY\\"] = 6] = \\"INTENSITY\\";\\\\n    PointAttributeName[PointAttributeName[\\"CLASSIFICATION\\"] = 7] = \\"CLASSIFICATION\\";\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_SPHEREMAPPED\\"] = 8] = \\"NORMAL_SPHEREMAPPED\\";\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_OCT16\\"] = 9] = \\"NORMAL_OCT16\\";\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL\\"] = 10] = \\"NORMAL\\";\\\\n})(PointAttributeName || (PointAttributeName = {}));\\\\nconst POINT_ATTRIBUTE_TYPES = {\\\\n    DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\\\\n    DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\\\\n    DATA_TYPE_INT8: { ordinal: 2, size: 1 },\\\\n    DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\\\\n    DATA_TYPE_INT16: { ordinal: 4, size: 2 },\\\\n    DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\\\\n    DATA_TYPE_INT32: { ordinal: 6, size: 4 },\\\\n    DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\\\\n    DATA_TYPE_INT64: { ordinal: 8, size: 8 },\\\\n    DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\\\\n};\\\\nfunction makePointAttribute(name, type, numElements) {\\\\n    return {\\\\n        name,\\\\n        type,\\\\n        numElements,\\\\n        byteSize: numElements * type.size,\\\\n    };\\\\n}\\\\nconst RGBA_PACKED = makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 4);\\\\nconst POINT_ATTRIBUTES = {\\\\n    POSITION_CARTESIAN: makePointAttribute(PointAttributeName.POSITION_CARTESIAN, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\n    RGBA_PACKED,\\\\n    COLOR_PACKED: RGBA_PACKED,\\\\n    RGB_PACKED: makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 3),\\\\n    NORMAL_FLOATS: makePointAttribute(PointAttributeName.NORMAL_FLOATS, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\n    FILLER_1B: makePointAttribute(PointAttributeName.FILLER, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\\\\n    INTENSITY: makePointAttribute(PointAttributeName.INTENSITY, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16, 1),\\\\n    CLASSIFICATION: makePointAttribute(PointAttributeName.CLASSIFICATION, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\\\\n    NORMAL_SPHEREMAPPED: makePointAttribute(PointAttributeName.NORMAL_SPHEREMAPPED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\\\\n    NORMAL_OCT16: makePointAttribute(PointAttributeName.NORMAL_OCT16, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\\\\n    NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\n};\\\\nclass PointAttributes {\\\\n    constructor(pointAttributeNames = []) {\\\\n        this.attributes = [];\\\\n        this.byteSize = 0;\\\\n        this.size = 0;\\\\n        for (let i = 0; i < pointAttributeNames.length; i++) {\\\\n            const pointAttributeName = pointAttributeNames[i];\\\\n            const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\\\\n            this.attributes.push(pointAttribute);\\\\n            this.byteSize += pointAttribute.byteSize;\\\\n            this.size++;\\\\n        }\\\\n    }\\\\n    add(pointAttribute) {\\\\n        this.attributes.push(pointAttribute);\\\\n        this.byteSize += pointAttribute.byteSize;\\\\n        this.size++;\\\\n    }\\\\n    hasColors() {\\\\n        return this.attributes.find(isColorAttribute) !== undefined;\\\\n    }\\\\n    hasNormals() {\\\\n        return this.attributes.find(isNormalAttribute) !== undefined;\\\\n    }\\\\n}\\\\nfunction isColorAttribute({ name }) {\\\\n    return name === PointAttributeName.COLOR_PACKED;\\\\n}\\\\nfunction isNormalAttribute({ name }) {\\\\n    return (name === PointAttributeName.NORMAL_SPHEREMAPPED ||\\\\n        name === PointAttributeName.NORMAL_FLOATS ||\\\\n        name === PointAttributeName.NORMAL ||\\\\n        name === PointAttributeName.NORMAL_OCT16);\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./src/version.ts\\\\nclass Version {\\\\n    constructor(version) {\\\\n        this.versionMinor = 0;\\\\n        this.version = version;\\\\n        const vmLength = version.indexOf(\\\\\'.\\\\\') === -1 ? version.length : version.indexOf(\\\\\'.\\\\\');\\\\n        this.versionMajor = parseInt(version.substr(0, vmLength), 10);\\\\n        this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\\\\n        if (isNaN(this.versionMinor)) {\\\\n            this.versionMinor = 0;\\\\n        }\\\\n    }\\\\n    newerThan(version) {\\\\n        const v = new Version(version);\\\\n        if (this.versionMajor > v.versionMajor) {\\\\n            return true;\\\\n        }\\\\n        else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\\\\n            return true;\\\\n        }\\\\n        else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n    equalOrHigher(version) {\\\\n        const v = new Version(version);\\\\n        if (this.versionMajor > v.versionMajor) {\\\\n            return true;\\\\n        }\\\\n        else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\\\\n            return true;\\\\n        }\\\\n        else {\\\\n            return false;\\\\n        }\\\\n    }\\\\n    upTo(version) {\\\\n        return !this.newerThan(version);\\\\n    }\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./src/workers/custom-array-view.ts\\\\n/**\\\\n * Adapted from Potree.js http://potree.org\\\\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\\\\n */\\\\n// http://jsperf.com/uint8array-vs-dataview3/3\\\\n// tslint:disable:no-bitwise\\\\nclass CustomArrayView {\\\\n    constructor(buffer) {\\\\n        this.tmp = new ArrayBuffer(4);\\\\n        this.tmpf = new Float32Array(this.tmp);\\\\n        this.tmpu8 = new Uint8Array(this.tmp);\\\\n        this.u8 = new Uint8Array(buffer);\\\\n    }\\\\n    getUint32(i) {\\\\n        return (this.u8[i + 3] << 24) | (this.u8[i + 2] << 16) | (this.u8[i + 1] << 8) | this.u8[i];\\\\n    }\\\\n    getUint16(i) {\\\\n        return (this.u8[i + 1] << 8) | this.u8[i];\\\\n    }\\\\n    getFloat32(i) {\\\\n        const tmpu8 = this.tmpu8;\\\\n        const u8 = this.u8;\\\\n        const tmpf = this.tmpf;\\\\n        tmpu8[0] = u8[i + 0];\\\\n        tmpu8[1] = u8[i + 1];\\\\n        tmpu8[2] = u8[i + 2];\\\\n        tmpu8[3] = u8[i + 3];\\\\n        return tmpf[0];\\\\n    }\\\\n    getUint8(i) {\\\\n        return this.u8[i];\\\\n    }\\\\n}\\\\n// tslint:enable:no-bitwise\\\\n\\\\n;// CONCATENATED MODULE: ./src/workers/binary-decoder-worker-internal.ts\\\\n/**\\\\n * Adapted from Potree.js http://potree.org\\\\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\\\\n */\\\\n\\\\n\\\\n\\\\n// IE11 does not have Math.sign(), this has been adapted from CoreJS es6.math.sign.js for TypeScript\\\\nconst mathSign = Math.sign ||\\\\n    function (x) {\\\\n        // tslint:disable-next-line:triple-equals\\\\n        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\\\\n    };\\\\nfunction handleMessage(event) {\\\\n    const buffer = event.data.buffer;\\\\n    const pointAttributes = event.data.pointAttributes;\\\\n    const ctx = {\\\\n        attributeBuffers: {},\\\\n        currentOffset: 0,\\\\n        data: new CustomArrayView(buffer),\\\\n        mean: [0, 0, 0],\\\\n        nodeOffset: event.data.offset,\\\\n        numPoints: event.data.buffer.byteLength / pointAttributes.byteSize,\\\\n        pointAttributes,\\\\n        scale: event.data.scale,\\\\n        tightBoxMax: [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\\\\n        tightBoxMin: [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\\\\n        transferables: [],\\\\n        version: new Version(event.data.version),\\\\n    };\\\\n    for (const pointAttribute of ctx.pointAttributes.attributes) {\\\\n        decodeAndAddAttribute(pointAttribute, ctx);\\\\n        ctx.currentOffset += pointAttribute.byteSize;\\\\n    }\\\\n    const indices = new ArrayBuffer(ctx.numPoints * 4);\\\\n    const iIndices = new Uint32Array(indices);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        iIndices[i] = i;\\\\n    }\\\\n    if (!ctx.attributeBuffers[PointAttributeName.CLASSIFICATION]) {\\\\n        addEmptyClassificationBuffer(ctx);\\\\n    }\\\\n    const message = {\\\\n        buffer: buffer,\\\\n        mean: ctx.mean,\\\\n        attributeBuffers: ctx.attributeBuffers,\\\\n        tightBoundingBox: { min: ctx.tightBoxMin, max: ctx.tightBoxMax },\\\\n        indices,\\\\n    };\\\\n    postMessage(message, ctx.transferables);\\\\n}\\\\nfunction addEmptyClassificationBuffer(ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4);\\\\n    const classifications = new Float32Array(buffer);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        classifications[i] = 0;\\\\n    }\\\\n    ctx.attributeBuffers[PointAttributeName.CLASSIFICATION] = {\\\\n        buffer,\\\\n        attribute: POINT_ATTRIBUTES.CLASSIFICATION,\\\\n    };\\\\n}\\\\nfunction decodeAndAddAttribute(attribute, ctx) {\\\\n    const decodedAttribute = decodePointAttribute(attribute, ctx);\\\\n    if (decodedAttribute === undefined) {\\\\n        return;\\\\n    }\\\\n    ctx.attributeBuffers[decodedAttribute.attribute.name] = decodedAttribute;\\\\n    ctx.transferables.push(decodedAttribute.buffer);\\\\n}\\\\nfunction decodePointAttribute(attribute, ctx) {\\\\n    switch (attribute.name) {\\\\n        case PointAttributeName.POSITION_CARTESIAN:\\\\n            return decodePositionCartesian(attribute, ctx);\\\\n        case PointAttributeName.COLOR_PACKED:\\\\n            return decodeColor(attribute, ctx);\\\\n        case PointAttributeName.INTENSITY:\\\\n            return decodeIntensity(attribute, ctx);\\\\n        case PointAttributeName.CLASSIFICATION:\\\\n            return decodeClassification(attribute, ctx);\\\\n        case PointAttributeName.NORMAL_SPHEREMAPPED:\\\\n            return decodeNormalSphereMapped(attribute, ctx);\\\\n        case PointAttributeName.NORMAL_OCT16:\\\\n            return decodeNormalOct16(attribute, ctx);\\\\n        case PointAttributeName.NORMAL:\\\\n            return decodeNormal(attribute, ctx);\\\\n        default:\\\\n            return undefined;\\\\n    }\\\\n}\\\\nfunction decodePositionCartesian(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\n    const positions = new Float32Array(buffer);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        let x;\\\\n        let y;\\\\n        let z;\\\\n        if (ctx.version.newerThan(\\\\\'1.3\\\\\')) {\\\\n            x = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0) * ctx.scale;\\\\n            y = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 4) * ctx.scale;\\\\n            z = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 8) * ctx.scale;\\\\n        }\\\\n        else {\\\\n            x = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 0) + ctx.nodeOffset[0];\\\\n            y = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 4) + ctx.nodeOffset[1];\\\\n            z = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 8) + ctx.nodeOffset[2];\\\\n        }\\\\n        positions[3 * i + 0] = x;\\\\n        positions[3 * i + 1] = y;\\\\n        positions[3 * i + 2] = z;\\\\n        ctx.mean[0] += x / ctx.numPoints;\\\\n        ctx.mean[1] += y / ctx.numPoints;\\\\n        ctx.mean[2] += z / ctx.numPoints;\\\\n        ctx.tightBoxMin[0] = Math.min(ctx.tightBoxMin[0], x);\\\\n        ctx.tightBoxMin[1] = Math.min(ctx.tightBoxMin[1], y);\\\\n        ctx.tightBoxMin[2] = Math.min(ctx.tightBoxMin[2], z);\\\\n        ctx.tightBoxMax[0] = Math.max(ctx.tightBoxMax[0], x);\\\\n        ctx.tightBoxMax[1] = Math.max(ctx.tightBoxMax[1], y);\\\\n        ctx.tightBoxMax[2] = Math.max(ctx.tightBoxMax[2], z);\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeColor(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 3);\\\\n    const colors = new Uint8Array(buffer);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        colors[3 * i + 0] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0);\\\\n        colors[3 * i + 1] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 1);\\\\n        colors[3 * i + 2] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 2);\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeIntensity(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4);\\\\n    const intensities = new Float32Array(buffer);\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\n        intensities[i] = ctx.data.getUint16(ctx.currentOffset + i * ctx.pointAttributes.byteSize);\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeClassification(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints);\\\\n    const classifications = new Uint8Array(buffer);\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\n        classifications[j] = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize);\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeNormalSphereMapped(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\n    const normals = new Float32Array(buffer);\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\n        const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\n        const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\\\\n        const ex = bx / 255;\\\\n        const ey = by / 255;\\\\n        let nx = ex * 2 - 1;\\\\n        let ny = ey * 2 - 1;\\\\n        let nz = 1;\\\\n        const nw = -1;\\\\n        const l = nx * -nx + ny * -ny + nz * -nw;\\\\n        nz = l;\\\\n        nx = nx * Math.sqrt(l);\\\\n        ny = ny * Math.sqrt(l);\\\\n        nx = nx * 2;\\\\n        ny = ny * 2;\\\\n        nz = nz * 2 - 1;\\\\n        normals[3 * j + 0] = nx;\\\\n        normals[3 * j + 1] = ny;\\\\n        normals[3 * j + 2] = nz;\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\nfunction decodeNormalOct16(attribute, ctx) {\\\\n    const buff = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\n    const normals = new Float32Array(buff);\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\n        const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\n        const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\\\\n        const u = (bx / 255) * 2 - 1;\\\\n        const v = (by / 255) * 2 - 1;\\\\n        let z = 1 - Math.abs(u) - Math.abs(v);\\\\n        let x = 0;\\\\n        let y = 0;\\\\n        if (z >= 0) {\\\\n            x = u;\\\\n            y = v;\\\\n        }\\\\n        else {\\\\n            x = -(v / mathSign(v) - 1) / mathSign(u);\\\\n            y = -(u / mathSign(u) - 1) / mathSign(v);\\\\n        }\\\\n        const length = Math.sqrt(x * x + y * y + z * z);\\\\n        x = x / length;\\\\n        y = y / length;\\\\n        z = z / length;\\\\n        normals[3 * j + 0] = x;\\\\n        normals[3 * j + 1] = y;\\\\n        normals[3 * j + 2] = z;\\\\n    }\\\\n    return { buffer: buff, attribute };\\\\n}\\\\nfunction decodeNormal(attribute, ctx) {\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\n    const normals = new Float32Array(buffer);\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\n        const x = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\n        const y = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 4);\\\\n        const z = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 8);\\\\n        normals[3 * j + 0] = x;\\\\n        normals[3 * j + 1] = y;\\\\n        normals[3 * j + 2] = z;\\\\n    }\\\\n    return { buffer, attribute };\\\\n}\\\\n\\\\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/workers/binary-decoder.worker.js\\\\n\\\\n\\\\n/*eslint-disable */\\\\nonmessage = handleMessage;//# sourceURL=[module]\\\\n\')}},__webpack_exports__={};__webpack_modules__[717]()})();", "Worker", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3RyZWUvLi9zcmMvd29ya2Vycy9iaW5hcnktZGVjb2Rlci53b3JrZXIuanM/YzYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB3b3JrZXIgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3dvcmtlci1sb2FkZXIvZGlzdC9ydW50aW1lL2lubGluZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXb3JrZXJfZm4oKSB7XG4gIHJldHVybiB3b3JrZXIoXCIoKCk9PntcXFwidXNlIHN0cmljdFxcXCI7dmFyIF9fd2VicGFja19tb2R1bGVzX189ezcxNzooKT0+e2V2YWwoJ1xcXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3BvaW50LWF0dHJpYnV0ZXMudHNcXFxcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXFxcbi8vIENvbnZlcnRlZCB0byBUeXBlc2NyaXB0IGFuZCBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BvdHJlZS9wb3RyZWVcXFxcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXFxcbnZhciBQb2ludEF0dHJpYnV0ZU5hbWU7XFxcXG4oZnVuY3Rpb24gKFBvaW50QXR0cmlidXRlTmFtZSkge1xcXFxuICAgIFBvaW50QXR0cmlidXRlTmFtZVtQb2ludEF0dHJpYnV0ZU5hbWVbXFxcIlBPU0lUSU9OX0NBUlRFU0lBTlxcXCJdID0gMF0gPSBcXFwiUE9TSVRJT05fQ0FSVEVTSUFOXFxcIjtcXFxcbiAgICBQb2ludEF0dHJpYnV0ZU5hbWVbUG9pbnRBdHRyaWJ1dGVOYW1lW1xcXCJDT0xPUl9QQUNLRURcXFwiXSA9IDFdID0gXFxcIkNPTE9SX1BBQ0tFRFxcXCI7XFxcXG4gICAgUG9pbnRBdHRyaWJ1dGVOYW1lW1BvaW50QXR0cmlidXRlTmFtZVtcXFwiQ09MT1JfRkxPQVRTXzFcXFwiXSA9IDJdID0gXFxcIkNPTE9SX0ZMT0FUU18xXFxcIjtcXFxcbiAgICBQb2ludEF0dHJpYnV0ZU5hbWVbUG9pbnRBdHRyaWJ1dGVOYW1lW1xcXCJDT0xPUl9GTE9BVFNfMjU1XFxcIl0gPSAzXSA9IFxcXCJDT0xPUl9GTE9BVFNfMjU1XFxcIjtcXFxcbiAgICBQb2ludEF0dHJpYnV0ZU5hbWVbUG9pbnRBdHRyaWJ1dGVOYW1lW1xcXCJOT1JNQUxfRkxPQVRTXFxcIl0gPSA0XSA9IFxcXCJOT1JNQUxfRkxPQVRTXFxcIjtcXFxcbiAgICBQb2ludEF0dHJpYnV0ZU5hbWVbUG9pbnRBdHRyaWJ1dGVOYW1lW1xcXCJGSUxMRVJcXFwiXSA9IDVdID0gXFxcIkZJTExFUlxcXCI7XFxcXG4gICAgUG9pbnRBdHRyaWJ1dGVOYW1lW1BvaW50QXR0cmlidXRlTmFtZVtcXFwiSU5URU5TSVRZXFxcIl0gPSA2XSA9IFxcXCJJTlRFTlNJVFlcXFwiO1xcXFxuICAgIFBvaW50QXR0cmlidXRlTmFtZVtQb2ludEF0dHJpYnV0ZU5hbWVbXFxcIkNMQVNTSUZJQ0FUSU9OXFxcIl0gPSA3XSA9IFxcXCJDTEFTU0lGSUNBVElPTlxcXCI7XFxcXG4gICAgUG9pbnRBdHRyaWJ1dGVOYW1lW1BvaW50QXR0cmlidXRlTmFtZVtcXFwiTk9STUFMX1NQSEVSRU1BUFBFRFxcXCJdID0gOF0gPSBcXFwiTk9STUFMX1NQSEVSRU1BUFBFRFxcXCI7XFxcXG4gICAgUG9pbnRBdHRyaWJ1dGVOYW1lW1BvaW50QXR0cmlidXRlTmFtZVtcXFwiTk9STUFMX09DVDE2XFxcIl0gPSA5XSA9IFxcXCJOT1JNQUxfT0NUMTZcXFwiO1xcXFxuICAgIFBvaW50QXR0cmlidXRlTmFtZVtQb2ludEF0dHJpYnV0ZU5hbWVbXFxcIk5PUk1BTFxcXCJdID0gMTBdID0gXFxcIk5PUk1BTFxcXCI7XFxcXG59KShQb2ludEF0dHJpYnV0ZU5hbWUgfHwgKFBvaW50QXR0cmlidXRlTmFtZSA9IHt9KSk7XFxcXG5jb25zdCBQT0lOVF9BVFRSSUJVVEVfVFlQRVMgPSB7XFxcXG4gICAgREFUQV9UWVBFX0RPVUJMRTogeyBvcmRpbmFsOiAwLCBzaXplOiA4IH0sXFxcXG4gICAgREFUQV9UWVBFX0ZMT0FUOiB7IG9yZGluYWw6IDEsIHNpemU6IDQgfSxcXFxcbiAgICBEQVRBX1RZUEVfSU5UODogeyBvcmRpbmFsOiAyLCBzaXplOiAxIH0sXFxcXG4gICAgREFUQV9UWVBFX1VJTlQ4OiB7IG9yZGluYWw6IDMsIHNpemU6IDEgfSxcXFxcbiAgICBEQVRBX1RZUEVfSU5UMTY6IHsgb3JkaW5hbDogNCwgc2l6ZTogMiB9LFxcXFxuICAgIERBVEFfVFlQRV9VSU5UMTY6IHsgb3JkaW5hbDogNSwgc2l6ZTogMiB9LFxcXFxuICAgIERBVEFfVFlQRV9JTlQzMjogeyBvcmRpbmFsOiA2LCBzaXplOiA0IH0sXFxcXG4gICAgREFUQV9UWVBFX1VJTlQzMjogeyBvcmRpbmFsOiA3LCBzaXplOiA0IH0sXFxcXG4gICAgREFUQV9UWVBFX0lOVDY0OiB7IG9yZGluYWw6IDgsIHNpemU6IDggfSxcXFxcbiAgICBEQVRBX1RZUEVfVUlOVDY0OiB7IG9yZGluYWw6IDksIHNpemU6IDggfSxcXFxcbn07XFxcXG5mdW5jdGlvbiBtYWtlUG9pbnRBdHRyaWJ1dGUobmFtZSwgdHlwZSwgbnVtRWxlbWVudHMpIHtcXFxcbiAgICByZXR1cm4ge1xcXFxuICAgICAgICBuYW1lLFxcXFxuICAgICAgICB0eXBlLFxcXFxuICAgICAgICBudW1FbGVtZW50cyxcXFxcbiAgICAgICAgYnl0ZVNpemU6IG51bUVsZW1lbnRzICogdHlwZS5zaXplLFxcXFxuICAgIH07XFxcXG59XFxcXG5jb25zdCBSR0JBX1BBQ0tFRCA9IG1ha2VQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWUuQ09MT1JfUEFDS0VELCBQT0lOVF9BVFRSSUJVVEVfVFlQRVMuREFUQV9UWVBFX0lOVDgsIDQpO1xcXFxuY29uc3QgUE9JTlRfQVRUUklCVVRFUyA9IHtcXFxcbiAgICBQT1NJVElPTl9DQVJURVNJQU46IG1ha2VQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWUuUE9TSVRJT05fQ0FSVEVTSUFOLCBQT0lOVF9BVFRSSUJVVEVfVFlQRVMuREFUQV9UWVBFX0ZMT0FULCAzKSxcXFxcbiAgICBSR0JBX1BBQ0tFRCxcXFxcbiAgICBDT0xPUl9QQUNLRUQ6IFJHQkFfUEFDS0VELFxcXFxuICAgIFJHQl9QQUNLRUQ6IG1ha2VQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWUuQ09MT1JfUEFDS0VELCBQT0lOVF9BVFRSSUJVVEVfVFlQRVMuREFUQV9UWVBFX0lOVDgsIDMpLFxcXFxuICAgIE5PUk1BTF9GTE9BVFM6IG1ha2VQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWUuTk9STUFMX0ZMT0FUUywgUE9JTlRfQVRUUklCVVRFX1RZUEVTLkRBVEFfVFlQRV9GTE9BVCwgMyksXFxcXG4gICAgRklMTEVSXzFCOiBtYWtlUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lLkZJTExFUiwgUE9JTlRfQVRUUklCVVRFX1RZUEVTLkRBVEFfVFlQRV9VSU5UOCwgMSksXFxcXG4gICAgSU5URU5TSVRZOiBtYWtlUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lLklOVEVOU0lUWSwgUE9JTlRfQVRUUklCVVRFX1RZUEVTLkRBVEFfVFlQRV9VSU5UMTYsIDEpLFxcXFxuICAgIENMQVNTSUZJQ0FUSU9OOiBtYWtlUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lLkNMQVNTSUZJQ0FUSU9OLCBQT0lOVF9BVFRSSUJVVEVfVFlQRVMuREFUQV9UWVBFX1VJTlQ4LCAxKSxcXFxcbiAgICBOT1JNQUxfU1BIRVJFTUFQUEVEOiBtYWtlUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lLk5PUk1BTF9TUEhFUkVNQVBQRUQsIFBPSU5UX0FUVFJJQlVURV9UWVBFUy5EQVRBX1RZUEVfVUlOVDgsIDIpLFxcXFxuICAgIE5PUk1BTF9PQ1QxNjogbWFrZVBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZS5OT1JNQUxfT0NUMTYsIFBPSU5UX0FUVFJJQlVURV9UWVBFUy5EQVRBX1RZUEVfVUlOVDgsIDIpLFxcXFxuICAgIE5PUk1BTDogbWFrZVBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZS5OT1JNQUwsIFBPSU5UX0FUVFJJQlVURV9UWVBFUy5EQVRBX1RZUEVfRkxPQVQsIDMpLFxcXFxufTtcXFxcbmNsYXNzIFBvaW50QXR0cmlidXRlcyB7XFxcXG4gICAgY29uc3RydWN0b3IocG9pbnRBdHRyaWJ1dGVOYW1lcyA9IFtdKSB7XFxcXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IFtdO1xcXFxuICAgICAgICB0aGlzLmJ5dGVTaXplID0gMDtcXFxcbiAgICAgICAgdGhpcy5zaXplID0gMDtcXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludEF0dHJpYnV0ZU5hbWVzLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICBjb25zdCBwb2ludEF0dHJpYnV0ZU5hbWUgPSBwb2ludEF0dHJpYnV0ZU5hbWVzW2ldO1xcXFxuICAgICAgICAgICAgY29uc3QgcG9pbnRBdHRyaWJ1dGUgPSBQT0lOVF9BVFRSSUJVVEVTW3BvaW50QXR0cmlidXRlTmFtZV07XFxcXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMucHVzaChwb2ludEF0dHJpYnV0ZSk7XFxcXG4gICAgICAgICAgICB0aGlzLmJ5dGVTaXplICs9IHBvaW50QXR0cmlidXRlLmJ5dGVTaXplO1xcXFxuICAgICAgICAgICAgdGhpcy5zaXplKys7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgYWRkKHBvaW50QXR0cmlidXRlKSB7XFxcXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcy5wdXNoKHBvaW50QXR0cmlidXRlKTtcXFxcbiAgICAgICAgdGhpcy5ieXRlU2l6ZSArPSBwb2ludEF0dHJpYnV0ZS5ieXRlU2l6ZTtcXFxcbiAgICAgICAgdGhpcy5zaXplKys7XFxcXG4gICAgfVxcXFxuICAgIGhhc0NvbG9ycygpIHtcXFxcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5maW5kKGlzQ29sb3JBdHRyaWJ1dGUpICE9PSB1bmRlZmluZWQ7XFxcXG4gICAgfVxcXFxuICAgIGhhc05vcm1hbHMoKSB7XFxcXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZmluZChpc05vcm1hbEF0dHJpYnV0ZSkgIT09IHVuZGVmaW5lZDtcXFxcbiAgICB9XFxcXG59XFxcXG5mdW5jdGlvbiBpc0NvbG9yQXR0cmlidXRlKHsgbmFtZSB9KSB7XFxcXG4gICAgcmV0dXJuIG5hbWUgPT09IFBvaW50QXR0cmlidXRlTmFtZS5DT0xPUl9QQUNLRUQ7XFxcXG59XFxcXG5mdW5jdGlvbiBpc05vcm1hbEF0dHJpYnV0ZSh7IG5hbWUgfSkge1xcXFxuICAgIHJldHVybiAobmFtZSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lLk5PUk1BTF9TUEhFUkVNQVBQRUQgfHxcXFxcbiAgICAgICAgbmFtZSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lLk5PUk1BTF9GTE9BVFMgfHxcXFxcbiAgICAgICAgbmFtZSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lLk5PUk1BTCB8fFxcXFxuICAgICAgICBuYW1lID09PSBQb2ludEF0dHJpYnV0ZU5hbWUuTk9STUFMX09DVDE2KTtcXFxcbn1cXFxcblxcXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3ZlcnNpb24udHNcXFxcbmNsYXNzIFZlcnNpb24ge1xcXFxuICAgIGNvbnN0cnVjdG9yKHZlcnNpb24pIHtcXFxcbiAgICAgICAgdGhpcy52ZXJzaW9uTWlub3IgPSAwO1xcXFxuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xcXFxuICAgICAgICBjb25zdCB2bUxlbmd0aCA9IHZlcnNpb24uaW5kZXhPZihcXFxcJy5cXFxcJykgPT09IC0xID8gdmVyc2lvbi5sZW5ndGggOiB2ZXJzaW9uLmluZGV4T2YoXFxcXCcuXFxcXCcpO1xcXFxuICAgICAgICB0aGlzLnZlcnNpb25NYWpvciA9IHBhcnNlSW50KHZlcnNpb24uc3Vic3RyKDAsIHZtTGVuZ3RoKSwgMTApO1xcXFxuICAgICAgICB0aGlzLnZlcnNpb25NaW5vciA9IHBhcnNlSW50KHZlcnNpb24uc3Vic3RyKHZtTGVuZ3RoICsgMSksIDEwKTtcXFxcbiAgICAgICAgaWYgKGlzTmFOKHRoaXMudmVyc2lvbk1pbm9yKSkge1xcXFxuICAgICAgICAgICAgdGhpcy52ZXJzaW9uTWlub3IgPSAwO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIG5ld2VyVGhhbih2ZXJzaW9uKSB7XFxcXG4gICAgICAgIGNvbnN0IHYgPSBuZXcgVmVyc2lvbih2ZXJzaW9uKTtcXFxcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbk1ham9yID4gdi52ZXJzaW9uTWFqb3IpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudmVyc2lvbk1ham9yID09PSB2LnZlcnNpb25NYWpvciAmJiB0aGlzLnZlcnNpb25NaW5vciA+IHYudmVyc2lvbk1pbm9yKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICBlcXVhbE9ySGlnaGVyKHZlcnNpb24pIHtcXFxcbiAgICAgICAgY29uc3QgdiA9IG5ldyBWZXJzaW9uKHZlcnNpb24pO1xcXFxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uTWFqb3IgPiB2LnZlcnNpb25NYWpvcikge1xcXFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgZWxzZSBpZiAodGhpcy52ZXJzaW9uTWFqb3IgPT09IHYudmVyc2lvbk1ham9yICYmIHRoaXMudmVyc2lvbk1pbm9yID49IHYudmVyc2lvbk1pbm9yKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICB1cFRvKHZlcnNpb24pIHtcXFxcbiAgICAgICAgcmV0dXJuICF0aGlzLm5ld2VyVGhhbih2ZXJzaW9uKTtcXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy93b3JrZXJzL2N1c3RvbS1hcnJheS12aWV3LnRzXFxcXG4vKipcXFxcbiAqIEFkYXB0ZWQgZnJvbSBQb3RyZWUuanMgaHR0cDovL3BvdHJlZS5vcmdcXFxcbiAqIFBvdHJlZSBMaWNlbnNlOiBodHRwczovL2dpdGh1Yi5jb20vcG90cmVlL3BvdHJlZS9ibG9iLzEuNS9MSUNFTlNFXFxcXG4gKi9cXFxcbi8vIGh0dHA6Ly9qc3BlcmYuY29tL3VpbnQ4YXJyYXktdnMtZGF0YXZpZXczLzNcXFxcbi8vIHRzbGludDpkaXNhYmxlOm5vLWJpdHdpc2VcXFxcbmNsYXNzIEN1c3RvbUFycmF5VmlldyB7XFxcXG4gICAgY29uc3RydWN0b3IoYnVmZmVyKSB7XFxcXG4gICAgICAgIHRoaXMudG1wID0gbmV3IEFycmF5QnVmZmVyKDQpO1xcXFxuICAgICAgICB0aGlzLnRtcGYgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMudG1wKTtcXFxcbiAgICAgICAgdGhpcy50bXB1OCA9IG5ldyBVaW50OEFycmF5KHRoaXMudG1wKTtcXFxcbiAgICAgICAgdGhpcy51OCA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XFxcXG4gICAgfVxcXFxuICAgIGdldFVpbnQzMihpKSB7XFxcXG4gICAgICAgIHJldHVybiAodGhpcy51OFtpICsgM10gPDwgMjQpIHwgKHRoaXMudThbaSArIDJdIDw8IDE2KSB8ICh0aGlzLnU4W2kgKyAxXSA8PCA4KSB8IHRoaXMudThbaV07XFxcXG4gICAgfVxcXFxuICAgIGdldFVpbnQxNihpKSB7XFxcXG4gICAgICAgIHJldHVybiAodGhpcy51OFtpICsgMV0gPDwgOCkgfCB0aGlzLnU4W2ldO1xcXFxuICAgIH1cXFxcbiAgICBnZXRGbG9hdDMyKGkpIHtcXFxcbiAgICAgICAgY29uc3QgdG1wdTggPSB0aGlzLnRtcHU4O1xcXFxuICAgICAgICBjb25zdCB1OCA9IHRoaXMudTg7XFxcXG4gICAgICAgIGNvbnN0IHRtcGYgPSB0aGlzLnRtcGY7XFxcXG4gICAgICAgIHRtcHU4WzBdID0gdThbaSArIDBdO1xcXFxuICAgICAgICB0bXB1OFsxXSA9IHU4W2kgKyAxXTtcXFxcbiAgICAgICAgdG1wdThbMl0gPSB1OFtpICsgMl07XFxcXG4gICAgICAgIHRtcHU4WzNdID0gdThbaSArIDNdO1xcXFxuICAgICAgICByZXR1cm4gdG1wZlswXTtcXFxcbiAgICB9XFxcXG4gICAgZ2V0VWludDgoaSkge1xcXFxuICAgICAgICByZXR1cm4gdGhpcy51OFtpXTtcXFxcbiAgICB9XFxcXG59XFxcXG4vLyB0c2xpbnQ6ZW5hYmxlOm5vLWJpdHdpc2VcXFxcblxcXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3dvcmtlcnMvYmluYXJ5LWRlY29kZXItd29ya2VyLWludGVybmFsLnRzXFxcXG4vKipcXFxcbiAqIEFkYXB0ZWQgZnJvbSBQb3RyZWUuanMgaHR0cDovL3BvdHJlZS5vcmdcXFxcbiAqIFBvdHJlZSBMaWNlbnNlOiBodHRwczovL2dpdGh1Yi5jb20vcG90cmVlL3BvdHJlZS9ibG9iLzEuNS9MSUNFTlNFXFxcXG4gKi9cXFxcblxcXFxuXFxcXG5cXFxcbi8vIElFMTEgZG9lcyBub3QgaGF2ZSBNYXRoLnNpZ24oKSwgdGhpcyBoYXMgYmVlbiBhZGFwdGVkIGZyb20gQ29yZUpTIGVzNi5tYXRoLnNpZ24uanMgZm9yIFR5cGVTY3JpcHRcXFxcbmNvbnN0IG1hdGhTaWduID0gTWF0aC5zaWduIHx8XFxcXG4gICAgZnVuY3Rpb24gKHgpIHtcXFxcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcXFxcbiAgICAgICAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xcXFxuICAgIH07XFxcXG5mdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGV2ZW50KSB7XFxcXG4gICAgY29uc3QgYnVmZmVyID0gZXZlbnQuZGF0YS5idWZmZXI7XFxcXG4gICAgY29uc3QgcG9pbnRBdHRyaWJ1dGVzID0gZXZlbnQuZGF0YS5wb2ludEF0dHJpYnV0ZXM7XFxcXG4gICAgY29uc3QgY3R4ID0ge1xcXFxuICAgICAgICBhdHRyaWJ1dGVCdWZmZXJzOiB7fSxcXFxcbiAgICAgICAgY3VycmVudE9mZnNldDogMCxcXFxcbiAgICAgICAgZGF0YTogbmV3IEN1c3RvbUFycmF5VmlldyhidWZmZXIpLFxcXFxuICAgICAgICBtZWFuOiBbMCwgMCwgMF0sXFxcXG4gICAgICAgIG5vZGVPZmZzZXQ6IGV2ZW50LmRhdGEub2Zmc2V0LFxcXFxuICAgICAgICBudW1Qb2ludHM6IGV2ZW50LmRhdGEuYnVmZmVyLmJ5dGVMZW5ndGggLyBwb2ludEF0dHJpYnV0ZXMuYnl0ZVNpemUsXFxcXG4gICAgICAgIHBvaW50QXR0cmlidXRlcyxcXFxcbiAgICAgICAgc2NhbGU6IGV2ZW50LmRhdGEuc2NhbGUsXFxcXG4gICAgICAgIHRpZ2h0Qm94TWF4OiBbTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksIE51bWJlci5ORUdBVElWRV9JTkZJTklUWV0sXFxcXG4gICAgICAgIHRpZ2h0Qm94TWluOiBbTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIE51bWJlci5QT1NJVElWRV9JTkZJTklUWV0sXFxcXG4gICAgICAgIHRyYW5zZmVyYWJsZXM6IFtdLFxcXFxuICAgICAgICB2ZXJzaW9uOiBuZXcgVmVyc2lvbihldmVudC5kYXRhLnZlcnNpb24pLFxcXFxuICAgIH07XFxcXG4gICAgZm9yIChjb25zdCBwb2ludEF0dHJpYnV0ZSBvZiBjdHgucG9pbnRBdHRyaWJ1dGVzLmF0dHJpYnV0ZXMpIHtcXFxcbiAgICAgICAgZGVjb2RlQW5kQWRkQXR0cmlidXRlKHBvaW50QXR0cmlidXRlLCBjdHgpO1xcXFxuICAgICAgICBjdHguY3VycmVudE9mZnNldCArPSBwb2ludEF0dHJpYnV0ZS5ieXRlU2l6ZTtcXFxcbiAgICB9XFxcXG4gICAgY29uc3QgaW5kaWNlcyA9IG5ldyBBcnJheUJ1ZmZlcihjdHgubnVtUG9pbnRzICogNCk7XFxcXG4gICAgY29uc3QgaUluZGljZXMgPSBuZXcgVWludDMyQXJyYXkoaW5kaWNlcyk7XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdHgubnVtUG9pbnRzOyBpKyspIHtcXFxcbiAgICAgICAgaUluZGljZXNbaV0gPSBpO1xcXFxuICAgIH1cXFxcbiAgICBpZiAoIWN0eC5hdHRyaWJ1dGVCdWZmZXJzW1BvaW50QXR0cmlidXRlTmFtZS5DTEFTU0lGSUNBVElPTl0pIHtcXFxcbiAgICAgICAgYWRkRW1wdHlDbGFzc2lmaWNhdGlvbkJ1ZmZlcihjdHgpO1xcXFxuICAgIH1cXFxcbiAgICBjb25zdCBtZXNzYWdlID0ge1xcXFxuICAgICAgICBidWZmZXI6IGJ1ZmZlcixcXFxcbiAgICAgICAgbWVhbjogY3R4Lm1lYW4sXFxcXG4gICAgICAgIGF0dHJpYnV0ZUJ1ZmZlcnM6IGN0eC5hdHRyaWJ1dGVCdWZmZXJzLFxcXFxuICAgICAgICB0aWdodEJvdW5kaW5nQm94OiB7IG1pbjogY3R4LnRpZ2h0Qm94TWluLCBtYXg6IGN0eC50aWdodEJveE1heCB9LFxcXFxuICAgICAgICBpbmRpY2VzLFxcXFxuICAgIH07XFxcXG4gICAgcG9zdE1lc3NhZ2UobWVzc2FnZSwgY3R4LnRyYW5zZmVyYWJsZXMpO1xcXFxufVxcXFxuZnVuY3Rpb24gYWRkRW1wdHlDbGFzc2lmaWNhdGlvbkJ1ZmZlcihjdHgpIHtcXFxcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoY3R4Lm51bVBvaW50cyAqIDQpO1xcXFxuICAgIGNvbnN0IGNsYXNzaWZpY2F0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN0eC5udW1Qb2ludHM7IGkrKykge1xcXFxuICAgICAgICBjbGFzc2lmaWNhdGlvbnNbaV0gPSAwO1xcXFxuICAgIH1cXFxcbiAgICBjdHguYXR0cmlidXRlQnVmZmVyc1tQb2ludEF0dHJpYnV0ZU5hbWUuQ0xBU1NJRklDQVRJT05dID0ge1xcXFxuICAgICAgICBidWZmZXIsXFxcXG4gICAgICAgIGF0dHJpYnV0ZTogUE9JTlRfQVRUUklCVVRFUy5DTEFTU0lGSUNBVElPTixcXFxcbiAgICB9O1xcXFxufVxcXFxuZnVuY3Rpb24gZGVjb2RlQW5kQWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgY3R4KSB7XFxcXG4gICAgY29uc3QgZGVjb2RlZEF0dHJpYnV0ZSA9IGRlY29kZVBvaW50QXR0cmlidXRlKGF0dHJpYnV0ZSwgY3R4KTtcXFxcbiAgICBpZiAoZGVjb2RlZEF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkKSB7XFxcXG4gICAgICAgIHJldHVybjtcXFxcbiAgICB9XFxcXG4gICAgY3R4LmF0dHJpYnV0ZUJ1ZmZlcnNbZGVjb2RlZEF0dHJpYnV0ZS5hdHRyaWJ1dGUubmFtZV0gPSBkZWNvZGVkQXR0cmlidXRlO1xcXFxuICAgIGN0eC50cmFuc2ZlcmFibGVzLnB1c2goZGVjb2RlZEF0dHJpYnV0ZS5idWZmZXIpO1xcXFxufVxcXFxuZnVuY3Rpb24gZGVjb2RlUG9pbnRBdHRyaWJ1dGUoYXR0cmlidXRlLCBjdHgpIHtcXFxcbiAgICBzd2l0Y2ggKGF0dHJpYnV0ZS5uYW1lKSB7XFxcXG4gICAgICAgIGNhc2UgUG9pbnRBdHRyaWJ1dGVOYW1lLlBPU0lUSU9OX0NBUlRFU0lBTjpcXFxcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVQb3NpdGlvbkNhcnRlc2lhbihhdHRyaWJ1dGUsIGN0eCk7XFxcXG4gICAgICAgIGNhc2UgUG9pbnRBdHRyaWJ1dGVOYW1lLkNPTE9SX1BBQ0tFRDpcXFxcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVDb2xvcihhdHRyaWJ1dGUsIGN0eCk7XFxcXG4gICAgICAgIGNhc2UgUG9pbnRBdHRyaWJ1dGVOYW1lLklOVEVOU0lUWTpcXFxcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVJbnRlbnNpdHkoYXR0cmlidXRlLCBjdHgpO1xcXFxuICAgICAgICBjYXNlIFBvaW50QXR0cmlidXRlTmFtZS5DTEFTU0lGSUNBVElPTjpcXFxcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVDbGFzc2lmaWNhdGlvbihhdHRyaWJ1dGUsIGN0eCk7XFxcXG4gICAgICAgIGNhc2UgUG9pbnRBdHRyaWJ1dGVOYW1lLk5PUk1BTF9TUEhFUkVNQVBQRUQ6XFxcXG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlTm9ybWFsU3BoZXJlTWFwcGVkKGF0dHJpYnV0ZSwgY3R4KTtcXFxcbiAgICAgICAgY2FzZSBQb2ludEF0dHJpYnV0ZU5hbWUuTk9STUFMX09DVDE2OlxcXFxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZU5vcm1hbE9jdDE2KGF0dHJpYnV0ZSwgY3R4KTtcXFxcbiAgICAgICAgY2FzZSBQb2ludEF0dHJpYnV0ZU5hbWUuTk9STUFMOlxcXFxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZU5vcm1hbChhdHRyaWJ1dGUsIGN0eCk7XFxcXG4gICAgICAgIGRlZmF1bHQ6XFxcXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xcXFxuICAgIH1cXFxcbn1cXFxcbmZ1bmN0aW9uIGRlY29kZVBvc2l0aW9uQ2FydGVzaWFuKGF0dHJpYnV0ZSwgY3R4KSB7XFxcXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGN0eC5udW1Qb2ludHMgKiA0ICogMyk7XFxcXG4gICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3R4Lm51bVBvaW50czsgaSsrKSB7XFxcXG4gICAgICAgIGxldCB4O1xcXFxuICAgICAgICBsZXQgeTtcXFxcbiAgICAgICAgbGV0IHo7XFxcXG4gICAgICAgIGlmIChjdHgudmVyc2lvbi5uZXdlclRoYW4oXFxcXCcxLjNcXFxcJykpIHtcXFxcbiAgICAgICAgICAgIHggPSBjdHguZGF0YS5nZXRVaW50MzIoY3R4LmN1cnJlbnRPZmZzZXQgKyBpICogY3R4LnBvaW50QXR0cmlidXRlcy5ieXRlU2l6ZSArIDApICogY3R4LnNjYWxlO1xcXFxuICAgICAgICAgICAgeSA9IGN0eC5kYXRhLmdldFVpbnQzMihjdHguY3VycmVudE9mZnNldCArIGkgKiBjdHgucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplICsgNCkgKiBjdHguc2NhbGU7XFxcXG4gICAgICAgICAgICB6ID0gY3R4LmRhdGEuZ2V0VWludDMyKGN0eC5jdXJyZW50T2Zmc2V0ICsgaSAqIGN0eC5wb2ludEF0dHJpYnV0ZXMuYnl0ZVNpemUgKyA4KSAqIGN0eC5zY2FsZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBlbHNlIHtcXFxcbiAgICAgICAgICAgIHggPSBjdHguZGF0YS5nZXRGbG9hdDMyKGkgKiBjdHgucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplICsgMCkgKyBjdHgubm9kZU9mZnNldFswXTtcXFxcbiAgICAgICAgICAgIHkgPSBjdHguZGF0YS5nZXRGbG9hdDMyKGkgKiBjdHgucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplICsgNCkgKyBjdHgubm9kZU9mZnNldFsxXTtcXFxcbiAgICAgICAgICAgIHogPSBjdHguZGF0YS5nZXRGbG9hdDMyKGkgKiBjdHgucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplICsgOCkgKyBjdHgubm9kZU9mZnNldFsyXTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBwb3NpdGlvbnNbMyAqIGkgKyAwXSA9IHg7XFxcXG4gICAgICAgIHBvc2l0aW9uc1szICogaSArIDFdID0geTtcXFxcbiAgICAgICAgcG9zaXRpb25zWzMgKiBpICsgMl0gPSB6O1xcXFxuICAgICAgICBjdHgubWVhblswXSArPSB4IC8gY3R4Lm51bVBvaW50cztcXFxcbiAgICAgICAgY3R4Lm1lYW5bMV0gKz0geSAvIGN0eC5udW1Qb2ludHM7XFxcXG4gICAgICAgIGN0eC5tZWFuWzJdICs9IHogLyBjdHgubnVtUG9pbnRzO1xcXFxuICAgICAgICBjdHgudGlnaHRCb3hNaW5bMF0gPSBNYXRoLm1pbihjdHgudGlnaHRCb3hNaW5bMF0sIHgpO1xcXFxuICAgICAgICBjdHgudGlnaHRCb3hNaW5bMV0gPSBNYXRoLm1pbihjdHgudGlnaHRCb3hNaW5bMV0sIHkpO1xcXFxuICAgICAgICBjdHgudGlnaHRCb3hNaW5bMl0gPSBNYXRoLm1pbihjdHgudGlnaHRCb3hNaW5bMl0sIHopO1xcXFxuICAgICAgICBjdHgudGlnaHRCb3hNYXhbMF0gPSBNYXRoLm1heChjdHgudGlnaHRCb3hNYXhbMF0sIHgpO1xcXFxuICAgICAgICBjdHgudGlnaHRCb3hNYXhbMV0gPSBNYXRoLm1heChjdHgudGlnaHRCb3hNYXhbMV0sIHkpO1xcXFxuICAgICAgICBjdHgudGlnaHRCb3hNYXhbMl0gPSBNYXRoLm1heChjdHgudGlnaHRCb3hNYXhbMl0sIHopO1xcXFxuICAgIH1cXFxcbiAgICByZXR1cm4geyBidWZmZXIsIGF0dHJpYnV0ZSB9O1xcXFxufVxcXFxuZnVuY3Rpb24gZGVjb2RlQ29sb3IoYXR0cmlidXRlLCBjdHgpIHtcXFxcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoY3R4Lm51bVBvaW50cyAqIDMpO1xcXFxuICAgIGNvbnN0IGNvbG9ycyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdHgubnVtUG9pbnRzOyBpKyspIHtcXFxcbiAgICAgICAgY29sb3JzWzMgKiBpICsgMF0gPSBjdHguZGF0YS5nZXRVaW50OChjdHguY3VycmVudE9mZnNldCArIGkgKiBjdHgucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplICsgMCk7XFxcXG4gICAgICAgIGNvbG9yc1szICogaSArIDFdID0gY3R4LmRhdGEuZ2V0VWludDgoY3R4LmN1cnJlbnRPZmZzZXQgKyBpICogY3R4LnBvaW50QXR0cmlidXRlcy5ieXRlU2l6ZSArIDEpO1xcXFxuICAgICAgICBjb2xvcnNbMyAqIGkgKyAyXSA9IGN0eC5kYXRhLmdldFVpbnQ4KGN0eC5jdXJyZW50T2Zmc2V0ICsgaSAqIGN0eC5wb2ludEF0dHJpYnV0ZXMuYnl0ZVNpemUgKyAyKTtcXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHsgYnVmZmVyLCBhdHRyaWJ1dGUgfTtcXFxcbn1cXFxcbmZ1bmN0aW9uIGRlY29kZUludGVuc2l0eShhdHRyaWJ1dGUsIGN0eCkge1xcXFxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihjdHgubnVtUG9pbnRzICogNCk7XFxcXG4gICAgY29uc3QgaW50ZW5zaXRpZXMgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlcik7XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdHgubnVtUG9pbnRzOyBpKyspIHtcXFxcbiAgICAgICAgaW50ZW5zaXRpZXNbaV0gPSBjdHguZGF0YS5nZXRVaW50MTYoY3R4LmN1cnJlbnRPZmZzZXQgKyBpICogY3R4LnBvaW50QXR0cmlidXRlcy5ieXRlU2l6ZSk7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiB7IGJ1ZmZlciwgYXR0cmlidXRlIH07XFxcXG59XFxcXG5mdW5jdGlvbiBkZWNvZGVDbGFzc2lmaWNhdGlvbihhdHRyaWJ1dGUsIGN0eCkge1xcXFxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihjdHgubnVtUG9pbnRzKTtcXFxcbiAgICBjb25zdCBjbGFzc2lmaWNhdGlvbnMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xcXFxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY3R4Lm51bVBvaW50czsgaisrKSB7XFxcXG4gICAgICAgIGNsYXNzaWZpY2F0aW9uc1tqXSA9IGN0eC5kYXRhLmdldFVpbnQ4KGN0eC5jdXJyZW50T2Zmc2V0ICsgaiAqIGN0eC5wb2ludEF0dHJpYnV0ZXMuYnl0ZVNpemUpO1xcXFxuICAgIH1cXFxcbiAgICByZXR1cm4geyBidWZmZXIsIGF0dHJpYnV0ZSB9O1xcXFxufVxcXFxuZnVuY3Rpb24gZGVjb2RlTm9ybWFsU3BoZXJlTWFwcGVkKGF0dHJpYnV0ZSwgY3R4KSB7XFxcXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGN0eC5udW1Qb2ludHMgKiA0ICogMyk7XFxcXG4gICAgY29uc3Qgbm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKTtcXFxcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGN0eC5udW1Qb2ludHM7IGorKykge1xcXFxuICAgICAgICBjb25zdCBieCA9IGN0eC5kYXRhLmdldFVpbnQ4KGN0eC5jdXJyZW50T2Zmc2V0ICsgaiAqIGN0eC5wb2ludEF0dHJpYnV0ZXMuYnl0ZVNpemUgKyAwKTtcXFxcbiAgICAgICAgY29uc3QgYnkgPSBjdHguZGF0YS5nZXRVaW50OChjdHguY3VycmVudE9mZnNldCArIGogKiBjdHgucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplICsgMSk7XFxcXG4gICAgICAgIGNvbnN0IGV4ID0gYnggLyAyNTU7XFxcXG4gICAgICAgIGNvbnN0IGV5ID0gYnkgLyAyNTU7XFxcXG4gICAgICAgIGxldCBueCA9IGV4ICogMiAtIDE7XFxcXG4gICAgICAgIGxldCBueSA9IGV5ICogMiAtIDE7XFxcXG4gICAgICAgIGxldCBueiA9IDE7XFxcXG4gICAgICAgIGNvbnN0IG53ID0gLTE7XFxcXG4gICAgICAgIGNvbnN0IGwgPSBueCAqIC1ueCArIG55ICogLW55ICsgbnogKiAtbnc7XFxcXG4gICAgICAgIG56ID0gbDtcXFxcbiAgICAgICAgbnggPSBueCAqIE1hdGguc3FydChsKTtcXFxcbiAgICAgICAgbnkgPSBueSAqIE1hdGguc3FydChsKTtcXFxcbiAgICAgICAgbnggPSBueCAqIDI7XFxcXG4gICAgICAgIG55ID0gbnkgKiAyO1xcXFxuICAgICAgICBueiA9IG56ICogMiAtIDE7XFxcXG4gICAgICAgIG5vcm1hbHNbMyAqIGogKyAwXSA9IG54O1xcXFxuICAgICAgICBub3JtYWxzWzMgKiBqICsgMV0gPSBueTtcXFxcbiAgICAgICAgbm9ybWFsc1szICogaiArIDJdID0gbno7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiB7IGJ1ZmZlciwgYXR0cmlidXRlIH07XFxcXG59XFxcXG5mdW5jdGlvbiBkZWNvZGVOb3JtYWxPY3QxNihhdHRyaWJ1dGUsIGN0eCkge1xcXFxuICAgIGNvbnN0IGJ1ZmYgPSBuZXcgQXJyYXlCdWZmZXIoY3R4Lm51bVBvaW50cyAqIDQgKiAzKTtcXFxcbiAgICBjb25zdCBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheShidWZmKTtcXFxcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGN0eC5udW1Qb2ludHM7IGorKykge1xcXFxuICAgICAgICBjb25zdCBieCA9IGN0eC5kYXRhLmdldFVpbnQ4KGN0eC5jdXJyZW50T2Zmc2V0ICsgaiAqIGN0eC5wb2ludEF0dHJpYnV0ZXMuYnl0ZVNpemUgKyAwKTtcXFxcbiAgICAgICAgY29uc3QgYnkgPSBjdHguZGF0YS5nZXRVaW50OChjdHguY3VycmVudE9mZnNldCArIGogKiBjdHgucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplICsgMSk7XFxcXG4gICAgICAgIGNvbnN0IHUgPSAoYnggLyAyNTUpICogMiAtIDE7XFxcXG4gICAgICAgIGNvbnN0IHYgPSAoYnkgLyAyNTUpICogMiAtIDE7XFxcXG4gICAgICAgIGxldCB6ID0gMSAtIE1hdGguYWJzKHUpIC0gTWF0aC5hYnModik7XFxcXG4gICAgICAgIGxldCB4ID0gMDtcXFxcbiAgICAgICAgbGV0IHkgPSAwO1xcXFxuICAgICAgICBpZiAoeiA+PSAwKSB7XFxcXG4gICAgICAgICAgICB4ID0gdTtcXFxcbiAgICAgICAgICAgIHkgPSB2O1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGVsc2Uge1xcXFxuICAgICAgICAgICAgeCA9IC0odiAvIG1hdGhTaWduKHYpIC0gMSkgLyBtYXRoU2lnbih1KTtcXFxcbiAgICAgICAgICAgIHkgPSAtKHUgLyBtYXRoU2lnbih1KSAtIDEpIC8gbWF0aFNpZ24odik7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XFxcXG4gICAgICAgIHggPSB4IC8gbGVuZ3RoO1xcXFxuICAgICAgICB5ID0geSAvIGxlbmd0aDtcXFxcbiAgICAgICAgeiA9IHogLyBsZW5ndGg7XFxcXG4gICAgICAgIG5vcm1hbHNbMyAqIGogKyAwXSA9IHg7XFxcXG4gICAgICAgIG5vcm1hbHNbMyAqIGogKyAxXSA9IHk7XFxcXG4gICAgICAgIG5vcm1hbHNbMyAqIGogKyAyXSA9IHo7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiB7IGJ1ZmZlcjogYnVmZiwgYXR0cmlidXRlIH07XFxcXG59XFxcXG5mdW5jdGlvbiBkZWNvZGVOb3JtYWwoYXR0cmlidXRlLCBjdHgpIHtcXFxcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoY3R4Lm51bVBvaW50cyAqIDQgKiAzKTtcXFxcbiAgICBjb25zdCBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xcXFxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY3R4Lm51bVBvaW50czsgaisrKSB7XFxcXG4gICAgICAgIGNvbnN0IHggPSBjdHguZGF0YS5nZXRGbG9hdDMyKGN0eC5jdXJyZW50T2Zmc2V0ICsgaiAqIGN0eC5wb2ludEF0dHJpYnV0ZXMuYnl0ZVNpemUgKyAwKTtcXFxcbiAgICAgICAgY29uc3QgeSA9IGN0eC5kYXRhLmdldEZsb2F0MzIoY3R4LmN1cnJlbnRPZmZzZXQgKyBqICogY3R4LnBvaW50QXR0cmlidXRlcy5ieXRlU2l6ZSArIDQpO1xcXFxuICAgICAgICBjb25zdCB6ID0gY3R4LmRhdGEuZ2V0RmxvYXQzMihjdHguY3VycmVudE9mZnNldCArIGogKiBjdHgucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplICsgOCk7XFxcXG4gICAgICAgIG5vcm1hbHNbMyAqIGogKyAwXSA9IHg7XFxcXG4gICAgICAgIG5vcm1hbHNbMyAqIGogKyAxXSA9IHk7XFxcXG4gICAgICAgIG5vcm1hbHNbMyAqIGogKyAyXSA9IHo7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiB7IGJ1ZmZlciwgYXR0cmlidXRlIH07XFxcXG59XFxcXG5cXFxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4vc3JjL3dvcmtlcnMvYmluYXJ5LWRlY29kZXIud29ya2VyLmpzXFxcXG5cXFxcblxcXFxuLyplc2xpbnQtZGlzYWJsZSAqL1xcXFxub25tZXNzYWdlID0gaGFuZGxlTWVzc2FnZTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxcXG4nKX19LF9fd2VicGFja19leHBvcnRzX189e307X193ZWJwYWNrX21vZHVsZXNfX1s3MTddKCl9KSgpO1wiLCBcIldvcmtlclwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91\n')},512:module=>{eval('\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor]("data:application/javascript,".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error("Inline worker is not supported");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanM/ZWNkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmLCBuby11c2UtYmVmb3JlLWRlZmluZSwgbmV3LWNhcCAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgd29ya2VyQ29uc3RydWN0b3IsIHdvcmtlck9wdGlvbnMsIHVybCkge1xuICB2YXIgZ2xvYmFsU2NvcGUgPSBzZWxmIHx8IHdpbmRvdztcblxuICB0cnkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgYmxvYjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gTmV3IEFQSVxuICAgICAgICBibG9iID0gbmV3IGdsb2JhbFNjb3BlLkJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gQmxvYkJ1aWxkZXIgPSBEZXByZWNhdGVkLCBidXQgd2lkZWx5IGltcGxlbWVudGVkXG4gICAgICAgIHZhciBCbG9iQnVpbGRlciA9IGdsb2JhbFNjb3BlLkJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLldlYktpdEJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLk1vekJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLk1TQmxvYkJ1aWxkZXI7XG4gICAgICAgIGJsb2IgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgICAgICAgYmxvYi5hcHBlbmQoY29udGVudCk7XG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIFVSTCA9IGdsb2JhbFNjb3BlLlVSTCB8fCBnbG9iYWxTY29wZS53ZWJraXRVUkw7XG4gICAgICB2YXIgb2JqZWN0VVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgIHZhciB3b3JrZXIgPSBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKG9iamVjdFVSTCwgd29ya2VyT3B0aW9ucyk7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVSTCk7XG4gICAgICByZXR1cm4gd29ya2VyO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKFwiZGF0YTphcHBsaWNhdGlvbi9qYXZhc2NyaXB0LFwiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoY29udGVudCkpLCB3b3JrZXJPcHRpb25zKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJJbmxpbmUgd29ya2VyIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0odXJsLCB3b3JrZXJPcHRpb25zKTtcbiAgfVxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///512\n')},604:g=>{g.exports=__WEBPACK_EXTERNAL_MODULE__604__}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var t=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=g=>{var I=g&&g.__esModule?()=>g.default:()=>g;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(g,I)=>{for(var t in I)__webpack_require__.o(I,t)&&!__webpack_require__.o(g,t)&&Object.defineProperty(g,t,{enumerable:!0,get:I[t]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(238);return __webpack_exports__})()));
\ No newline at end of file
+!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I(require("three")):"function"==typeof define&&define.amd?define("potree",["three"],I):"object"==typeof exports?exports.potree=I(require("three")):g.potree=I(g.three)}(self,(__WEBPACK_EXTERNAL_MODULE__604__=>(()=>{"use strict";var __webpack_modules__={414:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\nuniform mat4 projectionMatrix;\\n\\nuniform float screenWidth;\\nuniform float screenHeight;\\n\\nuniform sampler2D map;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tfloat dx = 1.0 / screenWidth;\\n\\tfloat dy = 1.0 / screenHeight;\\n\\n\\tvec3 color = vec3(0.0, 0.0, 0.0);\\n\\tcolor += texture2D(map, vUv + vec2(-dx, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx, -dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(-dx,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx,   0)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(-dx,  dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(  0,  dy)).rgb;\\n\\tcolor += texture2D(map, vUv + vec2(+dx,  dy)).rgb;\\n    \\n\\tcolor = color / 9.0;\\n\\t\\n\\tgl_FragColor = vec4(color, 1.0);\\n\\t\\n\\t\\n}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL3NyYy9tYXRlcmlhbHMvc2hhZGVycy9ibHVyLmZyYWc/MjI5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgaW50O1xcblxcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnVuaWZvcm0gZmxvYXQgc2NyZWVuV2lkdGg7XFxudW5pZm9ybSBmbG9hdCBzY3JlZW5IZWlnaHQ7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcblxcblxcdGZsb2F0IGR4ID0gMS4wIC8gc2NyZWVuV2lkdGg7XFxuXFx0ZmxvYXQgZHkgPSAxLjAgLyBzY3JlZW5IZWlnaHQ7XFxuXFxuXFx0dmVjMyBjb2xvciA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsIC1keSkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgLWR5KSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAtZHkpKS5yZ2I7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsICAgMCkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgICAwKSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAgIDApKS5yZ2I7XFxuXFx0Y29sb3IgKz0gdGV4dHVyZTJEKG1hcCwgdlV2ICsgdmVjMigtZHgsICBkeSkpLnJnYjtcXG5cXHRjb2xvciArPSB0ZXh0dXJlMkQobWFwLCB2VXYgKyB2ZWMyKCAgMCwgIGR5KSkucmdiO1xcblxcdGNvbG9yICs9IHRleHR1cmUyRChtYXAsIHZVdiArIHZlYzIoK2R4LCAgZHkpKS5yZ2I7XFxuICAgIFxcblxcdGNvbG9yID0gY29sb3IgLyA5LjA7XFxuXFx0XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgMS4wKTtcXG5cXHRcXG5cXHRcXG59XCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///414\n')},575:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n\\n    gl_Position =   projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc1LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL3NyYy9tYXRlcmlhbHMvc2hhZGVycy9ibHVyLnZlcnQ/NWRiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgaW50O1xcblxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZVdiA9IHV2O1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9ICAgcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxufVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///575\n')},168:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\n#if defined paraboloid_point_shape\\n\\t#extension GL_EXT_frag_depth : enable\\n#endif\\n\\nuniform mat4 viewMatrix;\\nuniform vec3 cameraPosition;\\n\\nuniform mat4 projectionMatrix;\\nuniform float opacity;\\n\\nuniform float blendHardness;\\nuniform float blendDepthSupplement;\\nuniform float fov;\\nuniform float spacing;\\nuniform float pcIndex;\\nuniform float screenWidth;\\nuniform float screenHeight;\\n\\nuniform sampler2D depthMap;\\n\\n#if defined (clip_horizontally) || defined (clip_vertically)\\n\\tuniform vec4 clipExtent;\\n#endif\\n\\n#ifdef use_texture_blending\\n\\tuniform sampler2D backgroundMap;\\n#endif\\n\\n\\n#ifdef use_point_cloud_mixing\\n\\tuniform int pointCloudMixingMode;\\n\\tuniform float pointCloudID;\\n\\tuniform float pointCloudMixAngle;\\n\\tuniform float stripeDistanceX;\\n\\tuniform float stripeDistanceY;\\n\\n\\tuniform float stripeDivisorX;\\n\\tuniform float stripeDivisorY;\\n#endif\\n\\n#ifdef highlight_point\\n\\tuniform vec4 highlightedPointColor;\\n#endif\\n\\nvarying vec3 vColor;\\n\\n#if !defined(color_type_point_index)\\n\\tvarying float vOpacity;\\n#endif\\n\\n#if defined(weighted_splats)\\n\\tvarying float vLinearDepth;\\n#endif\\n\\n#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\tvarying float vLogDepth;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\tvarying float vRadius;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\tvarying vec3 vNormal;\\n#endif\\n\\n#ifdef highlight_point\\n\\tvarying float vHighlight;\\n#endif\\n\\nfloat specularStrength = 1.0;\\n\\nvoid main() {\\n\\tvec3 color = vColor;\\n\\tfloat depth = gl_FragCoord.z;\\n\\n\\t#if defined (clip_horizontally) || defined (clip_vertically)\\n\\tvec2 ndc = vec2((gl_FragCoord.x / screenWidth), 1.0 - (gl_FragCoord.y / screenHeight));\\n\\n\\tif(step(clipExtent.x, ndc.x) * step(ndc.x, clipExtent.z) < 1.0)\\n\\t{\\n\\t\\tdiscard;\\n\\t}\\n\\n\\tif(step(clipExtent.y, ndc.y) * step(ndc.y, clipExtent.w) < 1.0)\\n\\t{\\n\\t\\tdiscard;\\n\\t}\\n\\t#endif  \\n\\n\\t#if defined(circle_point_shape) || defined(paraboloid_point_shape) || defined (weighted_splats)\\n\\t\\tfloat u = 2.0 * gl_PointCoord.x - 1.0;\\n\\t\\tfloat v = 2.0 * gl_PointCoord.y - 1.0;\\n\\t#endif\\n\\n\\t#if defined(circle_point_shape) || defined (weighted_splats)\\n\\t\\tfloat cc = u*u + v*v;\\n\\t\\tif(cc > 1.0){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t\\tvec2 uv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\\n\\t\\tfloat sDepth = texture2D(depthMap, uv).r;\\n\\t\\tif(vLinearDepth > sDepth + vRadius + blendDepthSupplement){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#if defined color_type_point_index\\n\\t\\tgl_FragColor = vec4(color, pcIndex / 255.0);\\n\\t#else\\n\\t\\tgl_FragColor = vec4(color, vOpacity);\\n\\t#endif\\n\\n\\t#ifdef use_point_cloud_mixing\\n\\t\\tbool discardFragment = false;\\n\\n\\t\\tif (pointCloudMixingMode == 1) {  // Checkboard\\n\\t\\t\\tfloat vPointCloudID = pointCloudID > 10. ? pointCloudID/10.: pointCloudID;\\n\\t\\t\\tdiscardFragment = mod(gl_FragCoord.x, vPointCloudID) > 0.5 && mod(gl_FragCoord.y, vPointCloudID) > 0.5;\\n\\t\\t}\\n\\t\\telse if (pointCloudMixingMode == 2) {  // Stripes\\n\\t\\t\\tfloat angle = pointCloudMixAngle * pointCloudID / 180.;\\n\\t\\t\\tfloat u = cos(angle) * gl_FragCoord.x + sin(angle) * gl_FragCoord.y;\\n\\t\\t\\tfloat v = -sin(angle) * gl_FragCoord.x + cos(angle) * gl_FragCoord.y;\\n\\n\\t\\t\\tdiscardFragment = mod(u, stripeDistanceX) >= stripeDistanceX/stripeDivisorX && mod(v, stripeDistanceY) >= stripeDistanceY/stripeDivisorY;\\n\\t\\t}\\n\\t\\tif (discardFragment) {\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t#endif\\n\\n\\t#ifdef use_texture_blending\\n\\t\\tvec2 vUv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\\n\\n\\t\\tvec4 tColor = texture2D(backgroundMap, vUv);\\n\\t\\tgl_FragColor = vec4(vOpacity * color, 1.) + vec4((1. - vOpacity) * tColor.rgb, 0.);\\n\\t#endif\\n\\n\\t#if defined(color_type_phong)\\n\\t\\t#if MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0\\n\\t\\t\\tvec3 normal = normalize( vNormal );\\n\\t\\t\\tnormal.z = abs(normal.z);\\n\\n\\t\\t\\tvec3 viewPosition = normalize( vViewPosition );\\n\\t\\t#endif\\n\\n\\t\\t// code taken from three.js phong light fragment shader\\n\\n\\t\\t#if MAX_POINT_LIGHTS > 0\\n\\n\\t\\t\\tvec3 pointDiffuse = vec3( 0.0 );\\n\\t\\t\\tvec3 pointSpecular = vec3( 0.0 );\\n\\n\\t\\t\\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\t\\t\\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\\n\\t\\t\\t\\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\\n\\n\\t\\t\\t\\tfloat lDistance = 1.0;\\n\\t\\t\\t\\tif ( pointLightDistance[ i ] > 0.0 )\\n\\t\\t\\t\\t\\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\\n\\n\\t\\t\\t\\tlVector = normalize( lVector );\\n\\n\\t\\t\\t\\t\\t\\t// diffuse\\n\\n\\t\\t\\t\\tfloat dotProduct = dot( normal, lVector );\\n\\n\\t\\t\\t\\t#ifdef WRAP_AROUND\\n\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\\t\\t\\t\\t\\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\\n\\n\\t\\t\\t\\t// specular\\n\\n\\t\\t\\t\\tvec3 pointHalfVector = normalize( lVector + viewPosition );\\n\\t\\t\\t\\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\\n\\t\\t\\t\\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\\n\\n\\t\\t\\t\\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\\t\\t\\t\\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\\n\\t\\t\\t\\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\\n\\t\\t\\t\\tpointSpecular = vec3(0.0, 0.0, 0.0);\\n\\t\\t\\t}\\n\\n\\t\\t#endif\\n\\n\\t\\t#if MAX_DIR_LIGHTS > 0\\n\\n\\t\\t\\tvec3 dirDiffuse = vec3( 0.0 );\\n\\t\\t\\tvec3 dirSpecular = vec3( 0.0 );\\n\\n\\t\\t\\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\t\\t\\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\\n\\t\\t\\t\\tvec3 dirVector = normalize( lDirection.xyz );\\n\\n\\t\\t\\t\\t\\t\\t// diffuse\\n\\n\\t\\t\\t\\tfloat dotProduct = dot( normal, dirVector );\\n\\n\\t\\t\\t\\t#ifdef WRAP_AROUND\\n\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\\t\\t\\t\\t\\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\\n\\n\\t\\t\\t\\t// specular\\n\\n\\t\\t\\t\\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\\n\\t\\t\\t\\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\\n\\t\\t\\t\\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\\n\\n\\t\\t\\t\\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\\t\\t\\t\\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\\n\\t\\t\\t\\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\\n\\t\\t\\t}\\n\\n\\t\\t#endif\\n\\n\\t\\tvec3 totalDiffuse = vec3( 0.0 );\\n\\t\\tvec3 totalSpecular = vec3( 0.0 );\\n\\n\\t\\t#if MAX_POINT_LIGHTS > 0\\n\\n\\t\\t\\ttotalDiffuse += pointDiffuse;\\n\\t\\t\\ttotalSpecular += pointSpecular;\\n\\n\\t\\t#endif\\n\\n\\t\\t#if MAX_DIR_LIGHTS > 0\\n\\n\\t\\t\\ttotalDiffuse += dirDiffuse;\\n\\t\\t\\ttotalSpecular += dirSpecular;\\n\\n\\t\\t#endif\\n\\n\\t\\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\\n\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t    //float w = pow(1.0 - (u*u + v*v), blendHardness);\\n\\n\\t\\tfloat wx = 2.0 * length(2.0 * gl_PointCoord - 1.0);\\n\\t\\tfloat w = exp(-wx * wx * 0.5);\\n\\n\\t\\t//float distance = length(2.0 * gl_PointCoord - 1.0);\\n\\t\\t//float w = exp( -(distance * distance) / blendHardness);\\n\\n\\t\\tgl_FragColor.rgb = gl_FragColor.rgb * w;\\n\\t\\tgl_FragColor.a = w;\\n\\t#endif\\n\\n\\t#if defined paraboloid_point_shape\\n\\t\\tfloat wi = 0.0 - ( u*u + v*v);\\n\\t\\tvec4 pos = vec4(vViewPosition, 1.0);\\n\\t\\tpos.z += wi * vRadius;\\n\\t\\tfloat linearDepth = -pos.z;\\n\\t\\tpos = projectionMatrix * pos;\\n\\t\\tpos = pos / pos.w;\\n\\t\\tfloat expDepth = pos.z;\\n\\t\\tdepth = (pos.z + 1.0) / 2.0;\\n\\t\\tgl_FragDepthEXT = depth;\\n\\n\\t\\t#if defined(color_type_depth)\\n\\t\\t\\tgl_FragColor.r = linearDepth;\\n\\t\\t\\tgl_FragColor.g = expDepth;\\n\\t\\t#endif\\n\\n\\t\\t#if defined(use_edl)\\n\\t\\t\\tgl_FragColor.a = log2(linearDepth);\\n\\t\\t#endif\\n\\n\\t#else\\n\\t\\t#if defined(use_edl)\\n\\t\\t\\tgl_FragColor.a = vLogDepth;\\n\\t\\t#endif\\n\\t#endif\\n\\n\\t#ifdef highlight_point\\n\\t\\tif (vHighlight > 0.0) {\\n\\t\\t\\tgl_FragColor = highlightedPointColor;\\n\\t\\t}\\n\\t#endif\\n}\\n");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///168\n')},245:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("precision highp float;\\nprecision highp int;\\n\\n#define max_clip_boxes 30\\n\\nattribute vec3 position;\\nattribute vec3 color;\\n\\n#ifdef color_rgba\\n\\tattribute vec4 rgba;\\n#endif\\n\\nattribute vec3 normal;\\nattribute float intensity;\\nattribute float classification;\\nattribute float returnNumber;\\nattribute float numberOfReturns;\\nattribute float pointSourceID;\\nattribute vec4 indices;\\nattribute vec2 uv;\\n\\nuniform mat4 modelMatrix;\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\n\\nuniform float pcIndex;\\n\\nuniform float screenWidth;\\nuniform float screenHeight;\\nuniform float fov;\\nuniform float spacing;\\n\\n#if defined use_clip_box\\n\\tuniform mat4 clipBoxes[max_clip_boxes];\\n\\tuniform vec3 clipHighlightColors[max_clip_boxes];\\n#endif\\n\\nuniform float heightMin;\\nuniform float heightMax;\\nuniform float size; // pixel size factor\\nuniform float minSize; // minimum pixel size\\nuniform float maxSize; // maximum pixel size\\nuniform float octreeSize;\\nuniform vec3 bbSize;\\nuniform vec3 uColor;\\nuniform float opacity;\\nuniform float clipBoxCount;\\nuniform float level;\\nuniform float vnStart;\\nuniform bool isLeafNode;\\n\\nuniform float filterByNormalThreshold;\\nuniform vec2 intensityRange;\\nuniform float opacityAttenuation;\\nuniform float intensityGamma;\\nuniform float intensityContrast;\\nuniform float intensityBrightness;\\nuniform float rgbGamma;\\nuniform float rgbContrast;\\nuniform float rgbBrightness;\\nuniform float transition;\\nuniform float wRGB;\\nuniform float wIntensity;\\nuniform float wElevation;\\nuniform float wClassification;\\nuniform float wReturnNumber;\\nuniform float wSourceID;\\n\\nuniform sampler2D visibleNodes;\\nuniform sampler2D gradient;\\nuniform sampler2D classificationLUT;\\nuniform sampler2D depthMap;\\n\\n#ifdef use_texture_blending\\n\\tuniform sampler2D backgroundMap;\\n#endif\\n\\n#ifdef use_point_cloud_mixing\\n\\tuniform int pointCloudMixingMode;\\n\\tuniform float pointCloudID;\\n\\n\\tuniform float pointCloudMixAngle;\\n\\tuniform float stripeDistanceX;\\n\\tuniform float stripeDistanceY;\\n\\n\\tuniform float stripeDivisorX;\\n\\tuniform float stripeDivisorY;\\n#endif\\n\\n#ifdef highlight_point\\n\\tuniform vec3 highlightedPointCoordinate;\\n\\tuniform bool enablePointHighlighting;\\n\\tuniform float highlightedPointScale;\\n#endif\\n\\n#ifdef use_filter_by_normal\\n\\tuniform int normalFilteringMode;\\n#endif\\n\\nvarying vec3 vColor;\\n\\n#if !defined(color_type_point_index)\\n\\tvarying float vOpacity;\\n#endif\\n\\n#if defined(weighted_splats)\\n\\tvarying float vLinearDepth;\\n#endif\\n\\n#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\tvarying float vLogDepth;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\tvarying float vRadius;\\n#endif\\n\\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\tvarying vec3 vNormal;\\n#endif\\n\\n#ifdef highlight_point\\n\\tvarying float vHighlight;\\n#endif\\n\\n// ---------------------\\n// OCTREE\\n// ---------------------\\n\\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)\\n\\n/**\\n * Rounds the specified number to the closest integer.\\n */\\nfloat round(float number){\\n\\treturn floor(number + 0.5);\\n}\\n\\n/**\\n * Gets the number of 1-bits up to inclusive index position.\\n *\\n * number is treated as if it were an integer in the range 0-255\\n */\\nint numberOfOnes(int number, int index) {\\n\\tint numOnes = 0;\\n\\tint tmp = 128;\\n\\tfor (int i = 7; i >= 0; i--) {\\n\\n\\t\\tif (number >= tmp) {\\n\\t\\t\\tnumber = number - tmp;\\n\\n\\t\\t\\tif (i <= index) {\\n\\t\\t\\t\\tnumOnes++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\ttmp = tmp / 2;\\n\\t}\\n\\n\\treturn numOnes;\\n}\\n\\n/**\\n * Checks whether the bit at index is 1.0\\n *\\n * number is treated as if it were an integer in the range 0-255\\n */\\nbool isBitSet(int number, int index){\\n\\n\\t// weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0\\n\\tint powi = 1;\\n\\tif (index == 0) {\\n\\t\\tpowi = 1;\\n\\t} else if (index == 1) {\\n\\t\\tpowi = 2;\\n\\t} else if (index == 2) {\\n\\t\\tpowi = 4;\\n\\t} else if (index == 3) {\\n\\t\\tpowi = 8;\\n\\t} else if (index == 4) {\\n\\t\\tpowi = 16;\\n\\t} else if (index == 5) {\\n\\t\\tpowi = 32;\\n\\t} else if (index == 6) {\\n\\t\\tpowi = 64;\\n\\t} else if (index == 7) {\\n\\t\\tpowi = 128;\\n\\t}\\n\\n\\tint ndp = number / powi;\\n\\n\\treturn mod(float(ndp), 2.0) != 0.0;\\n}\\n\\n/**\\n * Gets the the LOD at the point position.\\n */\\nfloat getLOD() {\\n\\tvec3 offset = vec3(0.0, 0.0, 0.0);\\n\\tint iOffset = int(vnStart);\\n\\tfloat depth = level;\\n\\n\\tfor (float i = 0.0; i <= 30.0; i++) {\\n\\t\\tfloat nodeSizeAtLevel = octreeSize  / pow(2.0, i + level + 0.0);\\n\\n\\t\\tvec3 index3d = (position-offset) / nodeSizeAtLevel;\\n\\t\\tindex3d = floor(index3d + 0.5);\\n\\t\\tint index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));\\n\\n\\t\\tvec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));\\n\\t\\tint mask = int(round(value.r * 255.0));\\n\\n\\t\\tif (isBitSet(mask, index)) {\\n\\t\\t\\t// there are more visible child nodes at this position\\n\\t\\t\\tint advanceG = int(round(value.g * 255.0)) * 256;\\n\\t\\t\\tint advanceB = int(round(value.b * 255.0));\\n\\t\\t\\tint advanceChild = numberOfOnes(mask, index - 1);\\n\\t\\t\\tint advance = advanceG + advanceB + advanceChild;\\n\\n\\t\\t\\tiOffset = iOffset + advance;\\n\\n\\t\\t\\tdepth++;\\n\\t\\t} else {\\n\\t\\t\\treturn value.a * 255.0; // no more visible child nodes at this position\\n\\t\\t}\\n\\n\\t\\toffset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;\\n\\t}\\n\\n\\treturn depth;\\n}\\n\\nfloat getPointSizeAttenuation() {\\n\\treturn 0.5 * pow(2.0, getLOD());\\n}\\n\\n#endif\\n\\n// ---------------------\\n// KD-TREE\\n// ---------------------\\n\\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)\\n\\nfloat getLOD() {\\n\\tvec3 offset = vec3(0.0, 0.0, 0.0);\\n\\tfloat intOffset = 0.0;\\n\\tfloat depth = 0.0;\\n\\n\\tvec3 size = bbSize;\\n\\tvec3 pos = position;\\n\\n\\tfor (float i = 0.0; i <= 1000.0; i++) {\\n\\n\\t\\tvec4 value = texture2D(visibleNodes, vec2(intOffset / 2048.0, 0.0));\\n\\n\\t\\tint children = int(value.r * 255.0);\\n\\t\\tfloat next = value.g * 255.0;\\n\\t\\tint split = int(value.b * 255.0);\\n\\n\\t\\tif (next == 0.0) {\\n\\t\\t \\treturn depth;\\n\\t\\t}\\n\\n\\t\\tvec3 splitv = vec3(0.0, 0.0, 0.0);\\n\\t\\tif (split == 1) {\\n\\t\\t\\tsplitv.x = 1.0;\\n\\t\\t} else if (split == 2) {\\n\\t\\t \\tsplitv.y = 1.0;\\n\\t\\t} else if (split == 4) {\\n\\t\\t \\tsplitv.z = 1.0;\\n\\t\\t}\\n\\n\\t\\tintOffset = intOffset + next;\\n\\n\\t\\tfloat factor = length(pos * splitv / size);\\n\\t\\tif (factor < 0.5) {\\n\\t\\t \\t// left\\n\\t\\t\\tif (children == 0 || children == 2) {\\n\\t\\t\\t\\treturn depth;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// right\\n\\t\\t\\tpos = pos - size * splitv * 0.5;\\n\\t\\t\\tif (children == 0 || children == 1) {\\n\\t\\t\\t\\treturn depth;\\n\\t\\t\\t}\\n\\t\\t\\tif (children == 3) {\\n\\t\\t\\t\\tintOffset = intOffset + 1.0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsize = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);\\n\\n\\t\\tdepth++;\\n\\t}\\n\\n\\n\\treturn depth;\\n}\\n\\nfloat getPointSizeAttenuation() {\\n\\treturn 0.5 * pow(1.3, getLOD());\\n}\\n\\n#endif\\n\\n// formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/\\nfloat getContrastFactor(float contrast) {\\n\\treturn (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);\\n}\\n\\nvec3 getRGB() {\\n\\t\\n\\t#ifdef color_rgba\\n\\t\\tvec3 rgb = rgba.rgb;\\n\\t#else\\t\\n\\t\\tvec3 rgb = color;\\n\\t#endif\\t\\t\\n\\n\\t#if defined(use_rgb_gamma_contrast_brightness)\\n\\t\\trgb = pow(rgb, vec3(rgbGamma));\\n\\t\\trgb = rgb + rgbBrightness;\\n\\t\\trgb = (rgb - 0.5) * getContrastFactor(rgbContrast) + 0.5;\\n\\t\\trgb = clamp(rgb, 0.0, 1.0);\\n\\t\\treturn rgb;\\n\\t#else\\n\\t\\treturn rgb;\\n\\t#endif\\n}\\n\\nfloat getIntensity() {\\n\\tfloat w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);\\n\\tw = pow(w, intensityGamma);\\n\\tw = w + intensityBrightness;\\n\\tw = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;\\n\\tw = clamp(w, 0.0, 1.0);\\n\\n\\treturn w;\\n}\\n\\nvec3 getElevation() {\\n\\tvec4 world = modelMatrix * vec4( position, 1.0 );\\n\\tfloat w = (world.z - heightMin) / (heightMax-heightMin);\\n\\tvec3 cElevation = texture2D(gradient, vec2(w,1.0-w)).rgb;\\n\\n\\treturn cElevation;\\n}\\n\\nvec4 getClassification() {\\n\\tvec2 uv = vec2(classification / 255.0, 0.5);\\n\\tvec4 classColor = texture2D(classificationLUT, uv);\\n\\n\\treturn classColor;\\n}\\n\\nvec3 getReturnNumber() {\\n\\tif (numberOfReturns == 1.0) {\\n\\t\\treturn vec3(1.0, 1.0, 0.0);\\n\\t} else {\\n\\t\\tif (returnNumber == 1.0) {\\n\\t\\t\\treturn vec3(1.0, 0.0, 0.0);\\n\\t\\t} else if (returnNumber == numberOfReturns) {\\n\\t\\t\\treturn vec3(0.0, 0.0, 1.0);\\n\\t\\t} else {\\n\\t\\t\\treturn vec3(0.0, 1.0, 0.0);\\n\\t\\t}\\n\\t}\\n}\\n\\nvec3 getSourceID() {\\n\\tfloat w = mod(pointSourceID, 10.0) / 10.0;\\n\\treturn texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n}\\n\\nvec3 getCompositeColor() {\\n\\tvec3 c;\\n\\tfloat w;\\n\\n\\tc += wRGB * getRGB();\\n\\tw += wRGB;\\n\\n\\tc += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);\\n\\tw += wIntensity;\\n\\n\\tc += wElevation * getElevation();\\n\\tw += wElevation;\\n\\n\\tc += wReturnNumber * getReturnNumber();\\n\\tw += wReturnNumber;\\n\\n\\tc += wSourceID * getSourceID();\\n\\tw += wSourceID;\\n\\n\\tvec4 cl = wClassification * getClassification();\\n\\tc += cl.a * cl.rgb;\\n\\tw += wClassification * cl.a;\\n\\n\\tc = c / w;\\n\\n\\tif (w == 0.0) {\\n\\t\\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\\n\\t}\\n\\n\\treturn c;\\n}\\n\\nvoid main() {\\n\\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\\n\\t\\tvViewPosition = mvPosition.xyz;\\n\\t#endif\\n\\n\\t#if defined weighted_splats\\n\\t\\tvLinearDepth = gl_Position.w;\\n\\t#endif\\n\\n\\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\\n\\t\\tvNormal = normalize(normalMatrix * normal);\\n\\t#endif\\n\\n\\t#if !defined(paraboloid_point_shape) && defined(use_edl)\\n\\t\\tvLogDepth = log2(-mvPosition.z);\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// POINT SIZE\\n\\t// ---------------------\\n\\n\\tfloat pointSize = 1.0;\\n\\tfloat slope = tan(fov / 2.0);\\n\\tfloat projFactor =  -0.5 * screenHeight / (slope * mvPosition.z);\\n\\n\\t#if defined fixed_point_size\\n\\t\\tpointSize = size;\\n\\t#elif defined attenuated_point_size\\n\\t\\tpointSize = size * spacing * projFactor;\\n\\t#elif defined adaptive_point_size\\n\\t\\tfloat worldSpaceSize = 2.0 * size * spacing / getPointSizeAttenuation();\\n\\t\\tpointSize = worldSpaceSize * projFactor;\\n\\t#endif\\n\\n\\tpointSize = max(minSize, pointSize);\\n\\tpointSize = min(maxSize, pointSize);\\n\\n\\t#if defined(weighted_splats) || defined(paraboloid_point_shape)\\n\\t\\tvRadius = pointSize / projFactor;\\n\\t#endif\\n\\n\\tgl_PointSize = pointSize;\\n\\n\\t// ---------------------\\n\\t// HIGHLIGHTING\\n\\t// ---------------------\\n\\n\\t#ifdef highlight_point\\n\\t\\tvec4 mPosition = modelMatrix * vec4(position, 1.0);\\n\\t\\tif (enablePointHighlighting && abs(mPosition.x - highlightedPointCoordinate.x) < 0.0001 &&\\n\\t\\t\\tabs(mPosition.y - highlightedPointCoordinate.y) < 0.0001 &&\\n\\t\\t\\tabs(mPosition.z - highlightedPointCoordinate.z) < 0.0001) {\\n\\t\\t\\tvHighlight = 1.0;\\n\\t\\t\\tgl_PointSize = pointSize * highlightedPointScale;\\n\\t\\t} else {\\n\\t\\t\\tvHighlight = 0.0;\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// OPACITY\\n\\t// ---------------------\\n\\n\\t#ifndef color_type_point_index\\n\\t\\t#ifdef attenuated_opacity\\n\\t\\t\\tvOpacity = opacity * exp(-length(-mvPosition.xyz) / opacityAttenuation);\\n\\t\\t#else\\n\\t\\t\\tvOpacity = opacity;\\n\\t\\t#endif\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// FILTERING\\n\\t// ---------------------\\n\\n\\t#ifdef use_filter_by_normal\\n\\t\\tbool discardPoint = false;\\n\\t\\t// Absolute normal filtering\\n\\t\\tif (normalFilteringMode == 1) {\\n\\t\\t\\tdiscardPoint = (abs((modelViewMatrix * vec4(normal, 0.0)).z) > filterByNormalThreshold);\\n\\t\\t}\\n\\t\\t// less than equal to\\n\\t\\telse if (normalFilteringMode == 2) {\\n\\t\\t\\tdiscardPoint = (modelViewMatrix * vec4(normal, 0.0)).z <= filterByNormalThreshold;\\n\\t\\t\\t}\\n\\t\\t// greater than\\n\\t\\telse if(normalFilteringMode == 3) {\\n\\t\\t\\tdiscardPoint = (modelViewMatrix * vec4(normal, 0.0)).z > filterByNormalThreshold;\\n\\t\\t\\t}\\n\\n\\t\\tif (discardPoint)\\n\\t\\t{\\n\\t\\t\\tgl_Position = vec4(0.0, 0.0, 2.0, 1.0);\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// POINT COLOR\\n\\t// ---------------------\\n\\n\\t#ifdef color_type_rgb\\n\\t\\tvColor = getRGB();\\n\\t#elif defined color_type_height\\n\\t\\tvColor = getElevation();\\n\\t#elif defined color_type_rgb_height\\n\\t\\tvec3 cHeight = getElevation();\\n\\t\\tvColor = (1.0 - transition) * getRGB() + transition * cHeight;\\n\\t#elif defined color_type_depth\\n\\t\\tfloat linearDepth = -mvPosition.z ;\\n\\t\\tfloat expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\\n\\t\\tvColor = vec3(linearDepth, expDepth, 0.0);\\n\\t#elif defined color_type_intensity\\n\\t\\tfloat w = getIntensity();\\n\\t\\tvColor = vec3(w, w, w);\\n\\t#elif defined color_type_intensity_gradient\\n\\t\\tfloat w = getIntensity();\\n\\t\\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n\\t#elif defined color_type_color\\n\\t\\tvColor = uColor;\\n\\t#elif defined color_type_lod\\n\\tfloat w = getLOD() / 10.0;\\n\\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\\n\\t#elif defined color_type_point_index\\n\\t\\tvColor = indices.rgb;\\n\\t#elif defined color_type_classification\\n\\t  vec4 cl = getClassification();\\n\\t\\tvColor = cl.rgb;\\n\\t#elif defined color_type_return_number\\n\\t\\tvColor = getReturnNumber();\\n\\t#elif defined color_type_source\\n\\t\\tvColor = getSourceID();\\n\\t#elif defined color_type_normal\\n\\t\\tvColor = (modelMatrix * vec4(normal, 0.0)).xyz;\\n\\t#elif defined color_type_phong\\n\\t\\tvColor = color;\\n\\t#elif defined color_type_composite\\n\\t\\tvColor = getCompositeColor();\\n\\t#endif\\n\\n\\t#if !defined color_type_composite && defined color_type_classification\\n\\t\\tif (cl.a == 0.0) {\\n\\t\\t\\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t#endif\\n\\n\\t// ---------------------\\n\\t// CLIPPING\\n\\t// ---------------------\\n\\n\\t#if defined use_clip_box\\n\\t\\tbool insideAny = false;\\n\\t\\tvec3 highlightColor = vec3(0.0);\\n\\t\\tfor (int i = 0; i < max_clip_boxes; i++) {\\n\\t\\t\\tif (i == int(clipBoxCount)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec4 clipPosition = clipBoxes[i] * modelMatrix * vec4(position, 1.0);\\n\\t\\t\\tbool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;\\n\\t\\t\\tinside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;\\n\\t\\t\\tinside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;\\n\\t\\t\\tinsideAny = insideAny || inside;\\n\\t\\t\\tif (inside) {\\n\\t\\t\\t\\thighlightColor += clipHighlightColors[i].xyz;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!insideAny) {\\n\\t\\t\\t#if defined clip_outside\\n\\t\\t\\t\\tgl_Position = vec4(1000.0, 1000.0, 1000.0, 1.0);\\n\\t\\t\\t#elif defined clip_highlight_inside && !defined(color_type_depth)\\n\\t\\t\\t\\tfloat c = (vColor.r + vColor.g + vColor.b) / 6.0;\\n\\t\\t\\t#endif\\n\\t\\t} else {\\n\\t\\t\\t#if defined clip_highlight_inside\\n\\t\\t\\t\\tvColor.rgb += highlightColor; \\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#endif\\n}\\n");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///245\n')},238:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  BlurMaterial: () => (/* reexport */ BlurMaterial),\n  ClipMode: () => (/* reexport */ ClipMode),\n  GRAYSCALE: () => (/* reexport */ GRAYSCALE),\n  INFERNO: () => (/* reexport */ INFERNO),\n  NormalFilteringMode: () => (/* reexport */ NormalFilteringMode),\n  PLASMA: () => (/* reexport */ PLASMA),\n  POINT_ATTRIBUTES: () => (/* reexport */ POINT_ATTRIBUTES),\n  POINT_ATTRIBUTE_TYPES: () => (/* reexport */ POINT_ATTRIBUTE_TYPES),\n  PointAttributeName: () => (/* reexport */ PointAttributeName),\n  PointAttributes: () => (/* reexport */ PointAttributes),\n  PointCloudMaterial: () => (/* reexport */ PointCloudMaterial),\n  PointCloudMixingMode: () => (/* reexport */ PointCloudMixingMode),\n  PointCloudOctree: () => (/* reexport */ PointCloudOctree),\n  PointCloudOctreeGeometry: () => (/* reexport */ PointCloudOctreeGeometry),\n  PointCloudOctreeGeometryNode: () => (/* reexport */ PointCloudOctreeGeometryNode),\n  PointCloudOctreeNode: () => (/* reexport */ PointCloudOctreeNode),\n  PointCloudOctreePicker: () => (/* reexport */ PointCloudOctreePicker),\n  PointCloudTree: () => (/* reexport */ PointCloudTree),\n  PointColorType: () => (/* reexport */ PointColorType),\n  PointOpacityType: () => (/* reexport */ PointOpacityType),\n  PointShape: () => (/* reexport */ PointShape),\n  PointSizeType: () => (/* reexport */ PointSizeType),\n  Potree: () => (/* reexport */ Potree),\n  QueueItem: () => (/* reexport */ QueueItem),\n  RAINBOW: () => (/* reexport */ RAINBOW),\n  SPECTRAL: () => (/* reexport */ SPECTRAL),\n  TreeType: () => (/* reexport */ TreeType),\n  V1_LOADER: () => (/* reexport */ loadPOC),\n  V2_LOADER: () => (/* reexport */ loadOctree),\n  VIRIDIS: () => (/* reexport */ VIRIDIS),\n  Version: () => (/* reexport */ Version),\n  YELLOW_GREEN: () => (/* reexport */ YELLOW_GREEN),\n  generateClassificationTexture: () => (/* reexport */ generateClassificationTexture),\n  generateDataTexture: () => (/* reexport */ generateDataTexture),\n  generateGradientTexture: () => (/* reexport */ generateGradientTexture)\n});\n\n// EXTERNAL MODULE: external \"three\"\nvar external_three_ = __webpack_require__(604);\n;// CONCATENATED MODULE: ./src/materials/blur-material.ts\n\r\nclass BlurMaterial extends external_three_.ShaderMaterial {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.vertexShader = __webpack_require__(575);\r\n        this.fragmentShader = __webpack_require__(414);\r\n        this.uniforms = {\r\n            screenWidth: { type: 'f', value: 0 },\r\n            screenHeight: { type: 'f', value: 0 },\r\n            map: { type: 't', value: null },\r\n        };\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/materials/clipping.ts\nvar ClipMode;\r\n(function (ClipMode) {\r\n    ClipMode[ClipMode[\"DISABLED\"] = 0] = \"DISABLED\";\r\n    ClipMode[ClipMode[\"CLIP_OUTSIDE\"] = 1] = \"CLIP_OUTSIDE\";\r\n    ClipMode[ClipMode[\"HIGHLIGHT_INSIDE\"] = 2] = \"HIGHLIGHT_INSIDE\";\r\n    ClipMode[ClipMode[\"CLIP_HORIZONTALLY\"] = 3] = \"CLIP_HORIZONTALLY\";\r\n    ClipMode[ClipMode[\"CLIP_VERTICALLY\"] = 4] = \"CLIP_VERTICALLY\";\r\n})(ClipMode || (ClipMode = {}));\r\n\n;// CONCATENATED MODULE: ./src/materials/enums.ts\nvar PointSizeType;\r\n(function (PointSizeType) {\r\n    PointSizeType[PointSizeType[\"FIXED\"] = 0] = \"FIXED\";\r\n    PointSizeType[PointSizeType[\"ATTENUATED\"] = 1] = \"ATTENUATED\";\r\n    PointSizeType[PointSizeType[\"ADAPTIVE\"] = 2] = \"ADAPTIVE\";\r\n})(PointSizeType || (PointSizeType = {}));\r\nvar PointShape;\r\n(function (PointShape) {\r\n    PointShape[PointShape[\"SQUARE\"] = 0] = \"SQUARE\";\r\n    PointShape[PointShape[\"CIRCLE\"] = 1] = \"CIRCLE\";\r\n    PointShape[PointShape[\"PARABOLOID\"] = 2] = \"PARABOLOID\";\r\n})(PointShape || (PointShape = {}));\r\nvar TreeType;\r\n(function (TreeType) {\r\n    TreeType[TreeType[\"OCTREE\"] = 0] = \"OCTREE\";\r\n    TreeType[TreeType[\"KDTREE\"] = 1] = \"KDTREE\";\r\n})(TreeType || (TreeType = {}));\r\nvar PointOpacityType;\r\n(function (PointOpacityType) {\r\n    PointOpacityType[PointOpacityType[\"FIXED\"] = 0] = \"FIXED\";\r\n    PointOpacityType[PointOpacityType[\"ATTENUATED\"] = 1] = \"ATTENUATED\";\r\n})(PointOpacityType || (PointOpacityType = {}));\r\nvar PointColorType;\r\n(function (PointColorType) {\r\n    PointColorType[PointColorType[\"RGB\"] = 0] = \"RGB\";\r\n    PointColorType[PointColorType[\"COLOR\"] = 1] = \"COLOR\";\r\n    PointColorType[PointColorType[\"DEPTH\"] = 2] = \"DEPTH\";\r\n    PointColorType[PointColorType[\"HEIGHT\"] = 3] = \"HEIGHT\";\r\n    PointColorType[PointColorType[\"ELEVATION\"] = 3] = \"ELEVATION\";\r\n    PointColorType[PointColorType[\"INTENSITY\"] = 4] = \"INTENSITY\";\r\n    PointColorType[PointColorType[\"INTENSITY_GRADIENT\"] = 5] = \"INTENSITY_GRADIENT\";\r\n    PointColorType[PointColorType[\"LOD\"] = 6] = \"LOD\";\r\n    PointColorType[PointColorType[\"LEVEL_OF_DETAIL\"] = 6] = \"LEVEL_OF_DETAIL\";\r\n    PointColorType[PointColorType[\"POINT_INDEX\"] = 7] = \"POINT_INDEX\";\r\n    PointColorType[PointColorType[\"CLASSIFICATION\"] = 8] = \"CLASSIFICATION\";\r\n    PointColorType[PointColorType[\"RETURN_NUMBER\"] = 9] = \"RETURN_NUMBER\";\r\n    PointColorType[PointColorType[\"SOURCE\"] = 10] = \"SOURCE\";\r\n    PointColorType[PointColorType[\"NORMAL\"] = 11] = \"NORMAL\";\r\n    PointColorType[PointColorType[\"PHONG\"] = 12] = \"PHONG\";\r\n    PointColorType[PointColorType[\"RGB_HEIGHT\"] = 13] = \"RGB_HEIGHT\";\r\n    PointColorType[PointColorType[\"COMPOSITE\"] = 50] = \"COMPOSITE\";\r\n})(PointColorType || (PointColorType = {}));\r\nvar NormalFilteringMode;\r\n(function (NormalFilteringMode) {\r\n    NormalFilteringMode[NormalFilteringMode[\"ABSOLUTE_NORMAL_FILTERING_MODE\"] = 1] = \"ABSOLUTE_NORMAL_FILTERING_MODE\";\r\n    NormalFilteringMode[NormalFilteringMode[\"LESS_EQUAL_NORMAL_FILTERING_MODE\"] = 2] = \"LESS_EQUAL_NORMAL_FILTERING_MODE\";\r\n    NormalFilteringMode[NormalFilteringMode[\"GREATER_NORMAL_FILTERING_MODE\"] = 3] = \"GREATER_NORMAL_FILTERING_MODE\";\r\n})(NormalFilteringMode || (NormalFilteringMode = {}));\r\nvar PointCloudMixingMode;\r\n(function (PointCloudMixingMode) {\r\n    PointCloudMixingMode[PointCloudMixingMode[\"CHECKBOARD\"] = 1] = \"CHECKBOARD\";\r\n    PointCloudMixingMode[PointCloudMixingMode[\"STRIPES\"] = 2] = \"STRIPES\";\r\n})(PointCloudMixingMode || (PointCloudMixingMode = {}));\r\n\n;// CONCATENATED MODULE: ./src/constants.ts\n\r\nconst DEFAULT_RGB_BRIGHTNESS = 0;\r\nconst DEFAULT_RGB_CONTRAST = 0;\r\nconst DEFAULT_RGB_GAMMA = 1;\r\nconst DEFAULT_MAX_POINT_SIZE = 50;\r\nconst DEFAULT_MIN_NODE_PIXEL_SIZE = 50;\r\nconst DEFAULT_MIN_POINT_SIZE = 2;\r\nconst DEFAULT_PICK_WINDOW_SIZE = 15;\r\nconst DEFAULT_POINT_BUDGET = 1000000;\r\nconst MAX_LOADS_TO_GPU = 2;\r\nconst MAX_NUM_NODES_LOADING = 4;\r\nconst PERSPECTIVE_CAMERA = 'PerspectiveCamera';\r\nconst COLOR_BLACK = new external_three_.Color(0, 0, 0);\r\nconst DEFAULT_HIGHLIGHT_COLOR = new external_three_.Vector4(1, 0, 0, 1);\r\n\n;// CONCATENATED MODULE: ./src/utils/utils.ts\nfunction getIndexFromName(name) {\r\n    return parseInt(name.charAt(name.length - 1), 10);\r\n}\r\n/**\r\n * When passed to `[].sort`, sorts the array by level and index: r, r0, r3, r4, r01, r07, r30, ...\r\n */\r\nfunction byLevelAndIndex(a, b) {\r\n    const na = a.name;\r\n    const nb = b.name;\r\n    if (na.length !== nb.length) {\r\n        return na.length - nb.length;\r\n    }\r\n    else if (na < nb) {\r\n        return -1;\r\n    }\r\n    else if (na > nb) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nfunction handleFailedRequest(response) {\r\n    if (response.status !== 200) {\r\n        throw Error('Response error');\r\n    }\r\n    return response;\r\n}\r\nfunction handleEmptyBuffer(buffer) {\r\n    if (!buffer || buffer.byteLength === 0) {\r\n        throw Error('Empty buffer');\r\n    }\r\n    return buffer;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/materials/classification.ts\n\r\nconst DEFAULT_CLASSIFICATION = {\r\n    0: new external_three_.Vector4(0.5, 0.5, 0.5, 1.0),\r\n    1: new external_three_.Vector4(0.5, 0.5, 0.5, 1.0),\r\n    2: new external_three_.Vector4(0.63, 0.32, 0.18, 1.0),\r\n    3: new external_three_.Vector4(0.0, 1.0, 0.0, 1.0),\r\n    4: new external_three_.Vector4(0.0, 0.8, 0.0, 1.0),\r\n    5: new external_three_.Vector4(0.0, 0.6, 0.0, 1.0),\r\n    6: new external_three_.Vector4(1.0, 0.66, 0.0, 1.0),\r\n    7: new external_three_.Vector4(1.0, 0, 1.0, 1.0),\r\n    8: new external_three_.Vector4(1.0, 0, 0.0, 1.0),\r\n    9: new external_three_.Vector4(0.0, 0.0, 1.0, 1.0),\r\n    12: new external_three_.Vector4(1.0, 1.0, 0.0, 1.0),\r\n    DEFAULT: new external_three_.Vector4(0.3, 0.6, 0.6, 0.5),\r\n};\r\n\n;// CONCATENATED MODULE: ./src/materials/gradients/grayscale.ts\n\r\nconst GRAYSCALE = [\r\n    [0, new external_three_.Color(0, 0, 0)],\r\n    [1, new external_three_.Color(1, 1, 1)],\r\n];\r\n\n;// CONCATENATED MODULE: ./src/materials/gradients/inferno.ts\n\r\nconst INFERNO = [\r\n    [0.0, new external_three_.Color(0.077, 0.042, 0.206)],\r\n    [0.1, new external_three_.Color(0.225, 0.036, 0.388)],\r\n    [0.2, new external_three_.Color(0.373, 0.074, 0.432)],\r\n    [0.3, new external_three_.Color(0.522, 0.128, 0.42)],\r\n    [0.4, new external_three_.Color(0.665, 0.182, 0.37)],\r\n    [0.5, new external_three_.Color(0.797, 0.255, 0.287)],\r\n    [0.6, new external_three_.Color(0.902, 0.364, 0.184)],\r\n    [0.7, new external_three_.Color(0.969, 0.516, 0.063)],\r\n    [0.8, new external_three_.Color(0.988, 0.683, 0.072)],\r\n    [0.9, new external_three_.Color(0.961, 0.859, 0.298)],\r\n    [1.0, new external_three_.Color(0.988, 0.998, 0.645)],\r\n];\r\n\n;// CONCATENATED MODULE: ./src/materials/gradients/plasma.ts\n\r\nconst PLASMA = [\r\n    [0.0, new external_three_.Color(0.241, 0.015, 0.61)],\r\n    [0.1, new external_three_.Color(0.387, 0.001, 0.654)],\r\n    [0.2, new external_three_.Color(0.524, 0.025, 0.653)],\r\n    [0.3, new external_three_.Color(0.651, 0.125, 0.596)],\r\n    [0.4, new external_three_.Color(0.752, 0.227, 0.513)],\r\n    [0.5, new external_three_.Color(0.837, 0.329, 0.431)],\r\n    [0.6, new external_three_.Color(0.907, 0.435, 0.353)],\r\n    [0.7, new external_three_.Color(0.963, 0.554, 0.272)],\r\n    [0.8, new external_three_.Color(0.992, 0.681, 0.195)],\r\n    [0.9, new external_three_.Color(0.987, 0.822, 0.144)],\r\n    [1.0, new external_three_.Color(0.94, 0.975, 0.131)],\r\n];\r\n\n;// CONCATENATED MODULE: ./src/materials/gradients/rainbow.ts\n\r\nconst RAINBOW = [\r\n    [0, new external_three_.Color(0.278, 0, 0.714)],\r\n    [1 / 6, new external_three_.Color(0, 0, 1)],\r\n    [2 / 6, new external_three_.Color(0, 1, 1)],\r\n    [3 / 6, new external_three_.Color(0, 1, 0)],\r\n    [4 / 6, new external_three_.Color(1, 1, 0)],\r\n    [5 / 6, new external_three_.Color(1, 0.64, 0)],\r\n    [1, new external_three_.Color(1, 0, 0)],\r\n];\r\n\n;// CONCATENATED MODULE: ./src/materials/gradients/spectral.ts\n\r\n// From chroma spectral http://gka.github.io/chroma.js/\r\nconst SPECTRAL = [\r\n    [0, new external_three_.Color(0.3686, 0.3098, 0.6353)],\r\n    [0.1, new external_three_.Color(0.1961, 0.5333, 0.7412)],\r\n    [0.2, new external_three_.Color(0.4, 0.7608, 0.6471)],\r\n    [0.3, new external_three_.Color(0.6706, 0.8667, 0.6431)],\r\n    [0.4, new external_three_.Color(0.902, 0.9608, 0.5961)],\r\n    [0.5, new external_three_.Color(1.0, 1.0, 0.749)],\r\n    [0.6, new external_three_.Color(0.9961, 0.8784, 0.5451)],\r\n    [0.7, new external_three_.Color(0.9922, 0.6824, 0.3804)],\r\n    [0.8, new external_three_.Color(0.9569, 0.4275, 0.2627)],\r\n    [0.9, new external_three_.Color(0.8353, 0.2431, 0.3098)],\r\n    [1, new external_three_.Color(0.6196, 0.0039, 0.2588)],\r\n];\r\n\n;// CONCATENATED MODULE: ./src/materials/gradients/vidris.ts\n\r\nconst VIRIDIS = [\r\n    [0.0, new external_three_.Color(0.267, 0.005, 0.329)],\r\n    [0.1, new external_three_.Color(0.283, 0.141, 0.458)],\r\n    [0.2, new external_three_.Color(0.254, 0.265, 0.53)],\r\n    [0.3, new external_three_.Color(0.207, 0.372, 0.553)],\r\n    [0.4, new external_three_.Color(0.164, 0.471, 0.558)],\r\n    [0.5, new external_three_.Color(0.128, 0.567, 0.551)],\r\n    [0.6, new external_three_.Color(0.135, 0.659, 0.518)],\r\n    [0.7, new external_three_.Color(0.267, 0.749, 0.441)],\r\n    [0.8, new external_three_.Color(0.478, 0.821, 0.318)],\r\n    [0.9, new external_three_.Color(0.741, 0.873, 0.15)],\r\n    [1.0, new external_three_.Color(0.993, 0.906, 0.144)],\r\n];\r\n\n;// CONCATENATED MODULE: ./src/materials/gradients/yellow-green.ts\n\r\nconst YELLOW_GREEN = [\r\n    [0, new external_three_.Color(0.1647, 0.2824, 0.3451)],\r\n    [0.1, new external_three_.Color(0.1338, 0.3555, 0.4227)],\r\n    [0.2, new external_three_.Color(0.061, 0.4319, 0.4864)],\r\n    [0.3, new external_three_.Color(0.0, 0.5099, 0.5319)],\r\n    [0.4, new external_three_.Color(0.0, 0.5881, 0.5569)],\r\n    [0.5, new external_three_.Color(0.137, 0.665, 0.5614)],\r\n    [0.6, new external_three_.Color(0.2906, 0.7395, 0.5477)],\r\n    [0.7, new external_three_.Color(0.4453, 0.8099, 0.5201)],\r\n    [0.8, new external_three_.Color(0.6102, 0.8748, 0.485)],\r\n    [0.9, new external_three_.Color(0.7883, 0.9323, 0.4514)],\r\n    [1, new external_three_.Color(0.9804, 0.9804, 0.4314)],\r\n];\r\n\n;// CONCATENATED MODULE: ./src/materials/gradients/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./src/materials/texture-generation.ts\n\r\nfunction generateDataTexture(width, height, color) {\r\n    const size = width * height;\r\n    const data = new Uint8Array(4 * size);\r\n    const r = Math.floor(color.r * 255);\r\n    const g = Math.floor(color.g * 255);\r\n    const b = Math.floor(color.b * 255);\r\n    for (let i = 0; i < size; i++) {\r\n        data[i * 3] = r;\r\n        data[i * 3 + 1] = g;\r\n        data[i * 3 + 2] = b;\r\n    }\r\n    const texture = new external_three_.DataTexture(data, width, height, external_three_.RGBAFormat);\r\n    texture.needsUpdate = true;\r\n    texture.magFilter = external_three_.NearestFilter;\r\n    return texture;\r\n}\r\nfunction generateGradientTexture(gradient) {\r\n    const size = 64;\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = size;\r\n    canvas.height = size;\r\n    const context = canvas.getContext('2d');\r\n    context.rect(0, 0, size, size);\r\n    const ctxGradient = context.createLinearGradient(0, 0, size, size);\r\n    for (let i = 0; i < gradient.length; i++) {\r\n        const step = gradient[i];\r\n        ctxGradient.addColorStop(step[0], `#${step[1].getHexString()}`);\r\n    }\r\n    context.fillStyle = ctxGradient;\r\n    context.fill();\r\n    const texture = new external_three_.CanvasTexture(canvas);\r\n    texture.needsUpdate = true;\r\n    texture.minFilter = external_three_.LinearFilter;\r\n    // textureImage = texture.image;\r\n    return texture;\r\n}\r\nfunction generateClassificationTexture(classification) {\r\n    const width = 256;\r\n    const height = 256;\r\n    const size = width * height;\r\n    const data = new Uint8Array(4 * size);\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            const i = x + width * y;\r\n            let color;\r\n            if (classification[x]) {\r\n                color = classification[x];\r\n            }\r\n            else if (classification[x % 32]) {\r\n                color = classification[x % 32];\r\n            }\r\n            else {\r\n                color = classification.DEFAULT;\r\n            }\r\n            data[4 * i + 0] = 255 * color.x;\r\n            data[4 * i + 1] = 255 * color.y;\r\n            data[4 * i + 2] = 255 * color.z;\r\n            data[4 * i + 3] = 255 * color.w;\r\n        }\r\n    }\r\n    const texture = new external_three_.DataTexture(data, width, height, external_three_.RGBAFormat);\r\n    texture.magFilter = external_three_.NearestFilter;\r\n    texture.needsUpdate = true;\r\n    return texture;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/materials/point-cloud-material.ts\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst TREE_TYPE_DEFS = {\r\n    [TreeType.OCTREE]: 'tree_type_octree',\r\n    [TreeType.KDTREE]: 'tree_type_kdtree',\r\n};\r\nconst SIZE_TYPE_DEFS = {\r\n    [PointSizeType.FIXED]: 'fixed_point_size',\r\n    [PointSizeType.ATTENUATED]: 'attenuated_point_size',\r\n    [PointSizeType.ADAPTIVE]: 'adaptive_point_size',\r\n};\r\nconst OPACITY_DEFS = {\r\n    [PointOpacityType.ATTENUATED]: 'attenuated_opacity',\r\n    [PointOpacityType.FIXED]: 'fixed_opacity',\r\n};\r\nconst SHAPE_DEFS = {\r\n    [PointShape.SQUARE]: 'square_point_shape',\r\n    [PointShape.CIRCLE]: 'circle_point_shape',\r\n    [PointShape.PARABOLOID]: 'paraboloid_point_shape',\r\n};\r\nconst COLOR_DEFS = {\r\n    [PointColorType.RGB]: 'color_type_rgb',\r\n    [PointColorType.COLOR]: 'color_type_color',\r\n    [PointColorType.DEPTH]: 'color_type_depth',\r\n    [PointColorType.HEIGHT]: 'color_type_height',\r\n    [PointColorType.INTENSITY]: 'color_type_intensity',\r\n    [PointColorType.INTENSITY_GRADIENT]: 'color_type_intensity_gradient',\r\n    [PointColorType.LOD]: 'color_type_lod',\r\n    [PointColorType.POINT_INDEX]: 'color_type_point_index',\r\n    [PointColorType.CLASSIFICATION]: 'color_type_classification',\r\n    [PointColorType.RETURN_NUMBER]: 'color_type_return_number',\r\n    [PointColorType.SOURCE]: 'color_type_source',\r\n    [PointColorType.NORMAL]: 'color_type_normal',\r\n    [PointColorType.PHONG]: 'color_type_phong',\r\n    [PointColorType.RGB_HEIGHT]: 'color_type_rgb_height',\r\n    [PointColorType.COMPOSITE]: 'color_type_composite',\r\n};\r\nconst CLIP_MODE_DEFS = {\r\n    [ClipMode.DISABLED]: 'clip_disabled',\r\n    [ClipMode.CLIP_OUTSIDE]: 'clip_outside',\r\n    [ClipMode.HIGHLIGHT_INSIDE]: 'clip_highlight_inside',\r\n    [ClipMode.CLIP_HORIZONTALLY]: 'clip_horizontally',\r\n    [ClipMode.CLIP_VERTICALLY]: 'clip_vertically',\r\n};\r\nclass PointCloudMaterial extends external_three_.RawShaderMaterial {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        /**\r\n         * Use the drawing buffer size instead of the dom client width and height when passing the screen height and screen width uniforms to the\r\n         * shader. This is useful if you have offscreen canvases (which in some browsers return 0 as client width and client height).\r\n         */\r\n        this.useDrawingBufferSize = false;\r\n        this.lights = false;\r\n        this.fog = false;\r\n        this.colorRgba = false;\r\n        this.numClipBoxes = 0;\r\n        this.clipBoxes = [];\r\n        this.visibleNodeTextureOffsets = new Map();\r\n        this._gradient = SPECTRAL;\r\n        this.gradientTexture = generateGradientTexture(this._gradient);\r\n        this._classification = DEFAULT_CLASSIFICATION;\r\n        this.classificationTexture = generateClassificationTexture(this._classification);\r\n        this.uniforms = {\r\n            bbSize: makeUniform('fv', [0, 0, 0]),\r\n            blendDepthSupplement: makeUniform('f', 0.0),\r\n            blendHardness: makeUniform('f', 2.0),\r\n            classificationLUT: makeUniform('t', this.classificationTexture || new external_three_.Texture()),\r\n            clipBoxCount: makeUniform('f', 0),\r\n            clipBoxes: makeUniform('Matrix4fv', []),\r\n            clipHighlightColors: makeUniform('fv', new Float32Array()),\r\n            clipExtent: makeUniform('fv', [0.0, 0.0, 1.0, 1.0]),\r\n            depthMap: makeUniform('t', null),\r\n            diffuse: makeUniform('fv', [1, 1, 1]),\r\n            fov: makeUniform('f', 1.0),\r\n            gradient: makeUniform('t', this.gradientTexture || new external_three_.Texture()),\r\n            heightMax: makeUniform('f', 1.0),\r\n            heightMin: makeUniform('f', 0.0),\r\n            intensityBrightness: makeUniform('f', 0),\r\n            intensityContrast: makeUniform('f', 0),\r\n            intensityGamma: makeUniform('f', 1),\r\n            intensityRange: makeUniform('fv', [0, 65000]),\r\n            isLeafNode: makeUniform('b', 0),\r\n            level: makeUniform('f', 0.0),\r\n            maxSize: makeUniform('f', DEFAULT_MAX_POINT_SIZE),\r\n            minSize: makeUniform('f', DEFAULT_MIN_POINT_SIZE),\r\n            octreeSize: makeUniform('f', 0),\r\n            opacity: makeUniform('f', 1.0),\r\n            pcIndex: makeUniform('f', 0),\r\n            rgbBrightness: makeUniform('f', DEFAULT_RGB_BRIGHTNESS),\r\n            rgbContrast: makeUniform('f', DEFAULT_RGB_CONTRAST),\r\n            rgbGamma: makeUniform('f', DEFAULT_RGB_GAMMA),\r\n            screenHeight: makeUniform('f', 1.0),\r\n            screenWidth: makeUniform('f', 1.0),\r\n            size: makeUniform('f', 1),\r\n            spacing: makeUniform('f', 1.0),\r\n            toModel: makeUniform('Matrix4f', []),\r\n            transition: makeUniform('f', 0.5),\r\n            uColor: makeUniform('c', new external_three_.Color(0xffffff)),\r\n            // @ts-ignore\r\n            visibleNodes: makeUniform('t', this.visibleNodesTexture || new external_three_.Texture()),\r\n            vnStart: makeUniform('f', 0.0),\r\n            wClassification: makeUniform('f', 0),\r\n            wElevation: makeUniform('f', 0),\r\n            wIntensity: makeUniform('f', 0),\r\n            wReturnNumber: makeUniform('f', 0),\r\n            wRGB: makeUniform('f', 1),\r\n            wSourceID: makeUniform('f', 0),\r\n            opacityAttenuation: makeUniform('f', 1),\r\n            filterByNormalThreshold: makeUniform('f', 0),\r\n            highlightedPointCoordinate: makeUniform('fv', new external_three_.Vector3()),\r\n            highlightedPointColor: makeUniform('fv', DEFAULT_HIGHLIGHT_COLOR.clone()),\r\n            enablePointHighlighting: makeUniform('b', true),\r\n            highlightedPointScale: makeUniform('f', 2.0),\r\n            backgroundMap: makeUniform('t', null),\r\n            normalFilteringMode: makeUniform('i', NormalFilteringMode.ABSOLUTE_NORMAL_FILTERING_MODE),\r\n            pointCloudID: makeUniform('f', 2),\r\n            pointCloudMixingMode: makeUniform('i', PointCloudMixingMode.CHECKBOARD),\r\n            stripeDistanceX: makeUniform('f', 5),\r\n            stripeDistanceY: makeUniform('f', 5),\r\n            stripeDivisorX: makeUniform('f', 2),\r\n            stripeDivisorY: makeUniform('f', 2),\r\n            pointCloudMixAngle: makeUniform('f', 31),\r\n        };\r\n        this.useClipBox = false;\r\n        this.weighted = false;\r\n        this.pointColorType = PointColorType.RGB;\r\n        this.pointSizeType = PointSizeType.ADAPTIVE;\r\n        this.clipMode = ClipMode.DISABLED;\r\n        this.useEDL = false;\r\n        this.shape = PointShape.SQUARE;\r\n        this.treeType = TreeType.OCTREE;\r\n        this.pointOpacityType = PointOpacityType.FIXED;\r\n        this.useFilterByNormal = false;\r\n        this.useTextureBlending = false;\r\n        this.usePointCloudMixing = false;\r\n        this.highlightPoint = false;\r\n        this.attributes = {\r\n            position: { type: 'fv', value: [] },\r\n            color: { type: 'fv', value: [] },\r\n            normal: { type: 'fv', value: [] },\r\n            intensity: { type: 'f', value: [] },\r\n            classification: { type: 'f', value: [] },\r\n            returnNumber: { type: 'f', value: [] },\r\n            numberOfReturns: { type: 'f', value: [] },\r\n            pointSourceID: { type: 'f', value: [] },\r\n            indices: { type: 'fv', value: [] },\r\n        };\r\n        const tex = (this.visibleNodesTexture = generateDataTexture(2048, 1, new external_three_.Color(0xffffff)));\r\n        tex.minFilter = external_three_.NearestFilter;\r\n        tex.magFilter = external_three_.NearestFilter;\r\n        this.setUniform('visibleNodes', tex);\r\n        this.treeType = getValid(parameters.treeType, TreeType.OCTREE);\r\n        this.size = getValid(parameters.size, 1.0);\r\n        this.minSize = getValid(parameters.minSize, 2.0);\r\n        this.maxSize = getValid(parameters.maxSize, 50.0);\r\n        this.colorRgba = Boolean(parameters.colorRgba);\r\n        this.classification = DEFAULT_CLASSIFICATION;\r\n        this.defaultAttributeValues.normal = [0, 0, 0];\r\n        this.defaultAttributeValues.classification = [0, 0, 0];\r\n        this.defaultAttributeValues.indices = [0, 0, 0, 0];\r\n        this.vertexColors = true;\r\n        this.updateShaderSource();\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        if (this.gradientTexture) {\r\n            this.gradientTexture.dispose();\r\n            this.gradientTexture = undefined;\r\n        }\r\n        if (this.visibleNodesTexture) {\r\n            this.visibleNodesTexture.dispose();\r\n            this.visibleNodesTexture = undefined;\r\n        }\r\n        this.clearVisibleNodeTextureOffsets();\r\n        if (this.classificationTexture) {\r\n            this.classificationTexture.dispose();\r\n            this.classificationTexture = undefined;\r\n        }\r\n        if (this.depthMap) {\r\n            this.depthMap.dispose();\r\n            this.depthMap = undefined;\r\n        }\r\n        if (this.backgroundMap) {\r\n            this.backgroundMap.dispose();\r\n            this.backgroundMap = undefined;\r\n        }\r\n    }\r\n    clearVisibleNodeTextureOffsets() {\r\n        this.visibleNodeTextureOffsets.clear();\r\n    }\r\n    updateShaderSource() {\r\n        this.vertexShader = this.applyDefines((__webpack_require__(245)/* [\"default\"] */ .A));\r\n        this.fragmentShader = this.applyDefines((__webpack_require__(168)/* [\"default\"] */ .A));\r\n        if (this.opacity === 1.0) {\r\n            this.blending = external_three_.NoBlending;\r\n            this.transparent = false;\r\n            this.depthTest = true;\r\n            this.depthWrite = true;\r\n            this.depthFunc = external_three_.LessEqualDepth;\r\n        }\r\n        else if (this.opacity < 1.0 && !this.useEDL) {\r\n            this.blending = external_three_.AdditiveBlending;\r\n            this.transparent = true;\r\n            this.depthTest = false;\r\n            this.depthWrite = true;\r\n        }\r\n        if (this.weighted) {\r\n            this.blending = external_three_.AdditiveBlending;\r\n            this.transparent = true;\r\n            this.depthTest = true;\r\n            this.depthWrite = false;\r\n            this.depthFunc = external_three_.LessEqualDepth;\r\n        }\r\n        this.needsUpdate = true;\r\n    }\r\n    applyDefines(shaderSrc) {\r\n        const parts = [];\r\n        function define(value) {\r\n            if (value) {\r\n                parts.push(`#define ${value}`);\r\n            }\r\n        }\r\n        define(TREE_TYPE_DEFS[this.treeType]);\r\n        define(SIZE_TYPE_DEFS[this.pointSizeType]);\r\n        define(SHAPE_DEFS[this.shape]);\r\n        define(COLOR_DEFS[this.pointColorType]);\r\n        define(CLIP_MODE_DEFS[this.clipMode]);\r\n        define(OPACITY_DEFS[this.pointOpacityType]);\r\n        // We only perform gamma and brightness/contrast calculations per point if values are specified.\r\n        if (this.rgbGamma !== DEFAULT_RGB_GAMMA ||\r\n            this.rgbBrightness !== DEFAULT_RGB_BRIGHTNESS ||\r\n            this.rgbContrast !== DEFAULT_RGB_CONTRAST) {\r\n            define('use_rgb_gamma_contrast_brightness');\r\n        }\r\n        if (this.useFilterByNormal) {\r\n            define('use_filter_by_normal');\r\n        }\r\n        if (this.useEDL) {\r\n            define('use_edl');\r\n        }\r\n        if (this.weighted) {\r\n            define('weighted_splats');\r\n        }\r\n        if (this.numClipBoxes > 0) {\r\n            define('use_clip_box');\r\n        }\r\n        if (this.highlightPoint) {\r\n            define('highlight_point');\r\n        }\r\n        if (this.useTextureBlending) {\r\n            define('use_texture_blending');\r\n        }\r\n        if (this.usePointCloudMixing) {\r\n            define('use_point_cloud_mixing');\r\n        }\r\n        if (this.colorRgba) {\r\n            define('color_rgba');\r\n        }\r\n        define('MAX_POINT_LIGHTS 0');\r\n        define('MAX_DIR_LIGHTS 0');\r\n        parts.push(shaderSrc);\r\n        return parts.join('\\n');\r\n    }\r\n    setPointCloudMixingMode(mode) {\r\n        this.pointCloudMixingMode = mode;\r\n    }\r\n    getPointCloudMixingMode() {\r\n        if (this.pointCloudMixingMode === PointCloudMixingMode.STRIPES) {\r\n            return PointCloudMixingMode.STRIPES;\r\n        }\r\n        return PointCloudMixingMode.CHECKBOARD;\r\n    }\r\n    setClipBoxes(clipBoxes) {\r\n        if (!clipBoxes) {\r\n            return;\r\n        }\r\n        this.clipBoxes = clipBoxes;\r\n        const doUpdate = this.numClipBoxes !== clipBoxes.length && (clipBoxes.length === 0 || this.numClipBoxes === 0);\r\n        this.numClipBoxes = clipBoxes.length;\r\n        this.setUniform('clipBoxCount', this.numClipBoxes);\r\n        if (doUpdate) {\r\n            this.updateShaderSource();\r\n        }\r\n        const clipBoxesLength = this.numClipBoxes * 16;\r\n        const clipBoxesArray = new Float32Array(clipBoxesLength);\r\n        const clipColorsLength = this.numClipBoxes * 3;\r\n        const clipColorsArray = new Float32Array(clipColorsLength);\r\n        for (let i = 0; i < this.numClipBoxes; i++) {\r\n            clipBoxesArray.set(clipBoxes[i].inverse.elements, 16 * i);\r\n            clipColorsArray.set((clipBoxes[i].color || this.color).toArray(), 3 * i);\r\n        }\r\n        for (let i = 0; i < clipBoxesLength; i++) {\r\n            if (isNaN(clipBoxesArray[i])) {\r\n                clipBoxesArray[i] = Infinity;\r\n            }\r\n        }\r\n        this.setUniform('clipBoxes', clipBoxesArray);\r\n        this.setUniform('clipHighlightColors', clipColorsArray);\r\n    }\r\n    get gradient() {\r\n        return this._gradient;\r\n    }\r\n    set gradient(value) {\r\n        if (this._gradient !== value) {\r\n            this._gradient = value;\r\n            this.gradientTexture = generateGradientTexture(this._gradient);\r\n            this.setUniform('gradient', this.gradientTexture);\r\n        }\r\n    }\r\n    get classification() {\r\n        return this._classification;\r\n    }\r\n    set classification(value) {\r\n        const copy = {};\r\n        for (const key of Object.keys(value)) {\r\n            copy[key] = value[key].clone();\r\n        }\r\n        let isEqual = false;\r\n        if (this._classification === undefined) {\r\n            isEqual = false;\r\n        }\r\n        else {\r\n            isEqual = Object.keys(copy).length === Object.keys(this._classification).length;\r\n            for (const key of Object.keys(copy)) {\r\n                isEqual = isEqual && this._classification[key] !== undefined;\r\n                isEqual = isEqual && copy[key].equals(this._classification[key]);\r\n            }\r\n        }\r\n        if (!isEqual) {\r\n            this._classification = copy;\r\n            this.recomputeClassification();\r\n        }\r\n    }\r\n    recomputeClassification() {\r\n        this.classificationTexture = generateClassificationTexture(this._classification);\r\n        this.setUniform('classificationLUT', this.classificationTexture);\r\n    }\r\n    get elevationRange() {\r\n        return [this.heightMin, this.heightMax];\r\n    }\r\n    set elevationRange(value) {\r\n        this.heightMin = value[0];\r\n        this.heightMax = value[1];\r\n    }\r\n    getUniform(name) {\r\n        return this.uniforms === undefined ? undefined : this.uniforms[name].value;\r\n    }\r\n    setUniform(name, value) {\r\n        if (this.uniforms === undefined) {\r\n            return;\r\n        }\r\n        const uObj = this.uniforms[name];\r\n        if (uObj.type === 'c') {\r\n            uObj.value.copy(value);\r\n        }\r\n        else if (value !== uObj.value) {\r\n            uObj.value = value;\r\n        }\r\n    }\r\n    updateMaterial(octree, visibleNodes, camera, renderer) {\r\n        const pixelRatio = renderer.getPixelRatio();\r\n        if (camera.type === PERSPECTIVE_CAMERA) {\r\n            this.fov = camera.fov * (Math.PI / 180);\r\n        }\r\n        else {\r\n            this.fov = Math.PI / 2; // will result in slope = 1 in the shader\r\n        }\r\n        const renderTarget = renderer.getRenderTarget();\r\n        if (renderTarget !== null) {\r\n            this.screenWidth = renderTarget.width;\r\n            this.screenHeight = renderTarget.height;\r\n        }\r\n        else {\r\n            this.screenWidth = renderer.domElement.clientWidth * pixelRatio;\r\n            this.screenHeight = renderer.domElement.clientHeight * pixelRatio;\r\n        }\r\n        if (this.useDrawingBufferSize) {\r\n            renderer.getDrawingBufferSize(PointCloudMaterial.helperVec2);\r\n            this.screenWidth = PointCloudMaterial.helperVec2.width;\r\n            this.screenHeight = PointCloudMaterial.helperVec2.height;\r\n        }\r\n        const maxScale = Math.max(octree.scale.x, octree.scale.y, octree.scale.z);\r\n        this.spacing = octree.pcoGeometry.spacing * maxScale;\r\n        this.octreeSize = octree.pcoGeometry.boundingBox.getSize(PointCloudMaterial.helperVec3).x;\r\n        if (this.pointSizeType === PointSizeType.ADAPTIVE ||\r\n            this.pointColorType === PointColorType.LOD) {\r\n            this.updateVisibilityTextureData(visibleNodes);\r\n        }\r\n    }\r\n    updateVisibilityTextureData(nodes) {\r\n        nodes.sort(byLevelAndIndex);\r\n        const data = new Uint8Array(nodes.length * 4);\r\n        const offsetsToChild = new Array(nodes.length).fill(Infinity);\r\n        this.visibleNodeTextureOffsets.clear();\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n            this.visibleNodeTextureOffsets.set(node.name, i);\r\n            if (i > 0) {\r\n                const parentName = node.name.slice(0, -1);\r\n                const parentOffset = this.visibleNodeTextureOffsets.get(parentName);\r\n                const parentOffsetToChild = i - parentOffset;\r\n                offsetsToChild[parentOffset] = Math.min(offsetsToChild[parentOffset], parentOffsetToChild);\r\n                // tslint:disable:no-bitwise\r\n                const offset = parentOffset * 4;\r\n                data[offset] = data[offset] | (1 << node.index);\r\n                data[offset + 1] = offsetsToChild[parentOffset] >> 8;\r\n                data[offset + 2] = offsetsToChild[parentOffset] % 256;\r\n                // tslint:enable:no-bitwise\r\n            }\r\n            data[i * 4 + 3] = node.name.length;\r\n        }\r\n        const texture = this.visibleNodesTexture;\r\n        if (texture) {\r\n            texture.image.data.set(data);\r\n            texture.needsUpdate = true;\r\n        }\r\n    }\r\n    static makeOnBeforeRender(octree, node, pcIndex) {\r\n        return (_renderer, _scene, _camera, _geometry, material) => {\r\n            const pointCloudMaterial = material;\r\n            const materialUniforms = pointCloudMaterial.uniforms;\r\n            materialUniforms.level.value = node.level;\r\n            materialUniforms.isLeafNode.value = node.isLeafNode;\r\n            const vnStart = pointCloudMaterial.visibleNodeTextureOffsets.get(node.name);\r\n            if (vnStart !== undefined) {\r\n                materialUniforms.vnStart.value = vnStart;\r\n            }\r\n            materialUniforms.pcIndex.value =\r\n                pcIndex !== undefined ? pcIndex : octree.visibleNodes.indexOf(node);\r\n            // Note: when changing uniforms in onBeforeRender, the flag uniformsNeedUpdate has to be\r\n            // set to true to instruct ThreeJS to upload them. See also\r\n            // https://github.com/mrdoob/three.js/issues/9870#issuecomment-368750182.\r\n            // Remove the cast to any after updating to Three.JS >= r113\r\n            material /*ShaderMaterial*/.uniformsNeedUpdate = true;\r\n        };\r\n    }\r\n}\r\nPointCloudMaterial.helperVec3 = new external_three_.Vector3();\r\nPointCloudMaterial.helperVec2 = new external_three_.Vector2();\r\n__decorate([\r\n    uniform('bbSize')\r\n], PointCloudMaterial.prototype, \"bbSize\", void 0);\r\n__decorate([\r\n    uniform('clipExtent')\r\n], PointCloudMaterial.prototype, \"clipExtent\", void 0);\r\n__decorate([\r\n    uniform('depthMap')\r\n], PointCloudMaterial.prototype, \"depthMap\", void 0);\r\n__decorate([\r\n    uniform('fov')\r\n], PointCloudMaterial.prototype, \"fov\", void 0);\r\n__decorate([\r\n    uniform('heightMax')\r\n], PointCloudMaterial.prototype, \"heightMax\", void 0);\r\n__decorate([\r\n    uniform('heightMin')\r\n], PointCloudMaterial.prototype, \"heightMin\", void 0);\r\n__decorate([\r\n    uniform('intensityBrightness')\r\n], PointCloudMaterial.prototype, \"intensityBrightness\", void 0);\r\n__decorate([\r\n    uniform('intensityContrast')\r\n], PointCloudMaterial.prototype, \"intensityContrast\", void 0);\r\n__decorate([\r\n    uniform('intensityGamma')\r\n], PointCloudMaterial.prototype, \"intensityGamma\", void 0);\r\n__decorate([\r\n    uniform('intensityRange')\r\n], PointCloudMaterial.prototype, \"intensityRange\", void 0);\r\n__decorate([\r\n    uniform('maxSize')\r\n], PointCloudMaterial.prototype, \"maxSize\", void 0);\r\n__decorate([\r\n    uniform('minSize')\r\n], PointCloudMaterial.prototype, \"minSize\", void 0);\r\n__decorate([\r\n    uniform('octreeSize')\r\n], PointCloudMaterial.prototype, \"octreeSize\", void 0);\r\n__decorate([\r\n    uniform('opacity', true)\r\n], PointCloudMaterial.prototype, \"opacity\", void 0);\r\n__decorate([\r\n    uniform('rgbBrightness', true)\r\n], PointCloudMaterial.prototype, \"rgbBrightness\", void 0);\r\n__decorate([\r\n    uniform('rgbContrast', true)\r\n], PointCloudMaterial.prototype, \"rgbContrast\", void 0);\r\n__decorate([\r\n    uniform('rgbGamma', true)\r\n], PointCloudMaterial.prototype, \"rgbGamma\", void 0);\r\n__decorate([\r\n    uniform('screenHeight')\r\n], PointCloudMaterial.prototype, \"screenHeight\", void 0);\r\n__decorate([\r\n    uniform('screenWidth')\r\n], PointCloudMaterial.prototype, \"screenWidth\", void 0);\r\n__decorate([\r\n    uniform('size')\r\n], PointCloudMaterial.prototype, \"size\", void 0);\r\n__decorate([\r\n    uniform('spacing')\r\n], PointCloudMaterial.prototype, \"spacing\", void 0);\r\n__decorate([\r\n    uniform('transition')\r\n], PointCloudMaterial.prototype, \"transition\", void 0);\r\n__decorate([\r\n    uniform('uColor')\r\n], PointCloudMaterial.prototype, \"color\", void 0);\r\n__decorate([\r\n    uniform('wClassification')\r\n], PointCloudMaterial.prototype, \"weightClassification\", void 0);\r\n__decorate([\r\n    uniform('wElevation')\r\n], PointCloudMaterial.prototype, \"weightElevation\", void 0);\r\n__decorate([\r\n    uniform('wIntensity')\r\n], PointCloudMaterial.prototype, \"weightIntensity\", void 0);\r\n__decorate([\r\n    uniform('wReturnNumber')\r\n], PointCloudMaterial.prototype, \"weightReturnNumber\", void 0);\r\n__decorate([\r\n    uniform('wRGB')\r\n], PointCloudMaterial.prototype, \"weightRGB\", void 0);\r\n__decorate([\r\n    uniform('wSourceID')\r\n], PointCloudMaterial.prototype, \"weightSourceID\", void 0);\r\n__decorate([\r\n    uniform('opacityAttenuation')\r\n], PointCloudMaterial.prototype, \"opacityAttenuation\", void 0);\r\n__decorate([\r\n    uniform('filterByNormalThreshold')\r\n], PointCloudMaterial.prototype, \"filterByNormalThreshold\", void 0);\r\n__decorate([\r\n    uniform('highlightedPointCoordinate')\r\n], PointCloudMaterial.prototype, \"highlightedPointCoordinate\", void 0);\r\n__decorate([\r\n    uniform('highlightedPointColor')\r\n], PointCloudMaterial.prototype, \"highlightedPointColor\", void 0);\r\n__decorate([\r\n    uniform('enablePointHighlighting')\r\n], PointCloudMaterial.prototype, \"enablePointHighlighting\", void 0);\r\n__decorate([\r\n    uniform('highlightedPointScale')\r\n], PointCloudMaterial.prototype, \"highlightedPointScale\", void 0);\r\n__decorate([\r\n    uniform('normalFilteringMode')\r\n], PointCloudMaterial.prototype, \"normalFilteringMode\", void 0);\r\n__decorate([\r\n    uniform('backgroundMap')\r\n], PointCloudMaterial.prototype, \"backgroundMap\", void 0);\r\n__decorate([\r\n    uniform('pointCloudID')\r\n], PointCloudMaterial.prototype, \"pointCloudID\", void 0);\r\n__decorate([\r\n    uniform('pointCloudMixingMode')\r\n], PointCloudMaterial.prototype, \"pointCloudMixingMode\", void 0);\r\n__decorate([\r\n    uniform('stripeDistanceX')\r\n], PointCloudMaterial.prototype, \"stripeDistanceX\", void 0);\r\n__decorate([\r\n    uniform('stripeDistanceY')\r\n], PointCloudMaterial.prototype, \"stripeDistanceY\", void 0);\r\n__decorate([\r\n    uniform('stripeDivisorX')\r\n], PointCloudMaterial.prototype, \"stripeDivisorX\", void 0);\r\n__decorate([\r\n    uniform('stripeDivisorY')\r\n], PointCloudMaterial.prototype, \"stripeDivisorY\", void 0);\r\n__decorate([\r\n    uniform('pointCloudMixAngle')\r\n], PointCloudMaterial.prototype, \"pointCloudMixAngle\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"useClipBox\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"weighted\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"pointColorType\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"pointSizeType\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"clipMode\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"useEDL\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"shape\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"treeType\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"pointOpacityType\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"useFilterByNormal\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"useTextureBlending\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"usePointCloudMixing\", void 0);\r\n__decorate([\r\n    requiresShaderUpdate()\r\n], PointCloudMaterial.prototype, \"highlightPoint\", void 0);\r\nfunction makeUniform(type, value) {\r\n    return { type, value };\r\n}\r\nfunction getValid(a, b) {\r\n    return a === undefined ? b : a;\r\n}\r\n// tslint:disable:no-invalid-this\r\nfunction uniform(uniformName, requireSrcUpdate = false) {\r\n    return (target, propertyKey) => {\r\n        Object.defineProperty(target, propertyKey, {\r\n            get() {\r\n                return this.getUniform(uniformName);\r\n            },\r\n            set(value) {\r\n                if (value !== this.getUniform(uniformName)) {\r\n                    this.setUniform(uniformName, value);\r\n                    if (requireSrcUpdate) {\r\n                        this.updateShaderSource();\r\n                    }\r\n                }\r\n            },\r\n        });\r\n    };\r\n}\r\nfunction requiresShaderUpdate() {\r\n    return (target, propertyKey) => {\r\n        const fieldName = `_${propertyKey.toString()}`;\r\n        Object.defineProperty(target, propertyKey, {\r\n            get() {\r\n                return this[fieldName];\r\n            },\r\n            set(value) {\r\n                if (value !== this[fieldName]) {\r\n                    this[fieldName] = value;\r\n                    this.updateShaderSource();\r\n                }\r\n            },\r\n        });\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/materials/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./src/point-attributes.ts\n// -------------------------------------------------------------------------------------------------\r\n// Converted to Typescript and adapted from https://github.com/potree/potree\r\n// -------------------------------------------------------------------------------------------------\r\nvar PointAttributeName;\r\n(function (PointAttributeName) {\r\n    PointAttributeName[PointAttributeName[\"POSITION_CARTESIAN\"] = 0] = \"POSITION_CARTESIAN\";\r\n    PointAttributeName[PointAttributeName[\"COLOR_PACKED\"] = 1] = \"COLOR_PACKED\";\r\n    PointAttributeName[PointAttributeName[\"COLOR_FLOATS_1\"] = 2] = \"COLOR_FLOATS_1\";\r\n    PointAttributeName[PointAttributeName[\"COLOR_FLOATS_255\"] = 3] = \"COLOR_FLOATS_255\";\r\n    PointAttributeName[PointAttributeName[\"NORMAL_FLOATS\"] = 4] = \"NORMAL_FLOATS\";\r\n    PointAttributeName[PointAttributeName[\"FILLER\"] = 5] = \"FILLER\";\r\n    PointAttributeName[PointAttributeName[\"INTENSITY\"] = 6] = \"INTENSITY\";\r\n    PointAttributeName[PointAttributeName[\"CLASSIFICATION\"] = 7] = \"CLASSIFICATION\";\r\n    PointAttributeName[PointAttributeName[\"NORMAL_SPHEREMAPPED\"] = 8] = \"NORMAL_SPHEREMAPPED\";\r\n    PointAttributeName[PointAttributeName[\"NORMAL_OCT16\"] = 9] = \"NORMAL_OCT16\";\r\n    PointAttributeName[PointAttributeName[\"NORMAL\"] = 10] = \"NORMAL\";\r\n})(PointAttributeName || (PointAttributeName = {}));\r\nconst POINT_ATTRIBUTE_TYPES = {\r\n    DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\r\n    DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\r\n    DATA_TYPE_INT8: { ordinal: 2, size: 1 },\r\n    DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\r\n    DATA_TYPE_INT16: { ordinal: 4, size: 2 },\r\n    DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\r\n    DATA_TYPE_INT32: { ordinal: 6, size: 4 },\r\n    DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\r\n    DATA_TYPE_INT64: { ordinal: 8, size: 8 },\r\n    DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\r\n};\r\nfunction makePointAttribute(name, type, numElements) {\r\n    return {\r\n        name,\r\n        type,\r\n        numElements,\r\n        byteSize: numElements * type.size,\r\n    };\r\n}\r\nconst RGBA_PACKED = makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 4);\r\nconst POINT_ATTRIBUTES = {\r\n    POSITION_CARTESIAN: makePointAttribute(PointAttributeName.POSITION_CARTESIAN, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\r\n    RGBA_PACKED,\r\n    COLOR_PACKED: RGBA_PACKED,\r\n    RGB_PACKED: makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 3),\r\n    NORMAL_FLOATS: makePointAttribute(PointAttributeName.NORMAL_FLOATS, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\r\n    FILLER_1B: makePointAttribute(PointAttributeName.FILLER, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\r\n    INTENSITY: makePointAttribute(PointAttributeName.INTENSITY, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16, 1),\r\n    CLASSIFICATION: makePointAttribute(PointAttributeName.CLASSIFICATION, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\r\n    NORMAL_SPHEREMAPPED: makePointAttribute(PointAttributeName.NORMAL_SPHEREMAPPED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\r\n    NORMAL_OCT16: makePointAttribute(PointAttributeName.NORMAL_OCT16, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\r\n    NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\r\n};\r\nclass PointAttributes {\r\n    constructor(pointAttributeNames = []) {\r\n        this.attributes = [];\r\n        this.byteSize = 0;\r\n        this.size = 0;\r\n        for (let i = 0; i < pointAttributeNames.length; i++) {\r\n            const pointAttributeName = pointAttributeNames[i];\r\n            const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\r\n            this.attributes.push(pointAttribute);\r\n            this.byteSize += pointAttribute.byteSize;\r\n            this.size++;\r\n        }\r\n    }\r\n    add(pointAttribute) {\r\n        this.attributes.push(pointAttribute);\r\n        this.byteSize += pointAttribute.byteSize;\r\n        this.size++;\r\n    }\r\n    hasColors() {\r\n        return this.attributes.find(isColorAttribute) !== undefined;\r\n    }\r\n    hasNormals() {\r\n        return this.attributes.find(isNormalAttribute) !== undefined;\r\n    }\r\n}\r\nfunction isColorAttribute({ name }) {\r\n    return name === PointAttributeName.COLOR_PACKED;\r\n}\r\nfunction isNormalAttribute({ name }) {\r\n    return (name === PointAttributeName.NORMAL_SPHEREMAPPED ||\r\n        name === PointAttributeName.NORMAL_FLOATS ||\r\n        name === PointAttributeName.NORMAL ||\r\n        name === PointAttributeName.NORMAL_OCT16);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/bounds.ts\n\r\n/**\r\n * adapted from mhluska at https://github.com/mrdoob/three.js/issues/1561\r\n */\r\nfunction computeTransformedBoundingBox(box, transform) {\r\n    return new external_three_.Box3().setFromPoints([\r\n        new external_three_.Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\r\n        new external_three_.Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\r\n        new external_three_.Vector3(box.max.x, box.min.y, box.min.z).applyMatrix4(transform),\r\n        new external_three_.Vector3(box.min.x, box.max.y, box.min.z).applyMatrix4(transform),\r\n        new external_three_.Vector3(box.min.x, box.min.y, box.max.z).applyMatrix4(transform),\r\n        new external_three_.Vector3(box.min.x, box.max.y, box.max.z).applyMatrix4(transform),\r\n        new external_three_.Vector3(box.max.x, box.max.y, box.min.z).applyMatrix4(transform),\r\n        new external_three_.Vector3(box.max.x, box.min.y, box.max.z).applyMatrix4(transform),\r\n        new external_three_.Vector3(box.max.x, box.max.y, box.max.z).applyMatrix4(transform),\r\n    ]);\r\n}\r\nfunction createChildAABB(aabb, index) {\r\n    const min = aabb.min.clone();\r\n    const max = aabb.max.clone();\r\n    const size = new external_three_.Vector3().subVectors(max, min);\r\n    // tslint:disable-next-line:no-bitwise\r\n    if ((index & 0b0001) > 0) {\r\n        min.z += size.z / 2;\r\n    }\r\n    else {\r\n        max.z -= size.z / 2;\r\n    }\r\n    // tslint:disable-next-line:no-bitwise\r\n    if ((index & 0b0010) > 0) {\r\n        min.y += size.y / 2;\r\n    }\r\n    else {\r\n        max.y -= size.y / 2;\r\n    }\r\n    // tslint:disable-next-line:no-bitwise\r\n    if ((index & 0b0100) > 0) {\r\n        min.x += size.x / 2;\r\n    }\r\n    else {\r\n        max.x -= size.x / 2;\r\n    }\r\n    return new external_three_.Box3(min, max);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-geometry-node.ts\n/**\r\n * Adapted from Potree.js http://potree.org\r\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\r\n */\r\n\r\n\r\n\r\nconst NODE_STRIDE = 5;\r\nclass PointCloudOctreeGeometryNode extends external_three_.EventDispatcher {\r\n    constructor(name, pcoGeometry, boundingBox) {\r\n        super();\r\n        this.id = PointCloudOctreeGeometryNode.idCount++;\r\n        this.level = 0;\r\n        this.spacing = 0;\r\n        this.hasChildren = false;\r\n        this.children = [\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n        ];\r\n        this.mean = new external_three_.Vector3();\r\n        this.numPoints = 0;\r\n        this.loaded = false;\r\n        this.loading = false;\r\n        this.failed = false;\r\n        this.parent = null;\r\n        this.oneTimeDisposeHandlers = [];\r\n        this.isLeafNode = true;\r\n        this.isTreeNode = false;\r\n        this.isGeometryNode = true;\r\n        this.name = name;\r\n        this.index = getIndexFromName(name);\r\n        this.pcoGeometry = pcoGeometry;\r\n        this.boundingBox = boundingBox;\r\n        this.tightBoundingBox = boundingBox.clone();\r\n        this.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\r\n    }\r\n    dispose() {\r\n        if (!this.geometry || !this.parent) {\r\n            return;\r\n        }\r\n        this.geometry.dispose();\r\n        this.geometry = undefined;\r\n        this.loaded = false;\r\n        this.oneTimeDisposeHandlers.forEach(handler => handler());\r\n        this.oneTimeDisposeHandlers = [];\r\n    }\r\n    /**\r\n     * Gets the url of the binary file for this node.\r\n     */\r\n    getUrl() {\r\n        const geometry = this.pcoGeometry;\r\n        const version = geometry.loader.version;\r\n        const pathParts = [geometry.octreeDir];\r\n        if (geometry.loader && version.equalOrHigher('1.5')) {\r\n            pathParts.push(this.getHierarchyBaseUrl());\r\n            pathParts.push(this.name);\r\n        }\r\n        else if (version.equalOrHigher('1.4')) {\r\n            pathParts.push(this.name);\r\n        }\r\n        else if (version.upTo('1.3')) {\r\n            pathParts.push(this.name);\r\n        }\r\n        return pathParts.join('/');\r\n    }\r\n    /**\r\n     * Gets the url of the hierarchy file for this node.\r\n     */\r\n    getHierarchyUrl() {\r\n        return `${this.pcoGeometry.octreeDir}/${this.getHierarchyBaseUrl()}/${this.name}.hrc`;\r\n    }\r\n    /**\r\n     * Adds the specified node as a child of the current node.\r\n     *\r\n     * @param child\r\n     *    The node which is to be added as a child.\r\n     */\r\n    addChild(child) {\r\n        this.children[child.index] = child;\r\n        this.isLeafNode = false;\r\n        child.parent = this;\r\n    }\r\n    /**\r\n     * Calls the specified callback for the current node (if includeSelf is set to true) and all its\r\n     * children.\r\n     *\r\n     * @param cb\r\n     *    The function which is to be called for each node.\r\n     */\r\n    traverse(cb, includeSelf = true) {\r\n        const stack = includeSelf ? [this] : [];\r\n        let current;\r\n        while ((current = stack.pop()) !== undefined) {\r\n            cb(current);\r\n            for (const child of current.children) {\r\n                if (child !== null) {\r\n                    stack.push(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    load() {\r\n        if (!this.canLoad()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.loading = true;\r\n        this.pcoGeometry.numNodesLoading++;\r\n        this.pcoGeometry.needsUpdate = true;\r\n        let promise;\r\n        if (this.pcoGeometry.loader.version.equalOrHigher('1.5') &&\r\n            this.level % this.pcoGeometry.hierarchyStepSize === 0 &&\r\n            this.hasChildren) {\r\n            promise = this.loadHierachyThenPoints();\r\n        }\r\n        else {\r\n            promise = this.loadPoints();\r\n        }\r\n        return promise.catch(reason => {\r\n            this.loading = false;\r\n            this.failed = true;\r\n            this.pcoGeometry.numNodesLoading--;\r\n            throw reason;\r\n        });\r\n    }\r\n    canLoad() {\r\n        return (!this.loading &&\r\n            !this.loaded &&\r\n            !this.pcoGeometry.disposed &&\r\n            !this.pcoGeometry.loader.disposed &&\r\n            this.pcoGeometry.numNodesLoading < this.pcoGeometry.maxNumNodesLoading);\r\n    }\r\n    loadPoints() {\r\n        this.pcoGeometry.needsUpdate = true;\r\n        return this.pcoGeometry.loader.load(this);\r\n    }\r\n    loadHierachyThenPoints() {\r\n        if (this.level % this.pcoGeometry.hierarchyStepSize !== 0) {\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.resolve(this.pcoGeometry.loader.getUrl(this.getHierarchyUrl()))\r\n            .then(url => this.pcoGeometry.xhrRequest(url, { mode: 'cors' }))\r\n            .then(res => handleFailedRequest(res))\r\n            .then(okRes => okRes.arrayBuffer())\r\n            .then(buffer => handleEmptyBuffer(buffer))\r\n            .then(okBuffer => this.loadHierarchy(this, okBuffer));\r\n    }\r\n    /**\r\n     * Gets the url of the folder where the hierarchy is, relative to the octreeDir.\r\n     */\r\n    getHierarchyBaseUrl() {\r\n        const hierarchyStepSize = this.pcoGeometry.hierarchyStepSize;\r\n        const indices = this.name.substr(1);\r\n        const numParts = Math.floor(indices.length / hierarchyStepSize);\r\n        let path = 'r/';\r\n        for (let i = 0; i < numParts; i++) {\r\n            path += `${indices.substr(i * hierarchyStepSize, hierarchyStepSize)}/`;\r\n        }\r\n        return path.slice(0, -1);\r\n    }\r\n    // tslint:disable:no-bitwise\r\n    loadHierarchy(node, buffer) {\r\n        const view = new DataView(buffer);\r\n        const firstNodeData = this.getNodeData(node.name, 0, view);\r\n        node.numPoints = firstNodeData.numPoints;\r\n        // Nodes which need be visited.\r\n        const stack = [firstNodeData];\r\n        // Nodes which have already been decoded. We will take nodes from the stack and place them here.\r\n        const decoded = [];\r\n        let offset = NODE_STRIDE;\r\n        while (stack.length > 0) {\r\n            const stackNodeData = stack.shift();\r\n            // From the last bit, all the way to the 8th one from the right.\r\n            let mask = 1;\r\n            for (let i = 0; i < 8 && offset + 1 < buffer.byteLength; i++) {\r\n                if ((stackNodeData.children & mask) !== 0) {\r\n                    const nodeData = this.getNodeData(stackNodeData.name + i, offset, view);\r\n                    decoded.push(nodeData); // Node is decoded.\r\n                    stack.push(nodeData); // Need to check its children.\r\n                    offset += NODE_STRIDE; // Move over to the next node in the buffer.\r\n                }\r\n                mask = mask * 2;\r\n            }\r\n        }\r\n        node.pcoGeometry.needsUpdate = true;\r\n        // Map containing all the nodes.\r\n        const nodes = new Map();\r\n        nodes.set(node.name, node);\r\n        decoded.forEach(nodeData => this.addNode(nodeData, node.pcoGeometry, nodes));\r\n        node.loadPoints();\r\n    }\r\n    // tslint:enable:no-bitwise\r\n    getNodeData(name, offset, view) {\r\n        const children = view.getUint8(offset);\r\n        const numPoints = view.getUint32(offset + 1, true);\r\n        return { children: children, numPoints: numPoints, name };\r\n    }\r\n    addNode({ name, numPoints, children }, pco, nodes) {\r\n        const index = getIndexFromName(name);\r\n        const parentName = name.substring(0, name.length - 1);\r\n        const parentNode = nodes.get(parentName);\r\n        const level = name.length - 1;\r\n        const boundingBox = createChildAABB(parentNode.boundingBox, index);\r\n        const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\r\n        node.level = level;\r\n        node.numPoints = numPoints;\r\n        node.hasChildren = children > 0;\r\n        node.spacing = pco.spacing / Math.pow(2, level);\r\n        parentNode.addChild(node);\r\n        nodes.set(name, node);\r\n    }\r\n}\r\nPointCloudOctreeGeometryNode.idCount = 0;\r\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-geometry.ts\n\r\nclass PointCloudOctreeGeometry {\r\n    constructor(loader, boundingBox, tightBoundingBox, offset, xhrRequest) {\r\n        this.loader = loader;\r\n        this.boundingBox = boundingBox;\r\n        this.tightBoundingBox = tightBoundingBox;\r\n        this.offset = offset;\r\n        this.xhrRequest = xhrRequest;\r\n        this.disposed = false;\r\n        this.needsUpdate = true;\r\n        this.octreeDir = '';\r\n        this.hierarchyStepSize = -1;\r\n        this.nodes = {};\r\n        this.numNodesLoading = 0;\r\n        this.maxNumNodesLoading = 3;\r\n        this.spacing = 0;\r\n        this.pointAttributes = new PointAttributes([]);\r\n        this.projection = null;\r\n        this.url = null;\r\n    }\r\n    dispose() {\r\n        this.loader.dispose();\r\n        this.root.traverse(node => node.dispose());\r\n        this.disposed = true;\r\n    }\r\n    addNodeLoadedCallback(callback) {\r\n        this.loader.callbacks.push(callback);\r\n    }\r\n    clearNodeLoadedCallbacks() {\r\n        this.loader.callbacks = [];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-node.ts\n\r\nclass PointCloudOctreeNode extends external_three_.EventDispatcher {\r\n    constructor(geometryNode, sceneNode) {\r\n        super();\r\n        this.pcIndex = undefined;\r\n        this.boundingBoxNode = null;\r\n        this.loaded = true;\r\n        this.isTreeNode = true;\r\n        this.isGeometryNode = false;\r\n        this.geometryNode = geometryNode;\r\n        this.sceneNode = sceneNode;\r\n        this.children = geometryNode.children.slice();\r\n    }\r\n    dispose() {\r\n        this.geometryNode.dispose();\r\n    }\r\n    disposeSceneNode() {\r\n        const node = this.sceneNode;\r\n        if (node.geometry instanceof external_three_.BufferGeometry) {\r\n            const attributes = node.geometry.attributes;\r\n            // tslint:disable-next-line:forin\r\n            for (const key in attributes) {\r\n                if (key === 'position') {\r\n                    delete attributes[key].array;\r\n                }\r\n                delete attributes[key];\r\n            }\r\n            node.geometry.dispose();\r\n            node.geometry = undefined;\r\n        }\r\n    }\r\n    traverse(cb, includeSelf) {\r\n        this.geometryNode.traverse(cb, includeSelf);\r\n    }\r\n    get id() {\r\n        return this.geometryNode.id;\r\n    }\r\n    get name() {\r\n        return this.geometryNode.name;\r\n    }\r\n    get level() {\r\n        return this.geometryNode.level;\r\n    }\r\n    get isLeafNode() {\r\n        return this.geometryNode.isLeafNode;\r\n    }\r\n    get numPoints() {\r\n        return this.geometryNode.numPoints;\r\n    }\r\n    get index() {\r\n        return this.geometryNode.index;\r\n    }\r\n    get boundingSphere() {\r\n        return this.geometryNode.boundingSphere;\r\n    }\r\n    get boundingBox() {\r\n        return this.geometryNode.boundingBox;\r\n    }\r\n    get spacing() {\r\n        return this.geometryNode.spacing;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/math.ts\nfunction clamp(value, min, max) {\r\n    return Math.min(Math.max(min, value), max);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree-picker.ts\n\r\n\r\n\r\n\r\nclass PointCloudOctreePicker {\r\n    dispose() {\r\n        if (this.pickState) {\r\n            this.pickState.material.dispose();\r\n            this.pickState.renderTarget.dispose();\r\n        }\r\n    }\r\n    pick(renderer, camera, ray, octrees, params = {}) {\r\n        if (octrees.length === 0) {\r\n            return null;\r\n        }\r\n        const pickState = this.pickState\r\n            ? this.pickState\r\n            : (this.pickState = PointCloudOctreePicker.getPickState());\r\n        const pickMaterial = pickState.material;\r\n        const pixelRatio = renderer.getPixelRatio();\r\n        const width = Math.ceil(renderer.domElement.clientWidth * pixelRatio);\r\n        const height = Math.ceil(renderer.domElement.clientHeight * pixelRatio);\r\n        PointCloudOctreePicker.updatePickRenderTarget(this.pickState, width, height);\r\n        const pixelPosition = PointCloudOctreePicker.helperVec3; // Use helper vector to prevent extra allocations.\r\n        if (params.pixelPosition) {\r\n            pixelPosition.copy(params.pixelPosition);\r\n        }\r\n        else {\r\n            pixelPosition.addVectors(camera.position, ray.direction).project(camera);\r\n            pixelPosition.x = (pixelPosition.x + 1) * width * 0.5;\r\n            pixelPosition.y = (pixelPosition.y + 1) * height * 0.5;\r\n        }\r\n        const pickWndSize = Math.floor((params.pickWindowSize || DEFAULT_PICK_WINDOW_SIZE) * pixelRatio);\r\n        const halfPickWndSize = (pickWndSize - 1) / 2;\r\n        const x = Math.floor(clamp(pixelPosition.x - halfPickWndSize, 0, width));\r\n        const y = Math.floor(clamp(pixelPosition.y - halfPickWndSize, 0, height));\r\n        PointCloudOctreePicker.prepareRender(renderer, x, y, pickWndSize, pickMaterial, pickState);\r\n        const renderedNodes = PointCloudOctreePicker.render(renderer, camera, pickMaterial, octrees, ray, pickState, params);\r\n        // Cleanup\r\n        pickMaterial.clearVisibleNodeTextureOffsets();\r\n        // Read back image and decode hit point\r\n        const pixels = PointCloudOctreePicker.readPixels(renderer, x, y, pickWndSize);\r\n        const hit = PointCloudOctreePicker.findHit(pixels, pickWndSize);\r\n        return PointCloudOctreePicker.getPickPoint(hit, renderedNodes);\r\n    }\r\n    static prepareRender(renderer, x, y, pickWndSize, pickMaterial, pickState) {\r\n        // Render the intersected nodes onto the pick render target, clipping to a small pick window.\r\n        renderer.setScissor(x, y, pickWndSize, pickWndSize);\r\n        renderer.setScissorTest(true);\r\n        renderer.state.buffers.depth.setTest(pickMaterial.depthTest);\r\n        renderer.state.buffers.depth.setMask(pickMaterial.depthWrite);\r\n        renderer.state.setBlending(external_three_.NoBlending);\r\n        renderer.setRenderTarget(pickState.renderTarget);\r\n        // Save the current clear color and clear the renderer with black color and alpha 0.\r\n        renderer.getClearColor(this.clearColor);\r\n        const oldClearAlpha = renderer.getClearAlpha();\r\n        renderer.setClearColor(COLOR_BLACK, 0);\r\n        renderer.clear(true, true, true);\r\n        renderer.setClearColor(this.clearColor, oldClearAlpha);\r\n    }\r\n    static render(renderer, camera, pickMaterial, octrees, ray, pickState, params) {\r\n        const renderedNodes = [];\r\n        for (const octree of octrees) {\r\n            // Get all the octree nodes which intersect the picking ray. We only need to render those.\r\n            const nodes = PointCloudOctreePicker.nodesOnRay(octree, ray);\r\n            if (!nodes.length) {\r\n                continue;\r\n            }\r\n            PointCloudOctreePicker.updatePickMaterial(pickMaterial, octree.material, params);\r\n            pickMaterial.updateMaterial(octree, nodes, camera, renderer);\r\n            if (params.onBeforePickRender) {\r\n                params.onBeforePickRender(pickMaterial, pickState.renderTarget);\r\n            }\r\n            // Create copies of the nodes so we can render them differently than in the normal point cloud.\r\n            pickState.scene.children = PointCloudOctreePicker.createTempNodes(octree, nodes, pickMaterial, renderedNodes.length);\r\n            renderer.render(pickState.scene, camera);\r\n            nodes.forEach(node => renderedNodes.push({ node, octree }));\r\n        }\r\n        return renderedNodes;\r\n    }\r\n    static nodesOnRay(octree, ray) {\r\n        const nodesOnRay = [];\r\n        const rayClone = ray.clone();\r\n        for (const node of octree.visibleNodes) {\r\n            const sphere = PointCloudOctreePicker.helperSphere\r\n                .copy(node.boundingSphere)\r\n                .applyMatrix4(octree.matrixWorld);\r\n            if (rayClone.intersectsSphere(sphere)) {\r\n                nodesOnRay.push(node);\r\n            }\r\n        }\r\n        return nodesOnRay;\r\n    }\r\n    static readPixels(renderer, x, y, pickWndSize) {\r\n        // Read the pixel from the pick render target.\r\n        const pixels = new Uint8Array(4 * pickWndSize * pickWndSize);\r\n        renderer.readRenderTargetPixels(renderer.getRenderTarget(), x, y, pickWndSize, pickWndSize, pixels);\r\n        renderer.setScissorTest(false);\r\n        renderer.setRenderTarget(null);\r\n        return pixels;\r\n    }\r\n    static createTempNodes(octree, nodes, pickMaterial, nodeIndexOffset) {\r\n        const tempNodes = [];\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n            const sceneNode = node.sceneNode;\r\n            const tempNode = new external_three_.Points(sceneNode.geometry, pickMaterial);\r\n            tempNode.matrix = sceneNode.matrix;\r\n            tempNode.matrixWorld = sceneNode.matrixWorld;\r\n            tempNode.matrixAutoUpdate = false;\r\n            tempNode.frustumCulled = false;\r\n            const nodeIndex = nodeIndexOffset + i + 1;\r\n            if (nodeIndex > 255) {\r\n                console.error('More than 255 nodes for pick are not supported.');\r\n            }\r\n            tempNode.onBeforeRender = PointCloudMaterial.makeOnBeforeRender(octree, node, nodeIndex);\r\n            tempNodes.push(tempNode);\r\n        }\r\n        return tempNodes;\r\n    }\r\n    static updatePickMaterial(pickMaterial, nodeMaterial, params) {\r\n        pickMaterial.pointSizeType = nodeMaterial.pointSizeType;\r\n        pickMaterial.shape = nodeMaterial.shape;\r\n        pickMaterial.size = nodeMaterial.size;\r\n        pickMaterial.minSize = nodeMaterial.minSize;\r\n        pickMaterial.maxSize = nodeMaterial.maxSize;\r\n        pickMaterial.classification = nodeMaterial.classification;\r\n        pickMaterial.useFilterByNormal = nodeMaterial.useFilterByNormal;\r\n        pickMaterial.filterByNormalThreshold = nodeMaterial.filterByNormalThreshold;\r\n        if (params.pickOutsideClipRegion) {\r\n            pickMaterial.clipMode = ClipMode.DISABLED;\r\n        }\r\n        else {\r\n            pickMaterial.clipMode = nodeMaterial.clipMode;\r\n            pickMaterial.setClipBoxes(nodeMaterial.clipMode === ClipMode.CLIP_OUTSIDE ? nodeMaterial.clipBoxes : []);\r\n        }\r\n    }\r\n    static updatePickRenderTarget(pickState, width, height) {\r\n        if (pickState.renderTarget.width === width && pickState.renderTarget.height === height) {\r\n            return;\r\n        }\r\n        pickState.renderTarget.dispose();\r\n        pickState.renderTarget = PointCloudOctreePicker.makePickRenderTarget();\r\n        pickState.renderTarget.setSize(width, height);\r\n    }\r\n    static makePickRenderTarget() {\r\n        return new external_three_.WebGLRenderTarget(1, 1, {\r\n            minFilter: external_three_.LinearFilter,\r\n            magFilter: external_three_.NearestFilter,\r\n            format: external_three_.RGBAFormat,\r\n        });\r\n    }\r\n    static findHit(pixels, pickWndSize) {\r\n        const ibuffer = new Uint32Array(pixels.buffer);\r\n        // Find closest hit inside pixelWindow boundaries\r\n        let min = Number.MAX_VALUE;\r\n        let hit = null;\r\n        for (let u = 0; u < pickWndSize; u++) {\r\n            for (let v = 0; v < pickWndSize; v++) {\r\n                const offset = u + v * pickWndSize;\r\n                const distance = Math.pow(u - (pickWndSize - 1) / 2, 2) + Math.pow(v - (pickWndSize - 1) / 2, 2);\r\n                const pcIndex = pixels[4 * offset + 3];\r\n                pixels[4 * offset + 3] = 0;\r\n                const pIndex = ibuffer[offset];\r\n                if (pcIndex > 0 && distance < min) {\r\n                    hit = {\r\n                        pIndex: pIndex,\r\n                        pcIndex: pcIndex - 1,\r\n                    };\r\n                    min = distance;\r\n                }\r\n            }\r\n        }\r\n        return hit;\r\n    }\r\n    static getPickPoint(hit, nodes) {\r\n        if (!hit) {\r\n            return null;\r\n        }\r\n        const point = {};\r\n        const points = nodes[hit.pcIndex] && nodes[hit.pcIndex].node.sceneNode;\r\n        if (!points) {\r\n            return null;\r\n        }\r\n        point.pointCloud = nodes[hit.pcIndex].octree;\r\n        const attributes = points.geometry.attributes;\r\n        for (const property in attributes) {\r\n            if (!attributes.hasOwnProperty(property)) {\r\n                continue;\r\n            }\r\n            const values = attributes[property];\r\n            // tslint:disable-next-line:prefer-switch\r\n            if (property === 'position') {\r\n                PointCloudOctreePicker.addPositionToPickPoint(point, hit, values, points);\r\n            }\r\n            else if (property === 'normal') {\r\n                PointCloudOctreePicker.addNormalToPickPoint(point, hit, values, points);\r\n            }\r\n            else if (property === 'indices') {\r\n                // TODO\r\n            }\r\n            else {\r\n                if (values.itemSize === 1) {\r\n                    point[property] = values.array[hit.pIndex];\r\n                }\r\n                else {\r\n                    const value = [];\r\n                    for (let j = 0; j < values.itemSize; j++) {\r\n                        value.push(values.array[values.itemSize * hit.pIndex + j]);\r\n                    }\r\n                    point[property] = value;\r\n                }\r\n            }\r\n        }\r\n        return point;\r\n    }\r\n    static addPositionToPickPoint(point, hit, values, points) {\r\n        point.position = new external_three_.Vector3()\r\n            .fromBufferAttribute(values, hit.pIndex)\r\n            .applyMatrix4(points.matrixWorld);\r\n    }\r\n    static addNormalToPickPoint(point, hit, values, points) {\r\n        const normal = new external_three_.Vector3().fromBufferAttribute(values, hit.pIndex);\r\n        const normal4 = new external_three_.Vector4(normal.x, normal.y, normal.z, 0).applyMatrix4(points.matrixWorld);\r\n        normal.set(normal4.x, normal4.y, normal4.z);\r\n        point.normal = normal;\r\n    }\r\n    static getPickState() {\r\n        const scene = new external_three_.Scene();\r\n        scene.matrixAutoUpdate = false;\r\n        const material = new PointCloudMaterial();\r\n        material.pointColorType = PointColorType.POINT_INDEX;\r\n        return {\r\n            renderTarget: PointCloudOctreePicker.makePickRenderTarget(),\r\n            material: material,\r\n            scene: scene,\r\n        };\r\n    }\r\n}\r\nPointCloudOctreePicker.helperVec3 = new external_three_.Vector3();\r\nPointCloudOctreePicker.helperSphere = new external_three_.Sphere();\r\nPointCloudOctreePicker.clearColor = new external_three_.Color();\r\n\n;// CONCATENATED MODULE: ./src/loading2/octree-geometry.ts\n\r\nclass OctreeGeometry {\r\n    constructor(loader, boundingBox) {\r\n        this.loader = loader;\r\n        this.boundingBox = boundingBox;\r\n        this.maxNumNodesLoading = 3;\r\n        this.numNodesLoading = 0;\r\n        this.needsUpdate = true;\r\n        this.disposed = false;\r\n        this.pointAttributes = null;\r\n        this.spacing = 0;\r\n        this.url = null;\r\n        this.tightBoundingBox = this.boundingBox.clone();\r\n        this.boundingSphere = this.boundingBox.getBoundingSphere(new external_three_.Sphere());\r\n        this.tightBoundingSphere = this.boundingSphere.clone();\r\n    }\r\n    dispose() {\r\n        this.root.traverse((node) => node.dispose());\r\n        this.disposed = true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/point-cloud-tree.ts\n\r\nclass PointCloudTree extends external_three_.Object3D {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.root = null;\r\n    }\r\n    initialized() {\r\n        return this.root !== null;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/point-cloud-octree.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass PointCloudOctree extends PointCloudTree {\r\n    constructor(potree, pcoGeometry, material) {\r\n        super();\r\n        this.disposed = false;\r\n        this.level = 0;\r\n        this.maxLevel = Infinity;\r\n        /**\r\n         * The minimum radius of a node's bounding sphere on the screen in order to be displayed.\r\n         */\r\n        this.minNodePixelSize = DEFAULT_MIN_NODE_PIXEL_SIZE;\r\n        this.root = null;\r\n        this.boundingBoxNodes = [];\r\n        this.visibleNodes = [];\r\n        this.visibleGeometry = [];\r\n        this.numVisiblePoints = 0;\r\n        this.showBoundingBox = false;\r\n        this.visibleBounds = new external_three_.Box3();\r\n        this.name = '';\r\n        this.potree = potree;\r\n        this.root = pcoGeometry.root;\r\n        this.pcoGeometry = pcoGeometry;\r\n        this.boundingBox = pcoGeometry.boundingBox;\r\n        this.boundingSphere = this.boundingBox.getBoundingSphere(new external_three_.Sphere());\r\n        this.position.copy(pcoGeometry.offset);\r\n        this.updateMatrix();\r\n        this.material =\r\n            material || pcoGeometry instanceof OctreeGeometry\r\n                ? new PointCloudMaterial({ colorRgba: true })\r\n                : new PointCloudMaterial();\r\n        this.initMaterial(this.material);\r\n    }\r\n    initMaterial(material) {\r\n        this.updateMatrixWorld(true);\r\n        const { min, max } = computeTransformedBoundingBox(this.pcoGeometry.tightBoundingBox || this.getBoundingBoxWorld(), this.matrixWorld);\r\n        const bWidth = max.z - min.z;\r\n        material.heightMin = min.z - 0.2 * bWidth;\r\n        material.heightMax = max.z + 0.2 * bWidth;\r\n    }\r\n    dispose() {\r\n        if (this.root) {\r\n            this.root.dispose();\r\n        }\r\n        this.pcoGeometry.root.traverse(n => this.potree.lru.remove(n));\r\n        this.pcoGeometry.dispose();\r\n        this.material.dispose();\r\n        this.visibleNodes = [];\r\n        this.visibleGeometry = [];\r\n        if (this.picker) {\r\n            this.picker.dispose();\r\n            this.picker = undefined;\r\n        }\r\n        this.disposed = true;\r\n    }\r\n    get pointSizeType() {\r\n        return this.material.pointSizeType;\r\n    }\r\n    set pointSizeType(value) {\r\n        this.material.pointSizeType = value;\r\n    }\r\n    toTreeNode(geometryNode, parent) {\r\n        const points = new external_three_.Points(geometryNode.geometry, this.material);\r\n        const node = new PointCloudOctreeNode(geometryNode, points);\r\n        points.name = geometryNode.name;\r\n        points.position.copy(geometryNode.boundingBox.min);\r\n        points.frustumCulled = false;\r\n        points.onBeforeRender = PointCloudMaterial.makeOnBeforeRender(this, node);\r\n        if (parent) {\r\n            parent.sceneNode.add(points);\r\n            parent.children[geometryNode.index] = node;\r\n            geometryNode.oneTimeDisposeHandlers.push(() => {\r\n                node.disposeSceneNode();\r\n                parent.sceneNode.remove(node.sceneNode);\r\n                // Replace the tree node (rendered and in the GPU) with the geometry node.\r\n                parent.children[geometryNode.index] = geometryNode;\r\n            });\r\n        }\r\n        else {\r\n            this.root = node;\r\n            this.add(points);\r\n        }\r\n        return node;\r\n    }\r\n    updateVisibleBounds() {\r\n        const bounds = this.visibleBounds;\r\n        bounds.min.set(Infinity, Infinity, Infinity);\r\n        bounds.max.set(-Infinity, -Infinity, -Infinity);\r\n        for (const node of this.visibleNodes) {\r\n            if (node.isLeafNode) {\r\n                bounds.expandByPoint(node.boundingBox.min);\r\n                bounds.expandByPoint(node.boundingBox.max);\r\n            }\r\n        }\r\n    }\r\n    updateBoundingBoxes() {\r\n        if (!this.showBoundingBox || !this.parent) {\r\n            return;\r\n        }\r\n        let bbRoot = this.parent.getObjectByName('bbroot');\r\n        if (!bbRoot) {\r\n            bbRoot = new external_three_.Object3D();\r\n            bbRoot.name = 'bbroot';\r\n            this.parent.add(bbRoot);\r\n        }\r\n        const visibleBoxes = [];\r\n        for (const node of this.visibleNodes) {\r\n            if (node.boundingBoxNode !== undefined && node.isLeafNode) {\r\n                visibleBoxes.push(node.boundingBoxNode);\r\n            }\r\n        }\r\n        bbRoot.children = visibleBoxes;\r\n    }\r\n    updateMatrixWorld(force) {\r\n        if (this.matrixAutoUpdate === true) {\r\n            this.updateMatrix();\r\n        }\r\n        if (this.matrixWorldNeedsUpdate === true || force === true) {\r\n            if (!this.parent) {\r\n                this.matrixWorld.copy(this.matrix);\r\n            }\r\n            else {\r\n                this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\r\n            }\r\n            this.matrixWorldNeedsUpdate = false;\r\n            force = true;\r\n        }\r\n    }\r\n    hideDescendants(object) {\r\n        const toHide = [];\r\n        addVisibleChildren(object);\r\n        while (toHide.length > 0) {\r\n            const objToHide = toHide.shift();\r\n            objToHide.visible = false;\r\n            addVisibleChildren(objToHide);\r\n        }\r\n        function addVisibleChildren(obj) {\r\n            for (const child of obj.children) {\r\n                if (child.visible) {\r\n                    toHide.push(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    moveToOrigin() {\r\n        this.position.set(0, 0, 0); // Reset, then the matrix will be updated in getBoundingBoxWorld()\r\n        this.position.set(0, 0, 0).sub(this.getBoundingBoxWorld().getCenter(new external_three_.Vector3()));\r\n    }\r\n    moveToGroundPlane() {\r\n        this.position.y += -this.getBoundingBoxWorld().min.y;\r\n    }\r\n    getBoundingBoxWorld() {\r\n        this.updateMatrixWorld(true);\r\n        return computeTransformedBoundingBox(this.boundingBox, this.matrixWorld);\r\n    }\r\n    getVisibleExtent() {\r\n        return this.visibleBounds.applyMatrix4(this.matrixWorld);\r\n    }\r\n    pick(renderer, camera, ray, params = {}) {\r\n        this.picker = this.picker || new PointCloudOctreePicker();\r\n        return this.picker.pick(renderer, camera, ray, [this], params);\r\n    }\r\n    get progress() {\r\n        return this.visibleGeometry.length === 0\r\n            ? 0\r\n            : this.visibleNodes.length / this.visibleGeometry.length;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/features.ts\nconst canvas = document.createElement('canvas');\r\nconst gl = canvas.getContext('webgl');\r\nconst FEATURES = {\r\n    SHADER_INTERPOLATION: hasExtension('EXT_frag_depth') && hasMinVaryingVectors(8),\r\n    SHADER_SPLATS: hasExtension('EXT_frag_depth') && hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\r\n    SHADER_EDL: hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\r\n    precision: getPrecision(),\r\n};\r\nfunction hasExtension(ext) {\r\n    return gl !== null && Boolean(gl.getExtension(ext));\r\n}\r\nfunction hasMinVaryingVectors(value) {\r\n    return gl !== null && gl.getParameter(gl.MAX_VARYING_VECTORS) >= value;\r\n}\r\nfunction getPrecision() {\r\n    if (gl === null) {\r\n        return '';\r\n    }\r\n    const vsHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);\r\n    const vsMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);\r\n    const fsHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\r\n    const fsMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);\r\n    const highpAvailable = vsHighpFloat && fsHighpFloat && vsHighpFloat.precision > 0 && fsHighpFloat.precision > 0;\r\n    const mediumpAvailable = vsMediumpFloat &&\r\n        fsMediumpFloat &&\r\n        vsMediumpFloat.precision > 0 &&\r\n        fsMediumpFloat.precision > 0;\r\n    return highpAvailable ? 'highp' : mediumpAvailable ? 'mediump' : 'lowp';\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/async-blocking-queue.ts\nclass AsyncBlockingQueue {\r\n    constructor() {\r\n        this.resolvers = [];\r\n        this.promises = [];\r\n    }\r\n    enqueue(t) {\r\n        if (!this.resolvers.length) {\r\n            this.add();\r\n        }\r\n        const resolve = this.resolvers.shift();\r\n        resolve(t);\r\n    }\r\n    dequeue() {\r\n        if (!this.promises.length) {\r\n            this.add();\r\n        }\r\n        return this.promises.shift();\r\n    }\r\n    add() {\r\n        this.promises.push(new Promise(resolve => {\r\n            this.resolvers.push(resolve);\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/worker-pool.ts\n\r\nclass AutoTerminatingWorker {\r\n    constructor(wrappedWorker, maxIdle) {\r\n        this.wrappedWorker = wrappedWorker;\r\n        this.maxIdle = maxIdle;\r\n        this.timeoutId = undefined;\r\n        this.terminated = false;\r\n    }\r\n    get worker() {\r\n        return this.wrappedWorker;\r\n    }\r\n    get isTerminated() {\r\n        return this.terminated;\r\n    }\r\n    markIdle() {\r\n        this.timeoutId = window.setTimeout(() => {\r\n            this.terminated = true;\r\n            this.wrappedWorker.terminate();\r\n        }, this.maxIdle);\r\n    }\r\n    markInUse() {\r\n        if (this.timeoutId) {\r\n            window.clearTimeout(this.timeoutId);\r\n        }\r\n    }\r\n}\r\nclass WorkerPool {\r\n    constructor(maxWorkers, workerType) {\r\n        this.maxWorkers = maxWorkers;\r\n        this.workerType = workerType;\r\n        this.pool = new AsyncBlockingQueue();\r\n        this.poolSize = 0;\r\n    }\r\n    /**\r\n     * Returns a worker promise which is resolved when one is available.\r\n     */\r\n    getWorker() {\r\n        // If the number of active workers is smaller than the maximum, return a new one.\r\n        // Otherwise, return a promise for worker from the pool.\r\n        if (this.poolSize < this.maxWorkers) {\r\n            this.poolSize++;\r\n            return Promise.resolve(new AutoTerminatingWorker(new this.workerType(), WorkerPool.POOL_MAX_IDLE));\r\n        }\r\n        else {\r\n            return this.pool.dequeue().then(worker => {\r\n                worker.markInUse();\r\n                // If the dequeued worker has been terminated, decrease the pool size and make a recursive call to get a new worker\r\n                if (worker.isTerminated) {\r\n                    this.poolSize--;\r\n                    return this.getWorker();\r\n                }\r\n                return worker;\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Releases a Worker back into the pool\r\n     * @param worker\r\n     */\r\n    releaseWorker(worker) {\r\n        worker.markIdle();\r\n        this.pool.enqueue(worker);\r\n    }\r\n}\r\n/**\r\n * The maximum amount of idle time that can elapse before a worker from this pool is automatically terminated\r\n */\r\nWorkerPool.POOL_MAX_IDLE = 7000;\r\n\n;// CONCATENATED MODULE: ./src/version.ts\nclass Version {\r\n    constructor(version) {\r\n        this.versionMinor = 0;\r\n        this.version = version;\r\n        const vmLength = version.indexOf('.') === -1 ? version.length : version.indexOf('.');\r\n        this.versionMajor = parseInt(version.substr(0, vmLength), 10);\r\n        this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\r\n        if (isNaN(this.versionMinor)) {\r\n            this.versionMinor = 0;\r\n        }\r\n    }\r\n    newerThan(version) {\r\n        const v = new Version(version);\r\n        if (this.versionMajor > v.versionMajor) {\r\n            return true;\r\n        }\r\n        else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    equalOrHigher(version) {\r\n        const v = new Version(version);\r\n        if (this.versionMajor > v.versionMajor) {\r\n            return true;\r\n        }\r\n        else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    upTo(version) {\r\n        return !this.newerThan(version);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/loading/binary-loader.ts\n// -------------------------------------------------------------------------------------------------\r\n// Converted to Typescript and adapted from https://github.com/potree/potree\r\n// -------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\nclass BinaryLoader {\r\n    constructor({ getUrl = s => Promise.resolve(s), version, boundingBox, scale, xhrRequest, }) {\r\n        this.disposed = false;\r\n        if (typeof version === 'string') {\r\n            this.version = new Version(version);\r\n        }\r\n        else {\r\n            this.version = version;\r\n        }\r\n        this.xhrRequest = xhrRequest;\r\n        this.getUrl = getUrl;\r\n        this.boundingBox = boundingBox;\r\n        this.scale = scale;\r\n        this.callbacks = [];\r\n    }\r\n    dispose() {\r\n        this.disposed = true;\r\n    }\r\n    load(node) {\r\n        if (node.loaded || this.disposed) {\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.resolve(this.getUrl(this.getNodeUrl(node)))\r\n            .then(url => this.xhrRequest(url, { mode: 'cors' }))\r\n            .then(res => handleFailedRequest(res))\r\n            .then(okRes => okRes.arrayBuffer())\r\n            .then(buffer => handleEmptyBuffer(buffer))\r\n            .then(okBuffer => {\r\n            return new Promise(resolve => this.parse(node, okBuffer, resolve));\r\n        });\r\n    }\r\n    getNodeUrl(node) {\r\n        let url = node.getUrl();\r\n        if (this.version.equalOrHigher('1.4')) {\r\n            url += '.bin';\r\n        }\r\n        return url;\r\n    }\r\n    parse(node, buffer, resolve) {\r\n        if (this.disposed) {\r\n            resolve();\r\n            return;\r\n        }\r\n        BinaryLoader.WORKER_POOL.getWorker().then(autoTerminatingWorker => {\r\n            const pointAttributes = node.pcoGeometry.pointAttributes;\r\n            const numPoints = buffer.byteLength / pointAttributes.byteSize;\r\n            if (this.version.upTo('1.5')) {\r\n                node.numPoints = numPoints;\r\n            }\r\n            autoTerminatingWorker.worker.onmessage = (e) => {\r\n                if (this.disposed) {\r\n                    resolve();\r\n                    BinaryLoader.WORKER_POOL.releaseWorker(autoTerminatingWorker);\r\n                    return;\r\n                }\r\n                const data = e.data;\r\n                const geometry = (node.geometry = node.geometry || new external_three_.BufferGeometry());\r\n                geometry.boundingBox = node.boundingBox;\r\n                this.addBufferAttributes(geometry, data.attributeBuffers);\r\n                this.addIndices(geometry, data.indices);\r\n                this.addNormalAttribute(geometry, numPoints);\r\n                node.mean = new external_three_.Vector3().fromArray(data.mean);\r\n                node.tightBoundingBox = this.getTightBoundingBox(data.tightBoundingBox);\r\n                node.loaded = true;\r\n                node.loading = false;\r\n                node.failed = false;\r\n                node.pcoGeometry.numNodesLoading--;\r\n                node.pcoGeometry.needsUpdate = true;\r\n                this.callbacks.forEach(callback => callback(node));\r\n                resolve();\r\n                BinaryLoader.WORKER_POOL.releaseWorker(autoTerminatingWorker);\r\n            };\r\n            const message = {\r\n                buffer,\r\n                pointAttributes,\r\n                version: this.version.version,\r\n                min: node.boundingBox.min.toArray(),\r\n                offset: node.pcoGeometry.offset.toArray(),\r\n                scale: this.scale,\r\n                spacing: node.spacing,\r\n                hasChildren: node.hasChildren,\r\n            };\r\n            autoTerminatingWorker.worker.postMessage(message, [message.buffer]);\r\n        });\r\n    }\r\n    getTightBoundingBox({ min, max }) {\r\n        const box = new external_three_.Box3(new external_three_.Vector3().fromArray(min), new external_three_.Vector3().fromArray(max));\r\n        box.max.sub(box.min);\r\n        box.min.set(0, 0, 0);\r\n        return box;\r\n    }\r\n    addBufferAttributes(geometry, buffers) {\r\n        Object.keys(buffers).forEach(property => {\r\n            const buffer = buffers[property].buffer;\r\n            if (this.isAttribute(property, PointAttributeName.POSITION_CARTESIAN)) {\r\n                geometry.setAttribute('position', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\r\n            }\r\n            else if (this.isAttribute(property, PointAttributeName.COLOR_PACKED)) {\r\n                geometry.setAttribute('color', new external_three_.BufferAttribute(new Uint8Array(buffer), 3, true));\r\n            }\r\n            else if (this.isAttribute(property, PointAttributeName.INTENSITY)) {\r\n                geometry.setAttribute('intensity', new external_three_.BufferAttribute(new Float32Array(buffer), 1));\r\n            }\r\n            else if (this.isAttribute(property, PointAttributeName.CLASSIFICATION)) {\r\n                geometry.setAttribute('classification', new external_three_.BufferAttribute(new Uint8Array(buffer), 1));\r\n            }\r\n            else if (this.isAttribute(property, PointAttributeName.NORMAL_SPHEREMAPPED)) {\r\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\r\n            }\r\n            else if (this.isAttribute(property, PointAttributeName.NORMAL_OCT16)) {\r\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\r\n            }\r\n            else if (this.isAttribute(property, PointAttributeName.NORMAL)) {\r\n                geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\r\n            }\r\n        });\r\n    }\r\n    addIndices(geometry, indices) {\r\n        const indicesAttribute = new external_three_.Uint8BufferAttribute(indices, 4);\r\n        indicesAttribute.normalized = true;\r\n        geometry.setAttribute('indices', indicesAttribute);\r\n    }\r\n    addNormalAttribute(geometry, numPoints) {\r\n        if (!geometry.getAttribute('normal')) {\r\n            const buffer = new Float32Array(numPoints * 3);\r\n            geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\r\n        }\r\n    }\r\n    isAttribute(property, name) {\r\n        return parseInt(property, 10) === name;\r\n    }\r\n}\r\nBinaryLoader.WORKER_POOL = new WorkerPool(32, (__webpack_require__(91)/* [\"default\"] */ .A));\r\n\n;// CONCATENATED MODULE: ./src/loading/load-poc.ts\n// -------------------------------------------------------------------------------------------------\r\n// Converted to Typescript and adapted from https://github.com/potree/potree\r\n// -------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param url\r\n *    The url of the point cloud file (usually cloud.js).\r\n * @param getUrl\r\n *    Function which receives the relative URL of a point cloud chunk file which is to be loaded\r\n *    and shoud return a new url (e.g. signed) in the form of a string or a promise.\r\n * @param xhrRequest An arrow function for a fetch request\r\n * @returns\r\n *    An observable which emits once when the first LOD of the point cloud is loaded.\r\n */\r\nfunction loadPOC(url, getUrl, xhrRequest) {\r\n    return Promise.resolve(getUrl(url)).then(transformedUrl => {\r\n        return xhrRequest(transformedUrl, { mode: 'cors' })\r\n            .then(res => handleFailedRequest(res))\r\n            .then(okRes => okRes.json())\r\n            .then(parse(transformedUrl, getUrl, xhrRequest));\r\n    });\r\n}\r\nfunction parse(url, getUrl, xhrRequest) {\r\n    return (data) => {\r\n        const { offset, boundingBox, tightBoundingBox } = getBoundingBoxes(data);\r\n        const loader = new BinaryLoader({\r\n            getUrl,\r\n            version: data.version,\r\n            boundingBox,\r\n            scale: data.scale,\r\n            xhrRequest,\r\n        });\r\n        const pco = new PointCloudOctreeGeometry(loader, boundingBox, tightBoundingBox, offset, xhrRequest);\r\n        pco.url = url;\r\n        pco.octreeDir = data.octreeDir;\r\n        pco.needsUpdate = true;\r\n        pco.spacing = data.spacing;\r\n        pco.hierarchyStepSize = data.hierarchyStepSize;\r\n        pco.projection = data.projection;\r\n        pco.offset = offset;\r\n        pco.pointAttributes = new PointAttributes(data.pointAttributes);\r\n        const nodes = {};\r\n        const version = new Version(data.version);\r\n        return loadRoot(pco, data, nodes, version).then(() => {\r\n            if (version.upTo('1.4')) {\r\n                loadRemainingHierarchy(pco, data, nodes);\r\n            }\r\n            pco.nodes = nodes;\r\n            return pco;\r\n        });\r\n    };\r\n}\r\nfunction getBoundingBoxes(data) {\r\n    const min = new external_three_.Vector3(data.boundingBox.lx, data.boundingBox.ly, data.boundingBox.lz);\r\n    const max = new external_three_.Vector3(data.boundingBox.ux, data.boundingBox.uy, data.boundingBox.uz);\r\n    const boundingBox = new external_three_.Box3(min, max);\r\n    const tightBoundingBox = boundingBox.clone();\r\n    const offset = min.clone();\r\n    if (data.tightBoundingBox) {\r\n        const { lx, ly, lz, ux, uy, uz } = data.tightBoundingBox;\r\n        tightBoundingBox.min.set(lx, ly, lz);\r\n        tightBoundingBox.max.set(ux, uy, uz);\r\n    }\r\n    boundingBox.min.sub(offset);\r\n    boundingBox.max.sub(offset);\r\n    tightBoundingBox.min.sub(offset);\r\n    tightBoundingBox.max.sub(offset);\r\n    return { offset, boundingBox, tightBoundingBox };\r\n}\r\nfunction loadRoot(pco, data, nodes, version) {\r\n    const name = 'r';\r\n    const root = new PointCloudOctreeGeometryNode(name, pco, pco.boundingBox);\r\n    root.hasChildren = true;\r\n    root.spacing = pco.spacing;\r\n    if (version.upTo('1.5')) {\r\n        root.numPoints = data.hierarchy[0][1];\r\n    }\r\n    else {\r\n        root.numPoints = 0;\r\n    }\r\n    pco.root = root;\r\n    nodes[name] = root;\r\n    return pco.root.load();\r\n}\r\nfunction loadRemainingHierarchy(pco, data, nodes) {\r\n    for (let i = 1; i < data.hierarchy.length; i++) {\r\n        const [name, numPoints] = data.hierarchy[i];\r\n        const { index, parentName, level } = parseName(name);\r\n        const parentNode = nodes[parentName];\r\n        const boundingBox = createChildAABB(parentNode.boundingBox, index);\r\n        const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\r\n        node.level = level;\r\n        node.numPoints = numPoints;\r\n        node.spacing = pco.spacing / Math.pow(2, node.level);\r\n        nodes[name] = node;\r\n        parentNode.addChild(node);\r\n    }\r\n}\r\nfunction parseName(name) {\r\n    return {\r\n        index: getIndexFromName(name),\r\n        parentName: name.substring(0, name.length - 1),\r\n        level: name.length - 1,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/loading/index.ts\n\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./src/loading2/octree-geometry-node.ts\n\r\nclass OctreeGeometryNode {\r\n    constructor(name, octreeGeometry, boundingBox) {\r\n        this.name = name;\r\n        this.octreeGeometry = octreeGeometry;\r\n        this.boundingBox = boundingBox;\r\n        this.loaded = false;\r\n        this.loading = false;\r\n        this.failed = false;\r\n        this.parent = null;\r\n        this.hasChildren = false;\r\n        this.isLeafNode = true;\r\n        this.isTreeNode = false;\r\n        this.isGeometryNode = true;\r\n        this.children = [\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null\r\n        ];\r\n        this.id = OctreeGeometryNode.IDCount++;\r\n        this.index = parseInt(name.charAt(name.length - 1));\r\n        this.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\r\n        this.tightBoundingBox = boundingBox.clone();\r\n        this.numPoints = 0;\r\n        this.oneTimeDisposeHandlers = [];\r\n    }\r\n    getLevel() {\r\n        return this.level;\r\n    }\r\n    isLoaded() {\r\n        return this.loaded;\r\n    }\r\n    getBoundingSphere() {\r\n        return this.boundingSphere;\r\n    }\r\n    getBoundingBox() {\r\n        return this.boundingBox;\r\n    }\r\n    load() {\r\n        if (this.octreeGeometry.numNodesLoading >= this.octreeGeometry.maxNumNodesLoading) {\r\n            return Promise.resolve();\r\n        }\r\n        if (!this.octreeGeometry.loader) {\r\n            this.loading = false;\r\n            this.failed = true;\r\n            return Promise.reject(`Loader not initialized for ${this.name}`);\r\n        }\r\n        return this.octreeGeometry.loader.load(this);\r\n    }\r\n    getNumPoints() {\r\n        return this.numPoints;\r\n    }\r\n    dispose() {\r\n        if (this.geometry && this.parent != null) {\r\n            this.geometry.dispose();\r\n            this.geometry = undefined;\r\n            this.loaded = false;\r\n            for (let i = 0; i < this.oneTimeDisposeHandlers.length; i++) {\r\n                const handler = this.oneTimeDisposeHandlers[i];\r\n                handler();\r\n            }\r\n            this.oneTimeDisposeHandlers = [];\r\n        }\r\n    }\r\n    traverse(cb, includeSelf = true) {\r\n        const stack = includeSelf ? [this] : [];\r\n        let current;\r\n        while ((current = stack.pop()) !== undefined) {\r\n            cb(current);\r\n            for (const child of current.children) {\r\n                if (child !== null) {\r\n                    stack.push(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nOctreeGeometryNode.IDCount = 0;\r\nOctreeGeometryNode.IDCount = 0;\r\n\n;// CONCATENATED MODULE: ./src/loading2/point-attributes.ts\n/**\r\n * Some types of possible point attribute data formats\r\n *\r\n * @class\r\n */\r\nconst PointAttributeTypes = {\r\n    DATA_TYPE_DOUBLE: { ordinal: 0, name: 'double', size: 8 },\r\n    DATA_TYPE_FLOAT: { ordinal: 1, name: 'float', size: 4 },\r\n    DATA_TYPE_INT8: { ordinal: 2, name: 'int8', size: 1 },\r\n    DATA_TYPE_UINT8: { ordinal: 3, name: 'uint8', size: 1 },\r\n    DATA_TYPE_INT16: { ordinal: 4, name: 'int16', size: 2 },\r\n    DATA_TYPE_UINT16: { ordinal: 5, name: 'uint16', size: 2 },\r\n    DATA_TYPE_INT32: { ordinal: 6, name: 'int32', size: 4 },\r\n    DATA_TYPE_UINT32: { ordinal: 7, name: 'uint32', size: 4 },\r\n    DATA_TYPE_INT64: { ordinal: 8, name: 'int64', size: 8 },\r\n    DATA_TYPE_UINT64: { ordinal: 9, name: 'uint64', size: 8 }\r\n};\r\nlet i = 0;\r\nfor (const obj in PointAttributeTypes) {\r\n    PointAttributeTypes[i] = PointAttributeTypes[obj];\r\n    i++;\r\n}\r\n\r\nclass PointAttribute {\r\n    constructor(name, type, numElements, range = [Infinity, -Infinity], uri = undefined) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.numElements = numElements;\r\n        this.range = range;\r\n        this.uri = uri;\r\n        this.byteSize = this.numElements * this.type.size;\r\n        this.description = '';\r\n    }\r\n}\r\n\r\nconst point_attributes_POINT_ATTRIBUTES = {\r\n    POSITION_CARTESIAN: new PointAttribute('POSITION_CARTESIAN', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\r\n    RGBA_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\r\n    COLOR_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\r\n    RGB_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 3),\r\n    NORMAL_FLOATS: new PointAttribute('NORMAL_FLOATS', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\r\n    INTENSITY: new PointAttribute('INTENSITY', PointAttributeTypes.DATA_TYPE_UINT16, 1),\r\n    CLASSIFICATION: new PointAttribute('CLASSIFICATION', PointAttributeTypes.DATA_TYPE_UINT8, 1),\r\n    NORMAL_SPHEREMAPPED: new PointAttribute('NORMAL_SPHEREMAPPED', PointAttributeTypes.DATA_TYPE_UINT8, 2),\r\n    NORMAL_OCT16: new PointAttribute('NORMAL_OCT16', PointAttributeTypes.DATA_TYPE_UINT8, 2),\r\n    NORMAL: new PointAttribute('NORMAL', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\r\n    RETURN_NUMBER: new PointAttribute('RETURN_NUMBER', PointAttributeTypes.DATA_TYPE_UINT8, 1),\r\n    NUMBER_OF_RETURNS: new PointAttribute('NUMBER_OF_RETURNS', PointAttributeTypes.DATA_TYPE_UINT8, 1),\r\n    SOURCE_ID: new PointAttribute('SOURCE_ID', PointAttributeTypes.DATA_TYPE_UINT16, 1),\r\n    INDICES: new PointAttribute('INDICES', PointAttributeTypes.DATA_TYPE_UINT32, 1),\r\n    SPACING: new PointAttribute('SPACING', PointAttributeTypes.DATA_TYPE_FLOAT, 1),\r\n    GPS_TIME: new PointAttribute('GPS_TIME', PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\r\n};\r\nclass point_attributes_PointAttributes {\r\n    constructor(pointAttributes, attributes = [], byteSize = 0, size = 0, vectors = []) {\r\n        this.attributes = attributes;\r\n        this.byteSize = byteSize;\r\n        this.size = size;\r\n        this.vectors = vectors;\r\n        if (pointAttributes != null) {\r\n            for (let i = 0; i < pointAttributes.length; i++) {\r\n                const pointAttributeName = pointAttributes[i];\r\n                const pointAttribute = point_attributes_POINT_ATTRIBUTES[pointAttributeName];\r\n                this.attributes.push(pointAttribute);\r\n                this.byteSize += pointAttribute.byteSize;\r\n                this.size++;\r\n            }\r\n        }\r\n    }\r\n    add(pointAttribute) {\r\n        this.attributes.push(pointAttribute);\r\n        this.byteSize += pointAttribute.byteSize;\r\n        this.size++;\r\n    }\r\n    addVector(vector) {\r\n        this.vectors.push(vector);\r\n    }\r\n    hasNormals() {\r\n        for (const name in this.attributes) {\r\n            const pointAttribute = this.attributes[name];\r\n            if (pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\r\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_FLOATS ||\r\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL ||\r\n                pointAttribute === point_attributes_POINT_ATTRIBUTES.NORMAL_OCT16) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    getAttribute(attributeName) {\r\n        return this.attributes.find(attr => attr.name === attributeName);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/loading2/worker-pool.ts\n// Create enums for different types of workers\r\nvar WorkerType;\r\n(function (WorkerType) {\r\n    WorkerType[\"DECODER_WORKER\"] = \"DECODER_WORKER\";\r\n    WorkerType[\"DECODER_WORKER_GLTF\"] = \"DECODER_WORKER_GLTF\";\r\n})(WorkerType || (WorkerType = {}));\r\n// Worker JS names: 'BinaryDecoderWorker.js', 'DEMWorker.js', 'EptBinaryDecoderWorker.js', 'EptLaszipDecoderWorker.js',\r\n// EptZstandardDecoder_preamble.js', 'EptZstandardDecoderWorker.js', 'LASDecoderWorker.js', 'LASLAZWorker.js', 'LazLoaderWorker.js'\r\nfunction createWorker(type) {\r\n    // console.log(type)\r\n    switch (type) {\r\n        case WorkerType.DECODER_WORKER: {\r\n            const DecoderWorker = (__webpack_require__(300)/* [\"default\"] */ .A);\r\n            return new DecoderWorker();\r\n        }\r\n        case WorkerType.DECODER_WORKER_GLTF: {\r\n            const DecoderWorker_GLTF = (__webpack_require__(218)/* [\"default\"] */ .A);\r\n            return new DecoderWorker_GLTF();\r\n        }\r\n        default:\r\n            throw new Error('Unknown worker type');\r\n    }\r\n}\r\nclass worker_pool_WorkerPool {\r\n    constructor() {\r\n        // Workers will be an object that has a key for each worker type and the value is an array of Workers that can be empty\r\n        this.workers = { DECODER_WORKER: [], DECODER_WORKER_GLTF: [] };\r\n    }\r\n    getWorker(workerType) {\r\n        // Throw error if workerType is not recognized\r\n        if (this.workers[workerType] === undefined) {\r\n            throw new Error('Unknown worker type');\r\n        }\r\n        // Given a worker URL, if URL does not exist in the worker object, create a new array with the URL as a key\r\n        if (this.workers[workerType].length === 0) {\r\n            const worker = createWorker(workerType);\r\n            this.workers[workerType].push(worker);\r\n        }\r\n        const worker = this.workers[workerType].pop();\r\n        if (worker === undefined) { // Typescript needs this\r\n            throw new Error('No workers available');\r\n        }\r\n        // Return the last worker in the array and remove it from the array\r\n        return worker;\r\n    }\r\n    returnWorker(workerType, worker) {\r\n        this.workers[workerType].push(worker);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/loading2/utils.ts\nfunction extractBasePath(url) {\r\n    return url.substring(0, url.lastIndexOf('/') + 1);\r\n}\r\nfunction buildUrl(basePath, fileName) {\r\n    return `${basePath}${fileName}`;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/loading2/octree-loader.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Buffer files for DEFAULT encoding\r\nconst HIERARCHY_FILE = 'hierarchy.bin';\r\nconst OCTREE_FILE = 'octree.bin';\r\n// Default buffer files for GLTF encoding\r\nconst GLTF_COLORS_FILE = 'colors.glbin';\r\nconst GLTF_POSITIONS_FILE = 'positions.glbin';\r\nclass NodeLoader {\r\n    constructor(getUrl, url, workerPool, metadata) {\r\n        this.getUrl = getUrl;\r\n        this.url = url;\r\n        this.workerPool = workerPool;\r\n        this.metadata = metadata;\r\n        this.hierarchyPath = '';\r\n        this.octreePath = '';\r\n        this.gltfColorsPath = '';\r\n        this.gltfPositionsPath = '';\r\n    }\r\n    async load(node) {\r\n        if (node.loaded || node.loading) {\r\n            return;\r\n        }\r\n        node.loading = true;\r\n        node.octreeGeometry.numNodesLoading++;\r\n        try {\r\n            if (node.nodeType === 2) {\r\n                await this.loadHierarchy(node);\r\n            }\r\n            const { byteOffset, byteSize } = node;\r\n            if (byteOffset === undefined || byteSize === undefined) {\r\n                throw new Error('byteOffset and byteSize are required');\r\n            }\r\n            let buffer;\r\n            if (this.metadata.encoding === \"GLTF\") {\r\n                const urlColors = await this.getUrl(this.gltfColorsPath);\r\n                const urlPositions = await this.getUrl(this.gltfPositionsPath);\r\n                if (byteSize === BigInt(0)) {\r\n                    buffer = new ArrayBuffer(0);\r\n                    console.warn(`loaded node with 0 bytes: ${node.name}`);\r\n                }\r\n                else {\r\n                    const firstPositions = byteOffset * 4n * 3n;\r\n                    const lastPositions = byteOffset * 4n * 3n + byteSize * 4n * 3n - 1n;\r\n                    const headersPositions = { Range: `bytes=${firstPositions}-${lastPositions}` };\r\n                    const responsePositions = await fetch(urlPositions, { headers: headersPositions });\r\n                    const bufferPositions = await responsePositions.arrayBuffer();\r\n                    const firstColors = byteOffset * 4n;\r\n                    const lastColors = byteOffset * 4n + byteSize * 4n - 1n;\r\n                    const headersColors = { Range: `bytes=${firstColors}-${lastColors}` };\r\n                    const responseColors = await fetch(urlColors, { headers: headersColors });\r\n                    const bufferColors = await responseColors.arrayBuffer();\r\n                    buffer = appendBuffer(bufferPositions, bufferColors);\r\n                }\r\n            }\r\n            else {\r\n                const urlOctree = await this.getUrl(this.octreePath);\r\n                const first = byteOffset;\r\n                const last = byteOffset + byteSize - BigInt(1);\r\n                if (byteSize === BigInt(0)) {\r\n                    buffer = new ArrayBuffer(0);\r\n                    console.warn(`loaded node with 0 bytes: ${node.name}`);\r\n                }\r\n                else {\r\n                    const headers = { Range: `bytes=${first}-${last}` };\r\n                    const response = await fetch(urlOctree, { headers });\r\n                    buffer = await response.arrayBuffer();\r\n                }\r\n            }\r\n            const workerType = this.metadata.encoding === 'GLTF' ? WorkerType.DECODER_WORKER_GLTF : WorkerType.DECODER_WORKER;\r\n            const worker = this.workerPool.getWorker(workerType);\r\n            worker.onmessage = (e) => {\r\n                const data = e.data;\r\n                const buffers = data.attributeBuffers;\r\n                this.workerPool.returnWorker(workerType, worker);\r\n                const geometry = new external_three_.BufferGeometry();\r\n                for (const property in buffers) {\r\n                    const buffer = buffers[property].buffer;\r\n                    if (property === 'position') {\r\n                        geometry.setAttribute('position', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\r\n                    }\r\n                    else if (property === 'rgba') {\r\n                        geometry.setAttribute('rgba', new external_three_.BufferAttribute(new Uint8Array(buffer), 4, true));\r\n                    }\r\n                    else if (property === 'NORMAL') {\r\n                        geometry.setAttribute('normal', new external_three_.BufferAttribute(new Float32Array(buffer), 3));\r\n                    }\r\n                    else if (property === 'INDICES') {\r\n                        const bufferAttribute = new external_three_.BufferAttribute(new Uint8Array(buffer), 4);\r\n                        bufferAttribute.normalized = true;\r\n                        geometry.setAttribute('indices', bufferAttribute);\r\n                    }\r\n                    else {\r\n                        const bufferAttribute = new external_three_.BufferAttribute(new Float32Array(buffer), 1);\r\n                        const batchAttribute = buffers[property].attribute;\r\n                        bufferAttribute.potree = {\r\n                            offset: buffers[property].offset,\r\n                            scale: buffers[property].scale,\r\n                            preciseBuffer: buffers[property].preciseBuffer,\r\n                            range: batchAttribute.range\r\n                        };\r\n                        geometry.setAttribute(property, bufferAttribute);\r\n                    }\r\n                }\r\n                node.density = data.density;\r\n                node.geometry = geometry;\r\n                node.loaded = true;\r\n                node.loading = false;\r\n                node.octreeGeometry.numNodesLoading--;\r\n                node.octreeGeometry.needsUpdate = true;\r\n                node.tightBoundingBox = this.getTightBoundingBox(data.tightBoundingBox);\r\n            };\r\n            const pointAttributes = node.octreeGeometry.pointAttributes;\r\n            const scale = node.octreeGeometry.scale;\r\n            const box = node.boundingBox;\r\n            const min = node.octreeGeometry.offset.clone().add(box.min);\r\n            const size = box.max.clone().sub(box.min);\r\n            const max = min.clone().add(size);\r\n            const numPoints = node.numPoints;\r\n            const offset = node.octreeGeometry.loader.offset;\r\n            const message = {\r\n                name: node.name,\r\n                buffer: buffer,\r\n                pointAttributes: pointAttributes,\r\n                scale: scale,\r\n                min: min,\r\n                max: max,\r\n                size: size,\r\n                offset: offset,\r\n                numPoints: numPoints\r\n            };\r\n            worker.postMessage(message, [message.buffer]);\r\n        }\r\n        catch (e) {\r\n            node.loaded = false;\r\n            node.loading = false;\r\n            node.octreeGeometry.numNodesLoading--;\r\n        }\r\n    }\r\n    parseHierarchy(node, buffer) {\r\n        const view = new DataView(buffer);\r\n        const bytesPerNode = 22;\r\n        const numNodes = buffer.byteLength / bytesPerNode;\r\n        const octree = node.octreeGeometry;\r\n        const nodes = new Array(numNodes);\r\n        nodes[0] = node;\r\n        let nodePos = 1;\r\n        for (let i = 0; i < numNodes; i++) {\r\n            const current = nodes[i];\r\n            const type = view.getUint8(i * bytesPerNode + 0);\r\n            const childMask = view.getUint8(i * bytesPerNode + 1);\r\n            const numPoints = view.getUint32(i * bytesPerNode + 2, true);\r\n            const byteOffset = view.getBigInt64(i * bytesPerNode + 6, true);\r\n            const byteSize = view.getBigInt64(i * bytesPerNode + 14, true);\r\n            if (current.nodeType === 2) {\r\n                // replace proxy with real node\r\n                current.byteOffset = byteOffset;\r\n                current.byteSize = byteSize;\r\n                current.numPoints = numPoints;\r\n            }\r\n            else if (type === 2) {\r\n                // load proxy\r\n                current.hierarchyByteOffset = byteOffset;\r\n                current.hierarchyByteSize = byteSize;\r\n                current.numPoints = numPoints;\r\n            }\r\n            else {\r\n                // load real node\r\n                current.byteOffset = byteOffset;\r\n                current.byteSize = byteSize;\r\n                current.numPoints = numPoints;\r\n            }\r\n            current.nodeType = type;\r\n            if (current.nodeType === 2) {\r\n                continue;\r\n            }\r\n            for (let childIndex = 0; childIndex < 8; childIndex++) {\r\n                const childExists = (1 << childIndex & childMask) !== 0;\r\n                if (!childExists) {\r\n                    continue;\r\n                }\r\n                const childName = current.name + childIndex;\r\n                const childAABB = octree_loader_createChildAABB(current.boundingBox, childIndex);\r\n                const child = new OctreeGeometryNode(childName, octree, childAABB);\r\n                child.name = childName;\r\n                child.spacing = current.spacing / 2;\r\n                child.level = current.level + 1;\r\n                current.children[childIndex] = child;\r\n                child.parent = current;\r\n                nodes[nodePos] = child;\r\n                nodePos++;\r\n            }\r\n        }\r\n    }\r\n    async loadHierarchy(node) {\r\n        const { hierarchyByteOffset, hierarchyByteSize } = node;\r\n        if (hierarchyByteOffset === undefined || hierarchyByteSize === undefined) {\r\n            throw new Error(`hierarchyByteOffset and hierarchyByteSize are undefined for node ${node.name}`);\r\n        }\r\n        const hierarchyUrl = await this.getUrl(this.hierarchyPath);\r\n        const first = hierarchyByteOffset;\r\n        const last = first + hierarchyByteSize - BigInt(1);\r\n        const headers = { Range: `bytes=${first}-${last}` };\r\n        const response = await fetch(hierarchyUrl, { headers });\r\n        const buffer = await response.arrayBuffer();\r\n        this.parseHierarchy(node, buffer);\r\n    }\r\n    getTightBoundingBox({ min, max }) {\r\n        const box = new external_three_.Box3(new external_three_.Vector3().fromArray(min), new external_three_.Vector3().fromArray(max));\r\n        box.max.sub(box.min);\r\n        box.min.set(0, 0, 0);\r\n        return box;\r\n    }\r\n}\r\nconst tmpVec3 = new external_three_.Vector3();\r\nfunction octree_loader_createChildAABB(aabb, index) {\r\n    const min = aabb.min.clone();\r\n    const max = aabb.max.clone();\r\n    const size = tmpVec3.subVectors(max, min);\r\n    if ((index & 0b0001) > 0) {\r\n        min.z += size.z / 2;\r\n    }\r\n    else {\r\n        max.z -= size.z / 2;\r\n    }\r\n    if ((index & 0b0010) > 0) {\r\n        min.y += size.y / 2;\r\n    }\r\n    else {\r\n        max.y -= size.y / 2;\r\n    }\r\n    if ((index & 0b0100) > 0) {\r\n        min.x += size.x / 2;\r\n    }\r\n    else {\r\n        max.x -= size.x / 2;\r\n    }\r\n    return new external_three_.Box3(min, max);\r\n}\r\nfunction appendBuffer(buffer1, buffer2) {\r\n    var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\r\n    tmp.set(new Uint8Array(buffer1), 0);\r\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\r\n    return tmp.buffer;\r\n}\r\nconst typenameTypeattributeMap = {\r\n    double: PointAttributeTypes.DATA_TYPE_DOUBLE,\r\n    float: PointAttributeTypes.DATA_TYPE_FLOAT,\r\n    int8: PointAttributeTypes.DATA_TYPE_INT8,\r\n    uint8: PointAttributeTypes.DATA_TYPE_UINT8,\r\n    int16: PointAttributeTypes.DATA_TYPE_INT16,\r\n    uint16: PointAttributeTypes.DATA_TYPE_UINT16,\r\n    int32: PointAttributeTypes.DATA_TYPE_INT32,\r\n    uint32: PointAttributeTypes.DATA_TYPE_UINT32,\r\n    int64: PointAttributeTypes.DATA_TYPE_INT64,\r\n    uint64: PointAttributeTypes.DATA_TYPE_UINT64\r\n};\r\nclass OctreeLoader {\r\n    constructor(getUrl, url) {\r\n        this.workerPool = new worker_pool_WorkerPool();\r\n        this.basePath = '';\r\n        this.hierarchyPath = '';\r\n        this.octreePath = '';\r\n        this.gltfColorsPath = '';\r\n        this.gltfPositionsPath = '';\r\n        this.getUrl = getUrl;\r\n        this.basePath = extractBasePath(url);\r\n        this.hierarchyPath = buildUrl(this.basePath, HIERARCHY_FILE);\r\n        this.octreePath = buildUrl(this.basePath, OCTREE_FILE);\r\n        // We default to the known naming convention for glTF datasets\r\n        this.gltfColorsPath = buildUrl(this.basePath, GLTF_COLORS_FILE);\r\n        this.gltfPositionsPath = buildUrl(this.basePath, GLTF_POSITIONS_FILE);\r\n    }\r\n    static parseAttributes(jsonAttributes) {\r\n        const attributes = new point_attributes_PointAttributes();\r\n        const replacements = { rgb: 'rgba' };\r\n        for (const jsonAttribute of jsonAttributes) {\r\n            const { name, numElements, min, max, bufferView } = jsonAttribute;\r\n            const type = typenameTypeattributeMap[jsonAttribute.type];\r\n            const potreeAttributeName = replacements[name] ? replacements[name] : name;\r\n            const attribute = new PointAttribute(potreeAttributeName, type, numElements);\r\n            if (bufferView) {\r\n                attribute.uri = bufferView.uri;\r\n            }\r\n            if (numElements === 1 && min && max) {\r\n                attribute.range = [min[0], max[0]];\r\n            }\r\n            else {\r\n                attribute.range = [min, max];\r\n            }\r\n            if (name === 'gps-time') { // HACK: Guard against bad gpsTime range in metadata, see potree/potree#909\r\n                if (typeof attribute.range[0] === 'number' && attribute.range[0] === attribute.range[1]) {\r\n                    attribute.range[1] += 1;\r\n                }\r\n            }\r\n            attribute.initialRange = attribute.range;\r\n            attributes.add(attribute);\r\n        }\r\n        {\r\n            const hasNormals = attributes.attributes.find((a) => a.name === 'NormalX') !== undefined &&\r\n                attributes.attributes.find((a) => a.name === 'NormalY') !== undefined &&\r\n                attributes.attributes.find((a) => a.name === 'NormalZ') !== undefined;\r\n            if (hasNormals) {\r\n                const vector = {\r\n                    name: 'NORMAL',\r\n                    attributes: ['NormalX', 'NormalY', 'NormalZ']\r\n                };\r\n                attributes.addVector(vector);\r\n            }\r\n        }\r\n        return attributes;\r\n    }\r\n    async load(url, xhrRequest) {\r\n        const metadata = await this.fetchMetadata(url, xhrRequest);\r\n        const attributes = OctreeLoader.parseAttributes(metadata.attributes);\r\n        this.applyCustomBufferURI(metadata.encoding, attributes);\r\n        const loader = this.createLoader(url, metadata, attributes);\r\n        const boundingBox = this.createBoundingBox(metadata);\r\n        const offset = this.getOffset(boundingBox);\r\n        const octree = this.initializeOctree(loader, url, metadata, boundingBox, offset, attributes);\r\n        const root = this.initializeRootNode(octree, boundingBox, metadata);\r\n        octree.root = root;\r\n        loader.load(root);\r\n        return { geometry: octree };\r\n    }\r\n    async fetchMetadata(url, xhrRequest) {\r\n        const response = await xhrRequest(url);\r\n        return response.json();\r\n    }\r\n    applyCustomBufferURI(encoding, attributes) {\r\n        // Only datasets with GLTF encoding support custom buffer URIs -\r\n        // as opposed to datasets with DEFAULT encoding coming from PotreeConverter\r\n        if (encoding === 'GLTF') {\r\n            this.gltfPositionsPath = attributes.getAttribute(\"position\")?.uri ?? this.gltfPositionsPath;\r\n            this.gltfColorsPath = attributes.getAttribute(\"rgba\")?.uri ?? this.gltfColorsPath;\r\n        }\r\n    }\r\n    createLoader(url, metadata, attributes) {\r\n        const loader = new NodeLoader(this.getUrl, url, this.workerPool, metadata);\r\n        loader.attributes = attributes;\r\n        loader.scale = metadata.scale;\r\n        loader.offset = metadata.offset;\r\n        loader.hierarchyPath = this.hierarchyPath;\r\n        loader.octreePath = this.octreePath;\r\n        loader.gltfColorsPath = this.gltfColorsPath;\r\n        loader.gltfPositionsPath = this.gltfPositionsPath;\r\n        return loader;\r\n    }\r\n    createBoundingBox(metadata) {\r\n        const min = new external_three_.Vector3(...metadata.boundingBox.min);\r\n        const max = new external_three_.Vector3(...metadata.boundingBox.max);\r\n        const boundingBox = new external_three_.Box3(min, max);\r\n        return boundingBox;\r\n    }\r\n    getOffset(boundingBox) {\r\n        const offset = boundingBox.min.clone();\r\n        boundingBox.min.sub(offset);\r\n        boundingBox.max.sub(offset);\r\n        return offset;\r\n    }\r\n    initializeOctree(loader, url, metadata, boundingBox, offset, attributes) {\r\n        const octree = new OctreeGeometry(loader, boundingBox);\r\n        octree.url = url;\r\n        octree.spacing = metadata.spacing;\r\n        octree.scale = metadata.scale;\r\n        octree.projection = metadata.projection;\r\n        octree.boundingBox = boundingBox;\r\n        octree.boundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\r\n        octree.tightBoundingSphere = boundingBox.getBoundingSphere(new external_three_.Sphere());\r\n        octree.tightBoundingBox = this.getTightBoundingBox(metadata);\r\n        octree.offset = offset;\r\n        octree.pointAttributes = attributes;\r\n        return octree;\r\n    }\r\n    initializeRootNode(octree, boundingBox, metadata) {\r\n        const root = new OctreeGeometryNode('r', octree, boundingBox);\r\n        root.level = 0;\r\n        root.nodeType = 2;\r\n        root.hierarchyByteOffset = BigInt(0);\r\n        root.hierarchyByteSize = BigInt(metadata.hierarchy.firstChunkSize);\r\n        root.spacing = octree.spacing;\r\n        root.byteOffset = BigInt(0);\r\n        return root;\r\n    }\r\n    getTightBoundingBox(metadata) {\r\n        const positionAttribute = metadata.attributes.find((attr) => attr.name === 'position');\r\n        if (!positionAttribute || !positionAttribute.min || !positionAttribute.max) {\r\n            console.warn('Position attribute (min, max) not found. Falling back to boundingBox for tightBoundingBox');\r\n            return new external_three_.Box3(new external_three_.Vector3(...metadata.boundingBox.min), new external_three_.Vector3(...metadata.boundingBox.max));\r\n        }\r\n        const offset = metadata.boundingBox.min;\r\n        const tightBoundingBox = new external_three_.Box3(new external_three_.Vector3(positionAttribute.min[0] - offset[0], positionAttribute.min[1] - offset[1], positionAttribute.min[2] - offset[2]), new external_three_.Vector3(positionAttribute.max[0] - offset[0], positionAttribute.max[1] - offset[1], positionAttribute.max[2] - offset[2]));\r\n        return tightBoundingBox;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/loading2/load-octree.ts\n\r\nasync function loadOctree(url, getUrl, xhrRequest) {\r\n    const trueUrl = await getUrl(url);\r\n    const loader = new OctreeLoader(getUrl, url);\r\n    const { geometry } = await loader.load(trueUrl, xhrRequest);\r\n    return geometry;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/type-predicates.ts\nfunction isGeometryNode(node) {\r\n    return node !== undefined && node !== null && node.isGeometryNode;\r\n}\r\nfunction isTreeNode(node) {\r\n    return node !== undefined && node !== null && node.isTreeNode;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/binary-heap.js\n/**\n * from: http://eloquentjavascript.net/1st_edition/appendix2.html\n *\n */\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\nBinaryHeap.prototype = {\n  push: function push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  },\n  pop: function pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  },\n  remove: function remove(node) {\n    var length = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (var i = 0; i < length; i++) {\n      if (this.content[i] != node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      var end = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i == length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  },\n  size: function size() {\n    return this.content.length;\n  },\n  bubbleUp: function bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n],\n      score = this.scoreFunction(element);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      var parentN = Math.floor((n + 1) / 2) - 1,\n        parent = this.content[parentN];\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      if (score >= this.scoreFunction(parent)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  },\n  sinkDown: function sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N],\n          child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N;\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap == null ? elemScore : child1Score)) swap = child2N;\n      }\n\n      // No need to swap further, we are done.\n      if (swap == null) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n};\n;// CONCATENATED MODULE: ./src/utils/box3-helper.ts\n\r\n/**\r\n *\r\n * code adapted from three.js BoxHelper.js\r\n * https://github.com/mrdoob/three.js/blob/dev/src/helpers/BoxHelper.js\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author Mugen87 / http://github.com/Mugen87\r\n * @author mschuetz / http://potree.org\r\n */\r\nclass Box3Helper extends external_three_.LineSegments {\r\n    constructor(box, color = new external_three_.Color(0xffff00)) {\r\n        // prettier-ignore\r\n        const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\r\n        // prettier-ignore\r\n        const positions = new Float32Array([\r\n            box.min.x, box.min.y, box.min.z,\r\n            box.max.x, box.min.y, box.min.z,\r\n            box.max.x, box.min.y, box.max.z,\r\n            box.min.x, box.min.y, box.max.z,\r\n            box.min.x, box.max.y, box.min.z,\r\n            box.max.x, box.max.y, box.min.z,\r\n            box.max.x, box.max.y, box.max.z,\r\n            box.min.x, box.max.y, box.max.z\r\n        ]);\r\n        const geometry = new external_three_.BufferGeometry();\r\n        geometry.setIndex(new external_three_.BufferAttribute(indices, 1));\r\n        geometry.setAttribute('position', new external_three_.BufferAttribute(positions, 3));\r\n        const material = new external_three_.LineBasicMaterial({ color: color });\r\n        super(geometry, material);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/lru.ts\nclass LRUItem {\r\n    constructor(node) {\r\n        this.node = node;\r\n        this.next = null;\r\n        this.previous = null;\r\n    }\r\n}\r\n/**\r\n * A doubly-linked-list of the least recently used elements.\r\n */\r\nclass LRU {\r\n    constructor(pointBudget = 1000000) {\r\n        this.pointBudget = pointBudget;\r\n        // the least recently used item\r\n        this.first = null;\r\n        // the most recently used item\r\n        this.last = null;\r\n        this.numPoints = 0;\r\n        this.items = new Map();\r\n    }\r\n    get size() {\r\n        return this.items.size;\r\n    }\r\n    has(node) {\r\n        return this.items.has(node.id);\r\n    }\r\n    /**\r\n     * Makes the specified the most recently used item. if the list does not contain node, it will\r\n     * be added.\r\n     */\r\n    touch(node) {\r\n        if (!node.loaded) {\r\n            return;\r\n        }\r\n        const item = this.items.get(node.id);\r\n        if (item) {\r\n            this.touchExisting(item);\r\n        }\r\n        else {\r\n            this.addNew(node);\r\n        }\r\n    }\r\n    addNew(node) {\r\n        const item = new LRUItem(node);\r\n        item.previous = this.last;\r\n        this.last = item;\r\n        if (item.previous) {\r\n            item.previous.next = item;\r\n        }\r\n        if (!this.first) {\r\n            this.first = item;\r\n        }\r\n        this.items.set(node.id, item);\r\n        this.numPoints += node.numPoints;\r\n    }\r\n    touchExisting(item) {\r\n        if (!item.previous) {\r\n            // handle touch on first element\r\n            if (item.next) {\r\n                this.first = item.next;\r\n                this.first.previous = null;\r\n                item.previous = this.last;\r\n                item.next = null;\r\n                this.last = item;\r\n                if (item.previous) {\r\n                    item.previous.next = item;\r\n                }\r\n            }\r\n        }\r\n        else if (!item.next) {\r\n            // handle touch on last element\r\n        }\r\n        else {\r\n            // handle touch on any other element\r\n            item.previous.next = item.next;\r\n            item.next.previous = item.previous;\r\n            item.previous = this.last;\r\n            item.next = null;\r\n            this.last = item;\r\n            if (item.previous) {\r\n                item.previous.next = item;\r\n            }\r\n        }\r\n    }\r\n    remove(node) {\r\n        const item = this.items.get(node.id);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        if (this.items.size === 1) {\r\n            this.first = null;\r\n            this.last = null;\r\n        }\r\n        else {\r\n            if (!item.previous) {\r\n                this.first = item.next;\r\n                this.first.previous = null;\r\n            }\r\n            if (!item.next) {\r\n                this.last = item.previous;\r\n                this.last.next = null;\r\n            }\r\n            if (item.previous && item.next) {\r\n                item.previous.next = item.next;\r\n                item.next.previous = item.previous;\r\n            }\r\n        }\r\n        this.items.delete(node.id);\r\n        this.numPoints -= node.numPoints;\r\n    }\r\n    getLRUItem() {\r\n        return this.first ? this.first.node : undefined;\r\n    }\r\n    freeMemory() {\r\n        if (this.items.size <= 1) {\r\n            return;\r\n        }\r\n        while (this.numPoints > this.pointBudget * 2) {\r\n            const node = this.getLRUItem();\r\n            if (node) {\r\n                this.disposeSubtree(node);\r\n            }\r\n        }\r\n    }\r\n    disposeSubtree(node) {\r\n        // Collect all the nodes which are to be disposed and removed.\r\n        const nodesToDispose = [node];\r\n        node.traverse(n => {\r\n            if (n.loaded) {\r\n                nodesToDispose.push(n);\r\n            }\r\n        });\r\n        // Dispose of all the nodes in one go.\r\n        for (const n of nodesToDispose) {\r\n            n.dispose();\r\n            this.remove(n);\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/potree.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass QueueItem {\r\n    constructor(pointCloudIndex, weight, node, parent) {\r\n        this.pointCloudIndex = pointCloudIndex;\r\n        this.weight = weight;\r\n        this.node = node;\r\n        this.parent = parent;\r\n    }\r\n}\r\nconst GEOMETRY_LOADERS = {\r\n    v1: loadPOC,\r\n    v2: loadOctree\r\n};\r\nclass Potree {\r\n    constructor(version = \"v1\") {\r\n        this._pointBudget = DEFAULT_POINT_BUDGET;\r\n        this._rendererSize = new external_three_.Vector2();\r\n        this.maxNumNodesLoading = MAX_NUM_NODES_LOADING;\r\n        this.features = FEATURES;\r\n        this.lru = new LRU(this._pointBudget);\r\n        this.updateVisibilityStructures = (() => {\r\n            const frustumMatrix = new external_three_.Matrix4();\r\n            const inverseWorldMatrix = new external_three_.Matrix4();\r\n            const cameraMatrix = new external_three_.Matrix4();\r\n            return (pointClouds, camera) => {\r\n                const frustums = [];\r\n                const cameraPositions = [];\r\n                const priorityQueue = new BinaryHeap(x => 1 / x.weight);\r\n                for (let i = 0; i < pointClouds.length; i++) {\r\n                    const pointCloud = pointClouds[i];\r\n                    if (!pointCloud.initialized()) {\r\n                        continue;\r\n                    }\r\n                    pointCloud.numVisiblePoints = 0;\r\n                    pointCloud.visibleNodes = [];\r\n                    pointCloud.visibleGeometry = [];\r\n                    camera.updateMatrixWorld(false);\r\n                    // Furstum in object space.\r\n                    const inverseViewMatrix = camera.matrixWorldInverse;\r\n                    const worldMatrix = pointCloud.matrixWorld;\r\n                    frustumMatrix\r\n                        .identity()\r\n                        .multiply(camera.projectionMatrix)\r\n                        .multiply(inverseViewMatrix)\r\n                        .multiply(worldMatrix);\r\n                    frustums.push(new external_three_.Frustum().setFromProjectionMatrix(frustumMatrix));\r\n                    // Camera position in object space\r\n                    inverseWorldMatrix.copy(worldMatrix).invert();\r\n                    cameraMatrix\r\n                        .identity()\r\n                        .multiply(inverseWorldMatrix)\r\n                        .multiply(camera.matrixWorld);\r\n                    cameraPositions.push(new external_three_.Vector3().setFromMatrixPosition(cameraMatrix));\r\n                    if (pointCloud.visible && pointCloud.root !== null) {\r\n                        const weight = Number.MAX_VALUE;\r\n                        priorityQueue.push(new QueueItem(i, weight, pointCloud.root));\r\n                    }\r\n                    // Hide any previously visible nodes. We will later show only the needed ones.\r\n                    if (isTreeNode(pointCloud.root)) {\r\n                        pointCloud.hideDescendants(pointCloud.root.sceneNode);\r\n                    }\r\n                    for (const boundingBoxNode of pointCloud.boundingBoxNodes) {\r\n                        boundingBoxNode.visible = false;\r\n                    }\r\n                }\r\n                return { frustums, cameraPositions, priorityQueue };\r\n            };\r\n        })();\r\n        this.loadGeometry = GEOMETRY_LOADERS[version];\r\n    }\r\n    loadPointCloud(url, getUrl, xhrRequest = (input, init) => fetch(input, init)) {\r\n        return this.loadGeometry(url, getUrl, xhrRequest).then(geometry => new PointCloudOctree(this, geometry));\r\n    }\r\n    updatePointClouds(pointClouds, camera, renderer) {\r\n        const result = this.updateVisibility(pointClouds, camera, renderer);\r\n        for (let i = 0; i < pointClouds.length; i++) {\r\n            const pointCloud = pointClouds[i];\r\n            if (pointCloud.disposed) {\r\n                continue;\r\n            }\r\n            pointCloud.material.updateMaterial(pointCloud, pointCloud.visibleNodes, camera, renderer);\r\n            pointCloud.updateVisibleBounds();\r\n            pointCloud.updateBoundingBoxes();\r\n        }\r\n        this.lru.freeMemory();\r\n        return result;\r\n    }\r\n    static pick(pointClouds, renderer, camera, ray, params = {}) {\r\n        Potree.picker = Potree.picker || new PointCloudOctreePicker();\r\n        return Potree.picker.pick(renderer, camera, ray, pointClouds, params);\r\n    }\r\n    get pointBudget() {\r\n        return this._pointBudget;\r\n    }\r\n    set pointBudget(value) {\r\n        if (value !== this._pointBudget) {\r\n            this._pointBudget = value;\r\n            this.lru.pointBudget = value;\r\n            this.lru.freeMemory();\r\n        }\r\n    }\r\n    static set maxLoaderWorkers(value) {\r\n        BinaryLoader.WORKER_POOL.maxWorkers = value;\r\n    }\r\n    static get maxLoaderWorkers() {\r\n        return BinaryLoader.WORKER_POOL.maxWorkers;\r\n    }\r\n    updateVisibility(pointClouds, camera, renderer) {\r\n        let numVisiblePoints = 0;\r\n        const visibleNodes = [];\r\n        const unloadedGeometry = [];\r\n        // calculate object space frustum and cam pos and setup priority queue\r\n        const { frustums, cameraPositions, priorityQueue } = this.updateVisibilityStructures(pointClouds, camera);\r\n        let loadedToGPUThisFrame = 0;\r\n        let exceededMaxLoadsToGPU = false;\r\n        let nodeLoadFailed = false;\r\n        let queueItem;\r\n        while ((queueItem = priorityQueue.pop()) !== undefined) {\r\n            let node = queueItem.node;\r\n            // If we will end up with too many points, we stop right away.\r\n            if (numVisiblePoints + node.numPoints > this.pointBudget) {\r\n                break;\r\n            }\r\n            const pointCloudIndex = queueItem.pointCloudIndex;\r\n            const pointCloud = pointClouds[pointCloudIndex];\r\n            const maxLevel = pointCloud.maxLevel !== undefined ? pointCloud.maxLevel : Infinity;\r\n            if (node.level > maxLevel ||\r\n                !frustums[pointCloudIndex].intersectsBox(node.boundingBox) ||\r\n                this.shouldClip(pointCloud, node.boundingBox)) {\r\n                continue;\r\n            }\r\n            numVisiblePoints += node.numPoints;\r\n            pointCloud.numVisiblePoints += node.numPoints;\r\n            const parentNode = queueItem.parent;\r\n            if (isGeometryNode(node) && (!parentNode || isTreeNode(parentNode))) {\r\n                if (node.loaded && loadedToGPUThisFrame < MAX_LOADS_TO_GPU) {\r\n                    node = pointCloud.toTreeNode(node, parentNode);\r\n                    loadedToGPUThisFrame++;\r\n                }\r\n                else if (!node.failed) {\r\n                    if (node.loaded && loadedToGPUThisFrame >= MAX_LOADS_TO_GPU) {\r\n                        exceededMaxLoadsToGPU = true;\r\n                    }\r\n                    unloadedGeometry.push(node);\r\n                    pointCloud.visibleGeometry.push(node);\r\n                }\r\n                else {\r\n                    nodeLoadFailed = true;\r\n                    continue;\r\n                }\r\n            }\r\n            if (isTreeNode(node)) {\r\n                this.updateTreeNodeVisibility(pointCloud, node, visibleNodes);\r\n                pointCloud.visibleGeometry.push(node.geometryNode);\r\n            }\r\n            const halfHeight = 0.5 * renderer.getSize(this._rendererSize).height * renderer.getPixelRatio();\r\n            this.updateChildVisibility(queueItem, priorityQueue, pointCloud, node, cameraPositions[pointCloudIndex], camera, halfHeight);\r\n        } // end priority queue loop\r\n        const numNodesToLoad = Math.min(this.maxNumNodesLoading, unloadedGeometry.length);\r\n        const nodeLoadPromises = [];\r\n        for (let i = 0; i < numNodesToLoad; i++) {\r\n            nodeLoadPromises.push(unloadedGeometry[i].load());\r\n        }\r\n        return {\r\n            visibleNodes: visibleNodes,\r\n            numVisiblePoints: numVisiblePoints,\r\n            exceededMaxLoadsToGPU: exceededMaxLoadsToGPU,\r\n            nodeLoadFailed: nodeLoadFailed,\r\n            nodeLoadPromises: nodeLoadPromises,\r\n        };\r\n    }\r\n    updateTreeNodeVisibility(pointCloud, node, visibleNodes) {\r\n        this.lru.touch(node.geometryNode);\r\n        const sceneNode = node.sceneNode;\r\n        sceneNode.visible = true;\r\n        sceneNode.material = pointCloud.material;\r\n        sceneNode.updateMatrix();\r\n        sceneNode.matrixWorld.multiplyMatrices(pointCloud.matrixWorld, sceneNode.matrix);\r\n        visibleNodes.push(node);\r\n        pointCloud.visibleNodes.push(node);\r\n        this.updateBoundingBoxVisibility(pointCloud, node);\r\n    }\r\n    updateChildVisibility(queueItem, priorityQueue, pointCloud, node, cameraPosition, camera, halfHeight) {\r\n        const children = node.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const child = children[i];\r\n            if (child === null) {\r\n                continue;\r\n            }\r\n            const sphere = child.boundingSphere;\r\n            const distance = sphere.center.distanceTo(cameraPosition);\r\n            const radius = sphere.radius;\r\n            let projectionFactor = 0.0;\r\n            if (camera.type === PERSPECTIVE_CAMERA) {\r\n                const perspective = camera;\r\n                const fov = (perspective.fov * Math.PI) / 180.0;\r\n                const slope = Math.tan(fov / 2.0);\r\n                projectionFactor = halfHeight / (slope * distance);\r\n            }\r\n            else {\r\n                const orthographic = camera;\r\n                projectionFactor = (2 * halfHeight) / (orthographic.top - orthographic.bottom);\r\n            }\r\n            const screenPixelRadius = radius * projectionFactor;\r\n            // Don't add the node if it'll be too small on the screen.\r\n            if (screenPixelRadius < pointCloud.minNodePixelSize) {\r\n                continue;\r\n            }\r\n            // Nodes which are larger will have priority in loading/displaying.\r\n            const weight = distance < radius ? Number.MAX_VALUE : screenPixelRadius + 1 / distance;\r\n            priorityQueue.push(new QueueItem(queueItem.pointCloudIndex, weight, child, node));\r\n        }\r\n    }\r\n    updateBoundingBoxVisibility(pointCloud, node) {\r\n        if (pointCloud.showBoundingBox && !node.boundingBoxNode) {\r\n            const boxHelper = new Box3Helper(node.boundingBox);\r\n            boxHelper.matrixAutoUpdate = false;\r\n            pointCloud.boundingBoxNodes.push(boxHelper);\r\n            node.boundingBoxNode = boxHelper;\r\n            node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\r\n        }\r\n        else if (pointCloud.showBoundingBox && node.boundingBoxNode) {\r\n            node.boundingBoxNode.visible = true;\r\n            node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\r\n        }\r\n        else if (!pointCloud.showBoundingBox && node.boundingBoxNode) {\r\n            node.boundingBoxNode.visible = false;\r\n        }\r\n    }\r\n    shouldClip(pointCloud, boundingBox) {\r\n        const material = pointCloud.material;\r\n        if (material.numClipBoxes === 0 || material.clipMode !== ClipMode.CLIP_OUTSIDE) {\r\n            return false;\r\n        }\r\n        const box2 = boundingBox.clone();\r\n        pointCloud.updateMatrixWorld(true);\r\n        box2.applyMatrix4(pointCloud.matrixWorld);\r\n        const clipBoxes = material.clipBoxes;\r\n        for (let i = 0; i < clipBoxes.length; i++) {\r\n            const clipMatrixWorld = clipBoxes[i].matrix;\r\n            const clipBoxWorld = new external_three_.Box3(new external_three_.Vector3(-0.5, -0.5, -0.5), new external_three_.Vector3(0.5, 0.5, 0.5)).applyMatrix4(clipMatrixWorld);\r\n            if (box2.intersectsBox(clipBoxWorld)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/loading2/index.ts\n\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///238\n")},300:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(512);\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()(\"(()=>{\\\"use strict\\\";var __webpack_modules__={256:()=>{eval(\\\"\\\\n;// CONCATENATED MODULE: ./src/loading2/point-attributes.ts\\\\n/**\\\\r\\\\n * Some types of possible point attribute data formats\\\\r\\\\n *\\\\r\\\\n * @class\\\\r\\\\n */\\\\r\\\\nconst PointAttributeTypes = {\\\\r\\\\n    DATA_TYPE_DOUBLE: { ordinal: 0, name: 'double', size: 8 },\\\\r\\\\n    DATA_TYPE_FLOAT: { ordinal: 1, name: 'float', size: 4 },\\\\r\\\\n    DATA_TYPE_INT8: { ordinal: 2, name: 'int8', size: 1 },\\\\r\\\\n    DATA_TYPE_UINT8: { ordinal: 3, name: 'uint8', size: 1 },\\\\r\\\\n    DATA_TYPE_INT16: { ordinal: 4, name: 'int16', size: 2 },\\\\r\\\\n    DATA_TYPE_UINT16: { ordinal: 5, name: 'uint16', size: 2 },\\\\r\\\\n    DATA_TYPE_INT32: { ordinal: 6, name: 'int32', size: 4 },\\\\r\\\\n    DATA_TYPE_UINT32: { ordinal: 7, name: 'uint32', size: 4 },\\\\r\\\\n    DATA_TYPE_INT64: { ordinal: 8, name: 'int64', size: 8 },\\\\r\\\\n    DATA_TYPE_UINT64: { ordinal: 9, name: 'uint64', size: 8 }\\\\r\\\\n};\\\\r\\\\nlet i = 0;\\\\r\\\\nfor (const obj in PointAttributeTypes) {\\\\r\\\\n    PointAttributeTypes[i] = PointAttributeTypes[obj];\\\\r\\\\n    i++;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nclass PointAttribute {\\\\r\\\\n    constructor(name, type, numElements, range = [Infinity, -Infinity], uri = undefined) {\\\\r\\\\n        this.name = name;\\\\r\\\\n        this.type = type;\\\\r\\\\n        this.numElements = numElements;\\\\r\\\\n        this.range = range;\\\\r\\\\n        this.uri = uri;\\\\r\\\\n        this.byteSize = this.numElements * this.type.size;\\\\r\\\\n        this.description = '';\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nconst POINT_ATTRIBUTES = {\\\\r\\\\n    POSITION_CARTESIAN: new PointAttribute('POSITION_CARTESIAN', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\r\\\\n    RGBA_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\r\\\\n    COLOR_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\r\\\\n    RGB_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 3),\\\\r\\\\n    NORMAL_FLOATS: new PointAttribute('NORMAL_FLOATS', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\r\\\\n    INTENSITY: new PointAttribute('INTENSITY', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\r\\\\n    CLASSIFICATION: new PointAttribute('CLASSIFICATION', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\r\\\\n    NORMAL_SPHEREMAPPED: new PointAttribute('NORMAL_SPHEREMAPPED', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\r\\\\n    NORMAL_OCT16: new PointAttribute('NORMAL_OCT16', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\r\\\\n    NORMAL: new PointAttribute('NORMAL', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\r\\\\n    RETURN_NUMBER: new PointAttribute('RETURN_NUMBER', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\r\\\\n    NUMBER_OF_RETURNS: new PointAttribute('NUMBER_OF_RETURNS', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\r\\\\n    SOURCE_ID: new PointAttribute('SOURCE_ID', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\r\\\\n    INDICES: new PointAttribute('INDICES', PointAttributeTypes.DATA_TYPE_UINT32, 1),\\\\r\\\\n    SPACING: new PointAttribute('SPACING', PointAttributeTypes.DATA_TYPE_FLOAT, 1),\\\\r\\\\n    GPS_TIME: new PointAttribute('GPS_TIME', PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\\\\r\\\\n};\\\\r\\\\nclass PointAttributes {\\\\r\\\\n    constructor(pointAttributes, attributes = [], byteSize = 0, size = 0, vectors = []) {\\\\r\\\\n        this.attributes = attributes;\\\\r\\\\n        this.byteSize = byteSize;\\\\r\\\\n        this.size = size;\\\\r\\\\n        this.vectors = vectors;\\\\r\\\\n        if (pointAttributes != null) {\\\\r\\\\n            for (let i = 0; i < pointAttributes.length; i++) {\\\\r\\\\n                const pointAttributeName = pointAttributes[i];\\\\r\\\\n                const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\\\\r\\\\n                this.attributes.push(pointAttribute);\\\\r\\\\n                this.byteSize += pointAttribute.byteSize;\\\\r\\\\n                this.size++;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n    add(pointAttribute) {\\\\r\\\\n        this.attributes.push(pointAttribute);\\\\r\\\\n        this.byteSize += pointAttribute.byteSize;\\\\r\\\\n        this.size++;\\\\r\\\\n    }\\\\r\\\\n    addVector(vector) {\\\\r\\\\n        this.vectors.push(vector);\\\\r\\\\n    }\\\\r\\\\n    hasNormals() {\\\\r\\\\n        for (const name in this.attributes) {\\\\r\\\\n            const pointAttribute = this.attributes[name];\\\\r\\\\n            if (pointAttribute === POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\\\\r\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_FLOATS ||\\\\r\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL ||\\\\r\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_OCT16) {\\\\r\\\\n                return true;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        return false;\\\\r\\\\n    }\\\\r\\\\n    getAttribute(attributeName) {\\\\r\\\\n        return this.attributes.find(attr => attr.name === attributeName);\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/loading2/decoder.worker.js\\\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\\\nfunction _nonIterableRest() { throw new TypeError(\\\\\\\"Invalid attempt to destructure non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\\\"); }\\\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\\\\\\"undefined\\\\\\\" != typeof Symbol && r[Symbol.iterator] || r[\\\\\\\"@@iterator\\\\\\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\\\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \\\\\\\"undefined\\\\\\\" && o[Symbol.iterator] || o[\\\\\\\"@@iterator\\\\\\\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \\\\\\\"number\\\\\\\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\\\\\\\"Invalid attempt to iterate non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\\\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\\\"string\\\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\\\"Object\\\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\\\"Map\\\\\\\" || n === \\\\\\\"Set\\\\\\\") return Array.from(o); if (n === \\\\\\\"Arguments\\\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\\\\n\\\\nvar typedArrayMapping = {\\\\n  'int8': Int8Array,\\\\n  'int16': Int16Array,\\\\n  'int32': Int32Array,\\\\n  'int64': Float64Array,\\\\n  'uint8': Uint8Array,\\\\n  'uint16': Uint16Array,\\\\n  'uint32': Uint32Array,\\\\n  'uint64': Float64Array,\\\\n  'float': Float32Array,\\\\n  'double': Float64Array\\\\n};\\\\nonmessage = function onmessage(event) {\\\\n  var _event$data = event.data,\\\\n    buffer = _event$data.buffer,\\\\n    pointAttributes = _event$data.pointAttributes,\\\\n    scale = _event$data.scale,\\\\n    name = _event$data.name,\\\\n    min = _event$data.min,\\\\n    max = _event$data.max,\\\\n    size = _event$data.size,\\\\n    offset = _event$data.offset,\\\\n    numPoints = _event$data.numPoints;\\\\n  var view = new DataView(buffer);\\\\n  var attributeBuffers = {};\\\\n  var attributeOffset = 0;\\\\n  var bytesPerPoint = 0;\\\\n  var _iterator = _createForOfIteratorHelper(pointAttributes.attributes),\\\\n    _step;\\\\n  try {\\\\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\\\\n      var pointAttribute = _step.value;\\\\n      bytesPerPoint += pointAttribute.byteSize;\\\\n    }\\\\n  } catch (err) {\\\\n    _iterator.e(err);\\\\n  } finally {\\\\n    _iterator.f();\\\\n  }\\\\n  var gridSize = 32;\\\\n  var grid = new Uint32Array(Math.pow(gridSize, 3));\\\\n  var toIndex = function toIndex(x, y, z) {\\\\n    // min is already subtracted\\\\n    var dx = gridSize * x / size.x;\\\\n    var dy = gridSize * y / size.y;\\\\n    var dz = gridSize * z / size.z;\\\\n    var ix = Math.min(parseInt(dx), gridSize - 1);\\\\n    var iy = Math.min(parseInt(dy), gridSize - 1);\\\\n    var iz = Math.min(parseInt(dz), gridSize - 1);\\\\n    var index = ix + iy * gridSize + iz * gridSize * gridSize;\\\\n    return index;\\\\n  };\\\\n  var numOccupiedCells = 0;\\\\n  var tightBoxMin = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];\\\\n  var tightBoxMax = [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY];\\\\n  var _iterator2 = _createForOfIteratorHelper(pointAttributes.attributes),\\\\n    _step2;\\\\n  try {\\\\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\\\\n      var _pointAttribute = _step2.value;\\\\n      if (['POSITION_CARTESIAN', 'position'].includes(_pointAttribute.name)) {\\\\n        var _buff = new ArrayBuffer(numPoints * 4 * 3);\\\\n        var positions = new Float32Array(_buff);\\\\n        for (var _j = 0; _j < numPoints; _j++) {\\\\n          var pointOffset = _j * bytesPerPoint;\\\\n          var x = view.getInt32(pointOffset + attributeOffset + 0, true) * scale[0] + offset[0] - min.x;\\\\n          var y = view.getInt32(pointOffset + attributeOffset + 4, true) * scale[1] + offset[1] - min.y;\\\\n          var z = view.getInt32(pointOffset + attributeOffset + 8, true) * scale[2] + offset[2] - min.z;\\\\n          tightBoxMin[0] = Math.min(tightBoxMin[0], x);\\\\n          tightBoxMin[1] = Math.min(tightBoxMin[1], y);\\\\n          tightBoxMin[2] = Math.min(tightBoxMin[2], z);\\\\n          tightBoxMax[0] = Math.max(tightBoxMax[0], x);\\\\n          tightBoxMax[1] = Math.max(tightBoxMax[1], y);\\\\n          tightBoxMax[2] = Math.max(tightBoxMax[2], z);\\\\n          var index = toIndex(x, y, z);\\\\n          var count = grid[index]++;\\\\n          if (count === 0) {\\\\n            numOccupiedCells++;\\\\n          }\\\\n          positions[3 * _j + 0] = x;\\\\n          positions[3 * _j + 1] = y;\\\\n          positions[3 * _j + 2] = z;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff,\\\\n          attribute: _pointAttribute\\\\n        };\\\\n      } else if (['RGBA', 'rgba'].includes(_pointAttribute.name)) {\\\\n        var _buff2 = new ArrayBuffer(numPoints * 4);\\\\n        var colors = new Uint8Array(_buff2);\\\\n        for (var _j2 = 0; _j2 < numPoints; _j2++) {\\\\n          var _pointOffset = _j2 * bytesPerPoint;\\\\n          var r = view.getUint16(_pointOffset + attributeOffset + 0, true);\\\\n          var g = view.getUint16(_pointOffset + attributeOffset + 2, true);\\\\n          var b = view.getUint16(_pointOffset + attributeOffset + 4, true);\\\\n          colors[4 * _j2 + 0] = r > 255 ? r / 256 : r;\\\\n          colors[4 * _j2 + 1] = g > 255 ? g / 256 : g;\\\\n          colors[4 * _j2 + 2] = b > 255 ? b / 256 : b;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff2,\\\\n          attribute: _pointAttribute\\\\n        };\\\\n      } else {\\\\n        var _buff3 = new ArrayBuffer(numPoints * 4);\\\\n        var _f = new Float32Array(_buff3);\\\\n        var TypedArray = typedArrayMapping[_pointAttribute.type.name];\\\\n        var preciseBuffer = new TypedArray(numPoints);\\\\n        var _offset2 = 0,\\\\n          _scale2 = 1;\\\\n        var getterMap = {\\\\n          'int8': view.getInt8,\\\\n          'int16': view.getInt16,\\\\n          'int32': view.getInt32,\\\\n          // 'int64':  view.getInt64,\\\\n          'uint8': view.getUint8,\\\\n          'uint16': view.getUint16,\\\\n          'uint32': view.getUint32,\\\\n          // 'uint64': view.getUint64,\\\\n          'float': view.getFloat32,\\\\n          'double': view.getFloat64\\\\n        };\\\\n        var _getter = getterMap[_pointAttribute.type.name].bind(view);\\\\n\\\\n        // compute offset and scale to pack larger types into 32 bit floats\\\\n        if (_pointAttribute.type.size > 4) {\\\\n          var _pointAttribute$range = _slicedToArray(_pointAttribute.range, 2),\\\\n            amin = _pointAttribute$range[0],\\\\n            amax = _pointAttribute$range[1];\\\\n          _offset2 = amin;\\\\n          _scale2 = 1 / (amax - amin);\\\\n        }\\\\n        for (var _j3 = 0; _j3 < numPoints; _j3++) {\\\\n          var _pointOffset2 = _j3 * bytesPerPoint;\\\\n          var _value = _getter(_pointOffset2 + attributeOffset, true);\\\\n          _f[_j3] = (_value - _offset2) * _scale2;\\\\n          preciseBuffer[_j3] = _value;\\\\n        }\\\\n        attributeBuffers[_pointAttribute.name] = {\\\\n          buffer: _buff3,\\\\n          preciseBuffer: preciseBuffer,\\\\n          attribute: _pointAttribute,\\\\n          offset: _offset2,\\\\n          scale: _scale2\\\\n        };\\\\n      }\\\\n      attributeOffset += _pointAttribute.byteSize;\\\\n    }\\\\n  } catch (err) {\\\\n    _iterator2.e(err);\\\\n  } finally {\\\\n    _iterator2.f();\\\\n  }\\\\n  var occupancy = parseInt(numPoints / numOccupiedCells);\\\\n  {\\\\n    // add indices\\\\n    var buff = new ArrayBuffer(numPoints * 4);\\\\n    var indices = new Uint32Array(buff);\\\\n    for (var i = 0; i < numPoints; i++) {\\\\n      indices[i] = i;\\\\n    }\\\\n    attributeBuffers['INDICES'] = {\\\\n      buffer: buff,\\\\n      attribute: PointAttribute.INDICES\\\\n    };\\\\n  }\\\\n  {\\\\n    // handle attribute vectors\\\\n    var vectors = pointAttributes.vectors;\\\\n    var _iterator3 = _createForOfIteratorHelper(vectors),\\\\n      _step3;\\\\n    try {\\\\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\\\\n        var vector = _step3.value;\\\\n        var _name = vector.name,\\\\n          attributes = vector.attributes;\\\\n        var numVectorElements = attributes.length;\\\\n        var _buffer = new ArrayBuffer(numVectorElements * numPoints * 4);\\\\n        var f32 = new Float32Array(_buffer);\\\\n        var iElement = 0;\\\\n        var _iterator4 = _createForOfIteratorHelper(attributes),\\\\n          _step4;\\\\n        try {\\\\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\\\\n            var sourceName = _step4.value;\\\\n            var sourceBuffer = attributeBuffers[sourceName];\\\\n            var _offset = sourceBuffer.offset,\\\\n              _scale = sourceBuffer.scale;\\\\n            var _view = new DataView(sourceBuffer.buffer);\\\\n            var getter = _view.getFloat32.bind(_view);\\\\n            for (var j = 0; j < numPoints; j++) {\\\\n              var value = getter(j * 4, true);\\\\n              f32[j * numVectorElements + iElement] = value / _scale + _offset;\\\\n            }\\\\n            iElement++;\\\\n          }\\\\n        } catch (err) {\\\\n          _iterator4.e(err);\\\\n        } finally {\\\\n          _iterator4.f();\\\\n        }\\\\n        var vecAttribute = new PointAttribute(_name, PointAttributeTypes.DATA_TYPE_FLOAT, 3);\\\\n        attributeBuffers[_name] = {\\\\n          buffer: _buffer,\\\\n          attribute: vecAttribute\\\\n        };\\\\n      }\\\\n    } catch (err) {\\\\n      _iterator3.e(err);\\\\n    } finally {\\\\n      _iterator3.f();\\\\n    }\\\\n  }\\\\n  var message = {\\\\n    buffer: buffer,\\\\n    attributeBuffers: attributeBuffers,\\\\n    density: occupancy,\\\\n    tightBoundingBox: {\\\\n      min: tightBoxMin,\\\\n      max: tightBoxMax\\\\n    }\\\\n  };\\\\n  var transferables = [];\\\\n  for (var property in message.attributeBuffers) {\\\\n    transferables.push(message.attributeBuffers[property].buffer);\\\\n  }\\\\n  transferables.push(buffer);\\\\n  postMessage(message, transferables);\\\\n};//# sourceURL=[module]\\\\n\\\")}},__webpack_exports__={};__webpack_modules__[256]()})();\", \"Worker\", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///300\n")},218:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(512);\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()(\"(()=>{\\\"use strict\\\";var __webpack_modules__={374:()=>{eval(\\\"\\\\n;// CONCATENATED MODULE: ./src/loading2/point-attributes.ts\\\\n/**\\\\r\\\\n * Some types of possible point attribute data formats\\\\r\\\\n *\\\\r\\\\n * @class\\\\r\\\\n */\\\\r\\\\nconst PointAttributeTypes = {\\\\r\\\\n    DATA_TYPE_DOUBLE: { ordinal: 0, name: 'double', size: 8 },\\\\r\\\\n    DATA_TYPE_FLOAT: { ordinal: 1, name: 'float', size: 4 },\\\\r\\\\n    DATA_TYPE_INT8: { ordinal: 2, name: 'int8', size: 1 },\\\\r\\\\n    DATA_TYPE_UINT8: { ordinal: 3, name: 'uint8', size: 1 },\\\\r\\\\n    DATA_TYPE_INT16: { ordinal: 4, name: 'int16', size: 2 },\\\\r\\\\n    DATA_TYPE_UINT16: { ordinal: 5, name: 'uint16', size: 2 },\\\\r\\\\n    DATA_TYPE_INT32: { ordinal: 6, name: 'int32', size: 4 },\\\\r\\\\n    DATA_TYPE_UINT32: { ordinal: 7, name: 'uint32', size: 4 },\\\\r\\\\n    DATA_TYPE_INT64: { ordinal: 8, name: 'int64', size: 8 },\\\\r\\\\n    DATA_TYPE_UINT64: { ordinal: 9, name: 'uint64', size: 8 }\\\\r\\\\n};\\\\r\\\\nlet i = 0;\\\\r\\\\nfor (const obj in PointAttributeTypes) {\\\\r\\\\n    PointAttributeTypes[i] = PointAttributeTypes[obj];\\\\r\\\\n    i++;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nclass PointAttribute {\\\\r\\\\n    constructor(name, type, numElements, range = [Infinity, -Infinity], uri = undefined) {\\\\r\\\\n        this.name = name;\\\\r\\\\n        this.type = type;\\\\r\\\\n        this.numElements = numElements;\\\\r\\\\n        this.range = range;\\\\r\\\\n        this.uri = uri;\\\\r\\\\n        this.byteSize = this.numElements * this.type.size;\\\\r\\\\n        this.description = '';\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nconst POINT_ATTRIBUTES = {\\\\r\\\\n    POSITION_CARTESIAN: new PointAttribute('POSITION_CARTESIAN', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\r\\\\n    RGBA_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\r\\\\n    COLOR_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 4),\\\\r\\\\n    RGB_PACKED: new PointAttribute('COLOR_PACKED', PointAttributeTypes.DATA_TYPE_INT8, 3),\\\\r\\\\n    NORMAL_FLOATS: new PointAttribute('NORMAL_FLOATS', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\r\\\\n    INTENSITY: new PointAttribute('INTENSITY', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\r\\\\n    CLASSIFICATION: new PointAttribute('CLASSIFICATION', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\r\\\\n    NORMAL_SPHEREMAPPED: new PointAttribute('NORMAL_SPHEREMAPPED', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\r\\\\n    NORMAL_OCT16: new PointAttribute('NORMAL_OCT16', PointAttributeTypes.DATA_TYPE_UINT8, 2),\\\\r\\\\n    NORMAL: new PointAttribute('NORMAL', PointAttributeTypes.DATA_TYPE_FLOAT, 3),\\\\r\\\\n    RETURN_NUMBER: new PointAttribute('RETURN_NUMBER', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\r\\\\n    NUMBER_OF_RETURNS: new PointAttribute('NUMBER_OF_RETURNS', PointAttributeTypes.DATA_TYPE_UINT8, 1),\\\\r\\\\n    SOURCE_ID: new PointAttribute('SOURCE_ID', PointAttributeTypes.DATA_TYPE_UINT16, 1),\\\\r\\\\n    INDICES: new PointAttribute('INDICES', PointAttributeTypes.DATA_TYPE_UINT32, 1),\\\\r\\\\n    SPACING: new PointAttribute('SPACING', PointAttributeTypes.DATA_TYPE_FLOAT, 1),\\\\r\\\\n    GPS_TIME: new PointAttribute('GPS_TIME', PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\\\\r\\\\n};\\\\r\\\\nclass PointAttributes {\\\\r\\\\n    constructor(pointAttributes, attributes = [], byteSize = 0, size = 0, vectors = []) {\\\\r\\\\n        this.attributes = attributes;\\\\r\\\\n        this.byteSize = byteSize;\\\\r\\\\n        this.size = size;\\\\r\\\\n        this.vectors = vectors;\\\\r\\\\n        if (pointAttributes != null) {\\\\r\\\\n            for (let i = 0; i < pointAttributes.length; i++) {\\\\r\\\\n                const pointAttributeName = pointAttributes[i];\\\\r\\\\n                const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\\\\r\\\\n                this.attributes.push(pointAttribute);\\\\r\\\\n                this.byteSize += pointAttribute.byteSize;\\\\r\\\\n                this.size++;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n    add(pointAttribute) {\\\\r\\\\n        this.attributes.push(pointAttribute);\\\\r\\\\n        this.byteSize += pointAttribute.byteSize;\\\\r\\\\n        this.size++;\\\\r\\\\n    }\\\\r\\\\n    addVector(vector) {\\\\r\\\\n        this.vectors.push(vector);\\\\r\\\\n    }\\\\r\\\\n    hasNormals() {\\\\r\\\\n        for (const name in this.attributes) {\\\\r\\\\n            const pointAttribute = this.attributes[name];\\\\r\\\\n            if (pointAttribute === POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\\\\r\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_FLOATS ||\\\\r\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL ||\\\\r\\\\n                pointAttribute === POINT_ATTRIBUTES.NORMAL_OCT16) {\\\\r\\\\n                return true;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        return false;\\\\r\\\\n    }\\\\r\\\\n    getAttribute(attributeName) {\\\\r\\\\n        return this.attributes.find(attr => attr.name === attributeName);\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/loading2/gltf-decoder.worker.js\\\\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \\\\\\\"undefined\\\\\\\" && o[Symbol.iterator] || o[\\\\\\\"@@iterator\\\\\\\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \\\\\\\"number\\\\\\\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\\\\\\\"Invalid attempt to iterate non-iterable instance.\\\\\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\\\\\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\\\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\\\\\"string\\\\\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\\\\\"Object\\\\\\\" && o.constructor) n = o.constructor.name; if (n === \\\\\\\"Map\\\\\\\" || n === \\\\\\\"Set\\\\\\\") return Array.from(o); if (n === \\\\\\\"Arguments\\\\\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\\\\n\\\\nvar typedArrayMapping = {\\\\n  'int8': Int8Array,\\\\n  'int16': Int16Array,\\\\n  'int32': Int32Array,\\\\n  'int64': Float64Array,\\\\n  'uint8': Uint8Array,\\\\n  'uint16': Uint16Array,\\\\n  'uint32': Uint32Array,\\\\n  'uint64': Float64Array,\\\\n  'float': Float32Array,\\\\n  'double': Float64Array\\\\n};\\\\nonmessage = function onmessage(event) {\\\\n  var _event$data = event.data,\\\\n    buffer = _event$data.buffer,\\\\n    pointAttributes = _event$data.pointAttributes,\\\\n    scale = _event$data.scale,\\\\n    name = _event$data.name,\\\\n    min = _event$data.min,\\\\n    max = _event$data.max,\\\\n    size = _event$data.size,\\\\n    offset = _event$data.offset,\\\\n    numPoints = _event$data.numPoints;\\\\n  var view = new DataView(buffer);\\\\n  var attributeBuffers = {};\\\\n  var bytesPerPointPosition = 4 * 3;\\\\n  var gridSize = 32;\\\\n  var grid = new Uint32Array(Math.pow(gridSize, 3));\\\\n  var toIndex = function toIndex(x, y, z) {\\\\n    // min is already subtracted\\\\n    var dx = gridSize * x / size.x;\\\\n    var dy = gridSize * y / size.y;\\\\n    var dz = gridSize * z / size.z;\\\\n    var ix = Math.min(parseInt(dx), gridSize - 1);\\\\n    var iy = Math.min(parseInt(dy), gridSize - 1);\\\\n    var iz = Math.min(parseInt(dz), gridSize - 1);\\\\n    var index = ix + iy * gridSize + iz * gridSize * gridSize;\\\\n    return index;\\\\n  };\\\\n  var numOccupiedCells = 0;\\\\n  var tightBoxMin = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];\\\\n  var tightBoxMax = [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY];\\\\n  var _iterator = _createForOfIteratorHelper(pointAttributes.attributes),\\\\n    _step;\\\\n  try {\\\\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\\\\n      var pointAttribute = _step.value;\\\\n      if ([\\\\\\\"POSITION_CARTESIAN\\\\\\\", \\\\\\\"position\\\\\\\"].includes(pointAttribute.name)) {\\\\n        var _buff = new ArrayBuffer(numPoints * 4 * 3);\\\\n        var positions = new Float32Array(_buff);\\\\n        for (var _j = 0; _j < numPoints; _j++) {\\\\n          var pointOffset = _j * bytesPerPointPosition;\\\\n          var x = view.getFloat32(pointOffset + 0, true) + offset[0] - min.x;\\\\n          var y = view.getFloat32(pointOffset + 4, true) + offset[1] - min.y;\\\\n          var z = view.getFloat32(pointOffset + 8, true) + offset[2] - min.z;\\\\n          tightBoxMin[0] = Math.min(tightBoxMin[0], x);\\\\n          tightBoxMin[1] = Math.min(tightBoxMin[1], y);\\\\n          tightBoxMin[2] = Math.min(tightBoxMin[2], z);\\\\n          tightBoxMax[0] = Math.max(tightBoxMax[0], x);\\\\n          tightBoxMax[1] = Math.max(tightBoxMax[1], y);\\\\n          tightBoxMax[2] = Math.max(tightBoxMax[2], z);\\\\n          var index = toIndex(x, y, z);\\\\n          var count = grid[index]++;\\\\n          if (count === 0) {\\\\n            numOccupiedCells++;\\\\n          }\\\\n          positions[3 * _j + 0] = x;\\\\n          positions[3 * _j + 1] = y;\\\\n          positions[3 * _j + 2] = z;\\\\n        }\\\\n        attributeBuffers[pointAttribute.name] = {\\\\n          buffer: _buff,\\\\n          attribute: pointAttribute\\\\n        };\\\\n      } else if ([\\\\\\\"RGBA\\\\\\\", \\\\\\\"rgba\\\\\\\"].includes(pointAttribute.name)) {\\\\n        attributeBuffers[pointAttribute.name] = {\\\\n          buffer: buffer.slice(numPoints * bytesPerPointPosition),\\\\n          attribute: pointAttribute\\\\n        };\\\\n      }\\\\n    }\\\\n  } catch (err) {\\\\n    _iterator.e(err);\\\\n  } finally {\\\\n    _iterator.f();\\\\n  }\\\\n  var occupancy = parseInt(numPoints / numOccupiedCells);\\\\n  {\\\\n    // add indices\\\\n    var buff = new ArrayBuffer(numPoints * 4);\\\\n    var indices = new Uint32Array(buff);\\\\n    for (var i = 0; i < numPoints; i++) {\\\\n      indices[i] = i;\\\\n    }\\\\n    attributeBuffers[\\\\\\\"INDICES\\\\\\\"] = {\\\\n      buffer: buff,\\\\n      attribute: PointAttribute.INDICES\\\\n    };\\\\n  }\\\\n  {\\\\n    // handle attribute vectors\\\\n    var vectors = pointAttributes.vectors;\\\\n    var _iterator2 = _createForOfIteratorHelper(vectors),\\\\n      _step2;\\\\n    try {\\\\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\\\\n        var vector = _step2.value;\\\\n        var _name = vector.name,\\\\n          attributes = vector.attributes;\\\\n        var numVectorElements = attributes.length;\\\\n        var _buffer = new ArrayBuffer(numVectorElements * numPoints * 4);\\\\n        var f32 = new Float32Array(_buffer);\\\\n        var iElement = 0;\\\\n        var _iterator3 = _createForOfIteratorHelper(attributes),\\\\n          _step3;\\\\n        try {\\\\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\\\\n            var sourceName = _step3.value;\\\\n            var sourceBuffer = attributeBuffers[sourceName];\\\\n            var _offset = sourceBuffer.offset,\\\\n              _scale = sourceBuffer.scale;\\\\n            var _view = new DataView(sourceBuffer.buffer);\\\\n            var getter = _view.getFloat32.bind(_view);\\\\n            for (var j = 0; j < numPoints; j++) {\\\\n              var value = getter(j * 4, true);\\\\n              f32[j * numVectorElements + iElement] = value / _scale + _offset;\\\\n            }\\\\n            iElement++;\\\\n          }\\\\n        } catch (err) {\\\\n          _iterator3.e(err);\\\\n        } finally {\\\\n          _iterator3.f();\\\\n        }\\\\n        var vecAttribute = new PointAttribute(_name, PointAttributeTypes.DATA_TYPE_FLOAT, 3);\\\\n        attributeBuffers[_name] = {\\\\n          buffer: _buffer,\\\\n          attribute: vecAttribute\\\\n        };\\\\n      }\\\\n    } catch (err) {\\\\n      _iterator2.e(err);\\\\n    } finally {\\\\n      _iterator2.f();\\\\n    }\\\\n  }\\\\n  var message = {\\\\n    buffer: buffer,\\\\n    attributeBuffers: attributeBuffers,\\\\n    density: occupancy,\\\\n    tightBoundingBox: {\\\\n      min: tightBoxMin,\\\\n      max: tightBoxMax\\\\n    }\\\\n  };\\\\n  var transferables = [];\\\\n  for (var property in message.attributeBuffers) {\\\\n    transferables.push(message.attributeBuffers[property].buffer);\\\\n  }\\\\n  transferables.push(buffer);\\\\n  postMessage(message, transferables);\\\\n};//# sourceURL=[module]\\\\n\\\")}},__webpack_exports__={};__webpack_modules__[374]()})();\", \"Worker\", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///218\n")},91:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(512);\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()("(()=>{\\"use strict\\";var __webpack_modules__={717:()=>{eval(\'\\\\n;// CONCATENATED MODULE: ./src/point-attributes.ts\\\\n// -------------------------------------------------------------------------------------------------\\\\r\\\\n// Converted to Typescript and adapted from https://github.com/potree/potree\\\\r\\\\n// -------------------------------------------------------------------------------------------------\\\\r\\\\nvar PointAttributeName;\\\\r\\\\n(function (PointAttributeName) {\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"POSITION_CARTESIAN\\"] = 0] = \\"POSITION_CARTESIAN\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_PACKED\\"] = 1] = \\"COLOR_PACKED\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_FLOATS_1\\"] = 2] = \\"COLOR_FLOATS_1\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"COLOR_FLOATS_255\\"] = 3] = \\"COLOR_FLOATS_255\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_FLOATS\\"] = 4] = \\"NORMAL_FLOATS\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"FILLER\\"] = 5] = \\"FILLER\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"INTENSITY\\"] = 6] = \\"INTENSITY\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"CLASSIFICATION\\"] = 7] = \\"CLASSIFICATION\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_SPHEREMAPPED\\"] = 8] = \\"NORMAL_SPHEREMAPPED\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL_OCT16\\"] = 9] = \\"NORMAL_OCT16\\";\\\\r\\\\n    PointAttributeName[PointAttributeName[\\"NORMAL\\"] = 10] = \\"NORMAL\\";\\\\r\\\\n})(PointAttributeName || (PointAttributeName = {}));\\\\r\\\\nconst POINT_ATTRIBUTE_TYPES = {\\\\r\\\\n    DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\\\\r\\\\n    DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\\\\r\\\\n    DATA_TYPE_INT8: { ordinal: 2, size: 1 },\\\\r\\\\n    DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\\\\r\\\\n    DATA_TYPE_INT16: { ordinal: 4, size: 2 },\\\\r\\\\n    DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\\\\r\\\\n    DATA_TYPE_INT32: { ordinal: 6, size: 4 },\\\\r\\\\n    DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\\\\r\\\\n    DATA_TYPE_INT64: { ordinal: 8, size: 8 },\\\\r\\\\n    DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\\\\r\\\\n};\\\\r\\\\nfunction makePointAttribute(name, type, numElements) {\\\\r\\\\n    return {\\\\r\\\\n        name,\\\\r\\\\n        type,\\\\r\\\\n        numElements,\\\\r\\\\n        byteSize: numElements * type.size,\\\\r\\\\n    };\\\\r\\\\n}\\\\r\\\\nconst RGBA_PACKED = makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 4);\\\\r\\\\nconst POINT_ATTRIBUTES = {\\\\r\\\\n    POSITION_CARTESIAN: makePointAttribute(PointAttributeName.POSITION_CARTESIAN, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\r\\\\n    RGBA_PACKED,\\\\r\\\\n    COLOR_PACKED: RGBA_PACKED,\\\\r\\\\n    RGB_PACKED: makePointAttribute(PointAttributeName.COLOR_PACKED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8, 3),\\\\r\\\\n    NORMAL_FLOATS: makePointAttribute(PointAttributeName.NORMAL_FLOATS, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\r\\\\n    FILLER_1B: makePointAttribute(PointAttributeName.FILLER, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\\\\r\\\\n    INTENSITY: makePointAttribute(PointAttributeName.INTENSITY, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16, 1),\\\\r\\\\n    CLASSIFICATION: makePointAttribute(PointAttributeName.CLASSIFICATION, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 1),\\\\r\\\\n    NORMAL_SPHEREMAPPED: makePointAttribute(PointAttributeName.NORMAL_SPHEREMAPPED, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\\\\r\\\\n    NORMAL_OCT16: makePointAttribute(PointAttributeName.NORMAL_OCT16, POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8, 2),\\\\r\\\\n    NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\\\\r\\\\n};\\\\r\\\\nclass PointAttributes {\\\\r\\\\n    constructor(pointAttributeNames = []) {\\\\r\\\\n        this.attributes = [];\\\\r\\\\n        this.byteSize = 0;\\\\r\\\\n        this.size = 0;\\\\r\\\\n        for (let i = 0; i < pointAttributeNames.length; i++) {\\\\r\\\\n            const pointAttributeName = pointAttributeNames[i];\\\\r\\\\n            const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\\\\r\\\\n            this.attributes.push(pointAttribute);\\\\r\\\\n            this.byteSize += pointAttribute.byteSize;\\\\r\\\\n            this.size++;\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n    add(pointAttribute) {\\\\r\\\\n        this.attributes.push(pointAttribute);\\\\r\\\\n        this.byteSize += pointAttribute.byteSize;\\\\r\\\\n        this.size++;\\\\r\\\\n    }\\\\r\\\\n    hasColors() {\\\\r\\\\n        return this.attributes.find(isColorAttribute) !== undefined;\\\\r\\\\n    }\\\\r\\\\n    hasNormals() {\\\\r\\\\n        return this.attributes.find(isNormalAttribute) !== undefined;\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\nfunction isColorAttribute({ name }) {\\\\r\\\\n    return name === PointAttributeName.COLOR_PACKED;\\\\r\\\\n}\\\\r\\\\nfunction isNormalAttribute({ name }) {\\\\r\\\\n    return (name === PointAttributeName.NORMAL_SPHEREMAPPED ||\\\\r\\\\n        name === PointAttributeName.NORMAL_FLOATS ||\\\\r\\\\n        name === PointAttributeName.NORMAL ||\\\\r\\\\n        name === PointAttributeName.NORMAL_OCT16);\\\\r\\\\n}\\\\r\\\\n\\\\n;// CONCATENATED MODULE: ./src/version.ts\\\\nclass Version {\\\\r\\\\n    constructor(version) {\\\\r\\\\n        this.versionMinor = 0;\\\\r\\\\n        this.version = version;\\\\r\\\\n        const vmLength = version.indexOf(\\\\\'.\\\\\') === -1 ? version.length : version.indexOf(\\\\\'.\\\\\');\\\\r\\\\n        this.versionMajor = parseInt(version.substr(0, vmLength), 10);\\\\r\\\\n        this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\\\\r\\\\n        if (isNaN(this.versionMinor)) {\\\\r\\\\n            this.versionMinor = 0;\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n    newerThan(version) {\\\\r\\\\n        const v = new Version(version);\\\\r\\\\n        if (this.versionMajor > v.versionMajor) {\\\\r\\\\n            return true;\\\\r\\\\n        }\\\\r\\\\n        else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\\\\r\\\\n            return true;\\\\r\\\\n        }\\\\r\\\\n        else {\\\\r\\\\n            return false;\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n    equalOrHigher(version) {\\\\r\\\\n        const v = new Version(version);\\\\r\\\\n        if (this.versionMajor > v.versionMajor) {\\\\r\\\\n            return true;\\\\r\\\\n        }\\\\r\\\\n        else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\\\\r\\\\n            return true;\\\\r\\\\n        }\\\\r\\\\n        else {\\\\r\\\\n            return false;\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n    upTo(version) {\\\\r\\\\n        return !this.newerThan(version);\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\n;// CONCATENATED MODULE: ./src/workers/custom-array-view.ts\\\\n/**\\\\r\\\\n * Adapted from Potree.js http://potree.org\\\\r\\\\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\\\\r\\\\n */\\\\r\\\\n// http://jsperf.com/uint8array-vs-dataview3/3\\\\r\\\\n// tslint:disable:no-bitwise\\\\r\\\\nclass CustomArrayView {\\\\r\\\\n    constructor(buffer) {\\\\r\\\\n        this.tmp = new ArrayBuffer(4);\\\\r\\\\n        this.tmpf = new Float32Array(this.tmp);\\\\r\\\\n        this.tmpu8 = new Uint8Array(this.tmp);\\\\r\\\\n        this.u8 = new Uint8Array(buffer);\\\\r\\\\n    }\\\\r\\\\n    getUint32(i) {\\\\r\\\\n        return (this.u8[i + 3] << 24) | (this.u8[i + 2] << 16) | (this.u8[i + 1] << 8) | this.u8[i];\\\\r\\\\n    }\\\\r\\\\n    getUint16(i) {\\\\r\\\\n        return (this.u8[i + 1] << 8) | this.u8[i];\\\\r\\\\n    }\\\\r\\\\n    getFloat32(i) {\\\\r\\\\n        const tmpu8 = this.tmpu8;\\\\r\\\\n        const u8 = this.u8;\\\\r\\\\n        const tmpf = this.tmpf;\\\\r\\\\n        tmpu8[0] = u8[i + 0];\\\\r\\\\n        tmpu8[1] = u8[i + 1];\\\\r\\\\n        tmpu8[2] = u8[i + 2];\\\\r\\\\n        tmpu8[3] = u8[i + 3];\\\\r\\\\n        return tmpf[0];\\\\r\\\\n    }\\\\r\\\\n    getUint8(i) {\\\\r\\\\n        return this.u8[i];\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n// tslint:enable:no-bitwise\\\\r\\\\n\\\\n;// CONCATENATED MODULE: ./src/workers/binary-decoder-worker-internal.ts\\\\n/**\\\\r\\\\n * Adapted from Potree.js http://potree.org\\\\r\\\\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\\\\r\\\\n */\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n// IE11 does not have Math.sign(), this has been adapted from CoreJS es6.math.sign.js for TypeScript\\\\r\\\\nconst mathSign = Math.sign ||\\\\r\\\\n    function (x) {\\\\r\\\\n        // tslint:disable-next-line:triple-equals\\\\r\\\\n        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\\\\r\\\\n    };\\\\r\\\\nfunction handleMessage(event) {\\\\r\\\\n    const buffer = event.data.buffer;\\\\r\\\\n    const pointAttributes = event.data.pointAttributes;\\\\r\\\\n    const ctx = {\\\\r\\\\n        attributeBuffers: {},\\\\r\\\\n        currentOffset: 0,\\\\r\\\\n        data: new CustomArrayView(buffer),\\\\r\\\\n        mean: [0, 0, 0],\\\\r\\\\n        nodeOffset: event.data.offset,\\\\r\\\\n        numPoints: event.data.buffer.byteLength / pointAttributes.byteSize,\\\\r\\\\n        pointAttributes,\\\\r\\\\n        scale: event.data.scale,\\\\r\\\\n        tightBoxMax: [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\\\\r\\\\n        tightBoxMin: [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\\\\r\\\\n        transferables: [],\\\\r\\\\n        version: new Version(event.data.version),\\\\r\\\\n    };\\\\r\\\\n    for (const pointAttribute of ctx.pointAttributes.attributes) {\\\\r\\\\n        decodeAndAddAttribute(pointAttribute, ctx);\\\\r\\\\n        ctx.currentOffset += pointAttribute.byteSize;\\\\r\\\\n    }\\\\r\\\\n    const indices = new ArrayBuffer(ctx.numPoints * 4);\\\\r\\\\n    const iIndices = new Uint32Array(indices);\\\\r\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\r\\\\n        iIndices[i] = i;\\\\r\\\\n    }\\\\r\\\\n    if (!ctx.attributeBuffers[PointAttributeName.CLASSIFICATION]) {\\\\r\\\\n        addEmptyClassificationBuffer(ctx);\\\\r\\\\n    }\\\\r\\\\n    const message = {\\\\r\\\\n        buffer: buffer,\\\\r\\\\n        mean: ctx.mean,\\\\r\\\\n        attributeBuffers: ctx.attributeBuffers,\\\\r\\\\n        tightBoundingBox: { min: ctx.tightBoxMin, max: ctx.tightBoxMax },\\\\r\\\\n        indices,\\\\r\\\\n    };\\\\r\\\\n    postMessage(message, ctx.transferables);\\\\r\\\\n}\\\\r\\\\nfunction addEmptyClassificationBuffer(ctx) {\\\\r\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4);\\\\r\\\\n    const classifications = new Float32Array(buffer);\\\\r\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\r\\\\n        classifications[i] = 0;\\\\r\\\\n    }\\\\r\\\\n    ctx.attributeBuffers[PointAttributeName.CLASSIFICATION] = {\\\\r\\\\n        buffer,\\\\r\\\\n        attribute: POINT_ATTRIBUTES.CLASSIFICATION,\\\\r\\\\n    };\\\\r\\\\n}\\\\r\\\\nfunction decodeAndAddAttribute(attribute, ctx) {\\\\r\\\\n    const decodedAttribute = decodePointAttribute(attribute, ctx);\\\\r\\\\n    if (decodedAttribute === undefined) {\\\\r\\\\n        return;\\\\r\\\\n    }\\\\r\\\\n    ctx.attributeBuffers[decodedAttribute.attribute.name] = decodedAttribute;\\\\r\\\\n    ctx.transferables.push(decodedAttribute.buffer);\\\\r\\\\n}\\\\r\\\\nfunction decodePointAttribute(attribute, ctx) {\\\\r\\\\n    switch (attribute.name) {\\\\r\\\\n        case PointAttributeName.POSITION_CARTESIAN:\\\\r\\\\n            return decodePositionCartesian(attribute, ctx);\\\\r\\\\n        case PointAttributeName.COLOR_PACKED:\\\\r\\\\n            return decodeColor(attribute, ctx);\\\\r\\\\n        case PointAttributeName.INTENSITY:\\\\r\\\\n            return decodeIntensity(attribute, ctx);\\\\r\\\\n        case PointAttributeName.CLASSIFICATION:\\\\r\\\\n            return decodeClassification(attribute, ctx);\\\\r\\\\n        case PointAttributeName.NORMAL_SPHEREMAPPED:\\\\r\\\\n            return decodeNormalSphereMapped(attribute, ctx);\\\\r\\\\n        case PointAttributeName.NORMAL_OCT16:\\\\r\\\\n            return decodeNormalOct16(attribute, ctx);\\\\r\\\\n        case PointAttributeName.NORMAL:\\\\r\\\\n            return decodeNormal(attribute, ctx);\\\\r\\\\n        default:\\\\r\\\\n            return undefined;\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\nfunction decodePositionCartesian(attribute, ctx) {\\\\r\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\r\\\\n    const positions = new Float32Array(buffer);\\\\r\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\r\\\\n        let x;\\\\r\\\\n        let y;\\\\r\\\\n        let z;\\\\r\\\\n        if (ctx.version.newerThan(\\\\\'1.3\\\\\')) {\\\\r\\\\n            x = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0) * ctx.scale;\\\\r\\\\n            y = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 4) * ctx.scale;\\\\r\\\\n            z = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 8) * ctx.scale;\\\\r\\\\n        }\\\\r\\\\n        else {\\\\r\\\\n            x = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 0) + ctx.nodeOffset[0];\\\\r\\\\n            y = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 4) + ctx.nodeOffset[1];\\\\r\\\\n            z = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 8) + ctx.nodeOffset[2];\\\\r\\\\n        }\\\\r\\\\n        positions[3 * i + 0] = x;\\\\r\\\\n        positions[3 * i + 1] = y;\\\\r\\\\n        positions[3 * i + 2] = z;\\\\r\\\\n        ctx.mean[0] += x / ctx.numPoints;\\\\r\\\\n        ctx.mean[1] += y / ctx.numPoints;\\\\r\\\\n        ctx.mean[2] += z / ctx.numPoints;\\\\r\\\\n        ctx.tightBoxMin[0] = Math.min(ctx.tightBoxMin[0], x);\\\\r\\\\n        ctx.tightBoxMin[1] = Math.min(ctx.tightBoxMin[1], y);\\\\r\\\\n        ctx.tightBoxMin[2] = Math.min(ctx.tightBoxMin[2], z);\\\\r\\\\n        ctx.tightBoxMax[0] = Math.max(ctx.tightBoxMax[0], x);\\\\r\\\\n        ctx.tightBoxMax[1] = Math.max(ctx.tightBoxMax[1], y);\\\\r\\\\n        ctx.tightBoxMax[2] = Math.max(ctx.tightBoxMax[2], z);\\\\r\\\\n    }\\\\r\\\\n    return { buffer, attribute };\\\\r\\\\n}\\\\r\\\\nfunction decodeColor(attribute, ctx) {\\\\r\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 3);\\\\r\\\\n    const colors = new Uint8Array(buffer);\\\\r\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\r\\\\n        colors[3 * i + 0] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0);\\\\r\\\\n        colors[3 * i + 1] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 1);\\\\r\\\\n        colors[3 * i + 2] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 2);\\\\r\\\\n    }\\\\r\\\\n    return { buffer, attribute };\\\\r\\\\n}\\\\r\\\\nfunction decodeIntensity(attribute, ctx) {\\\\r\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4);\\\\r\\\\n    const intensities = new Float32Array(buffer);\\\\r\\\\n    for (let i = 0; i < ctx.numPoints; i++) {\\\\r\\\\n        intensities[i] = ctx.data.getUint16(ctx.currentOffset + i * ctx.pointAttributes.byteSize);\\\\r\\\\n    }\\\\r\\\\n    return { buffer, attribute };\\\\r\\\\n}\\\\r\\\\nfunction decodeClassification(attribute, ctx) {\\\\r\\\\n    const buffer = new ArrayBuffer(ctx.numPoints);\\\\r\\\\n    const classifications = new Uint8Array(buffer);\\\\r\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\r\\\\n        classifications[j] = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize);\\\\r\\\\n    }\\\\r\\\\n    return { buffer, attribute };\\\\r\\\\n}\\\\r\\\\nfunction decodeNormalSphereMapped(attribute, ctx) {\\\\r\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\r\\\\n    const normals = new Float32Array(buffer);\\\\r\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\r\\\\n        const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\r\\\\n        const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\\\\r\\\\n        const ex = bx / 255;\\\\r\\\\n        const ey = by / 255;\\\\r\\\\n        let nx = ex * 2 - 1;\\\\r\\\\n        let ny = ey * 2 - 1;\\\\r\\\\n        let nz = 1;\\\\r\\\\n        const nw = -1;\\\\r\\\\n        const l = nx * -nx + ny * -ny + nz * -nw;\\\\r\\\\n        nz = l;\\\\r\\\\n        nx = nx * Math.sqrt(l);\\\\r\\\\n        ny = ny * Math.sqrt(l);\\\\r\\\\n        nx = nx * 2;\\\\r\\\\n        ny = ny * 2;\\\\r\\\\n        nz = nz * 2 - 1;\\\\r\\\\n        normals[3 * j + 0] = nx;\\\\r\\\\n        normals[3 * j + 1] = ny;\\\\r\\\\n        normals[3 * j + 2] = nz;\\\\r\\\\n    }\\\\r\\\\n    return { buffer, attribute };\\\\r\\\\n}\\\\r\\\\nfunction decodeNormalOct16(attribute, ctx) {\\\\r\\\\n    const buff = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\r\\\\n    const normals = new Float32Array(buff);\\\\r\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\r\\\\n        const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\r\\\\n        const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\\\\r\\\\n        const u = (bx / 255) * 2 - 1;\\\\r\\\\n        const v = (by / 255) * 2 - 1;\\\\r\\\\n        let z = 1 - Math.abs(u) - Math.abs(v);\\\\r\\\\n        let x = 0;\\\\r\\\\n        let y = 0;\\\\r\\\\n        if (z >= 0) {\\\\r\\\\n            x = u;\\\\r\\\\n            y = v;\\\\r\\\\n        }\\\\r\\\\n        else {\\\\r\\\\n            x = -(v / mathSign(v) - 1) / mathSign(u);\\\\r\\\\n            y = -(u / mathSign(u) - 1) / mathSign(v);\\\\r\\\\n        }\\\\r\\\\n        const length = Math.sqrt(x * x + y * y + z * z);\\\\r\\\\n        x = x / length;\\\\r\\\\n        y = y / length;\\\\r\\\\n        z = z / length;\\\\r\\\\n        normals[3 * j + 0] = x;\\\\r\\\\n        normals[3 * j + 1] = y;\\\\r\\\\n        normals[3 * j + 2] = z;\\\\r\\\\n    }\\\\r\\\\n    return { buffer: buff, attribute };\\\\r\\\\n}\\\\r\\\\nfunction decodeNormal(attribute, ctx) {\\\\r\\\\n    const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\\\\r\\\\n    const normals = new Float32Array(buffer);\\\\r\\\\n    for (let j = 0; j < ctx.numPoints; j++) {\\\\r\\\\n        const x = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\\\\r\\\\n        const y = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 4);\\\\r\\\\n        const z = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 8);\\\\r\\\\n        normals[3 * j + 0] = x;\\\\r\\\\n        normals[3 * j + 1] = y;\\\\r\\\\n        normals[3 * j + 2] = z;\\\\r\\\\n    }\\\\r\\\\n    return { buffer, attribute };\\\\r\\\\n}\\\\r\\\\n\\\\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/workers/binary-decoder.worker.js\\\\n\\\\n\\\\n/*eslint-disable */\\\\nonmessage = handleMessage;//# sourceURL=[module]\\\\n\')}},__webpack_exports__={};__webpack_modules__[717]()})();", "Worker", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///91\n')},512:module=>{eval('\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor]("data:application/javascript,".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error("Inline worker is not supported");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvdHJlZS8uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanM/ZWNkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmLCBuby11c2UtYmVmb3JlLWRlZmluZSwgbmV3LWNhcCAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgd29ya2VyQ29uc3RydWN0b3IsIHdvcmtlck9wdGlvbnMsIHVybCkge1xuICB2YXIgZ2xvYmFsU2NvcGUgPSBzZWxmIHx8IHdpbmRvdztcblxuICB0cnkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgYmxvYjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gTmV3IEFQSVxuICAgICAgICBibG9iID0gbmV3IGdsb2JhbFNjb3BlLkJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gQmxvYkJ1aWxkZXIgPSBEZXByZWNhdGVkLCBidXQgd2lkZWx5IGltcGxlbWVudGVkXG4gICAgICAgIHZhciBCbG9iQnVpbGRlciA9IGdsb2JhbFNjb3BlLkJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLldlYktpdEJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLk1vekJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLk1TQmxvYkJ1aWxkZXI7XG4gICAgICAgIGJsb2IgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgICAgICAgYmxvYi5hcHBlbmQoY29udGVudCk7XG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIFVSTCA9IGdsb2JhbFNjb3BlLlVSTCB8fCBnbG9iYWxTY29wZS53ZWJraXRVUkw7XG4gICAgICB2YXIgb2JqZWN0VVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgIHZhciB3b3JrZXIgPSBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKG9iamVjdFVSTCwgd29ya2VyT3B0aW9ucyk7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVSTCk7XG4gICAgICByZXR1cm4gd29ya2VyO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKFwiZGF0YTphcHBsaWNhdGlvbi9qYXZhc2NyaXB0LFwiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoY29udGVudCkpLCB3b3JrZXJPcHRpb25zKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJJbmxpbmUgd29ya2VyIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0odXJsLCB3b3JrZXJPcHRpb25zKTtcbiAgfVxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///512\n')},604:g=>{g.exports=__WEBPACK_EXTERNAL_MODULE__604__}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var t=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=g=>{var I=g&&g.__esModule?()=>g.default:()=>g;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(g,I)=>{for(var t in I)__webpack_require__.o(I,t)&&!__webpack_require__.o(g,t)&&Object.defineProperty(g,t,{enumerable:!0,get:I[t]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(238);return __webpack_exports__})()));
\ No newline at end of file
diff --git a/package.json b/package.json
index ac72867527bc13123bf44223c334028ef0b3653c..1f5bcc207073c1dba4e6d321c1d472676c2dbea3 100644
--- a/package.json
+++ b/package.json
@@ -27,13 +27,13 @@
   },
   "dependencies": {},
   "peerDependencies": {
-    "three": "~0.160.0"
+    "three": ">=0.160.0"
   },
   "devDependencies": {
     "@babel/core": "^7.17.8",
     "@babel/preset-env": "^7.16.11",
     "@types/node": "^17.0.23",
-    "@types/three": "~0.160.0",
+    "@types/three": "^0.160.0",
     "babel-core": "^6.26.3",
     "babel-loader": "^8.2.4",
     "babel-preset-env": "^1.7.0",
@@ -48,7 +48,7 @@
     "size-plugin": "^3.0.0",
     "standard-version": "^9.3.2",
     "style-loader": "^3.3.1",
-    "three": "~0.160.0",
+    "three": "^0.160.0",
     "ts-loader": "^9.4.2",
     "tslint": "^6.1.3",
     "typescript": "^4.6.3",
diff --git a/src/materials/clipping.ts b/src/materials/clipping.ts
index 9caad1f565077fc64e069237bf4bd1a41993e656..033c35cb70eac68ee4fe7ad3acad714f1d84b96d 100644
--- a/src/materials/clipping.ts
+++ b/src/materials/clipping.ts
@@ -1,4 +1,4 @@
-import { Box3, Matrix4, Vector3 } from 'three';
+import { Box3, Color, Matrix4, Vector3 } from 'three';
 
 export enum ClipMode {
   DISABLED = 0,
@@ -13,4 +13,5 @@ export interface IClipBox {
   inverse: Matrix4;
   matrix: Matrix4;
   position: Vector3;
+  color?: Color
 }
diff --git a/src/materials/point-cloud-material.ts b/src/materials/point-cloud-material.ts
index a580d87beabb3c68ef417412a6511070aa86c77a..57f9ed4086e192212716735f470733f2d7739d4f 100644
--- a/src/materials/point-cloud-material.ts
+++ b/src/materials/point-cloud-material.ts
@@ -62,6 +62,7 @@ export interface IPointCloudMaterialUniforms {
   classificationLUT: IUniform<Texture>;
   clipBoxCount: IUniform<number>;
   clipBoxes: IUniform<Float32Array>;
+  clipHighlightColors: IUniform<Float32Array>;
   clipExtent: IUniform<[number, number, number, number]>;
   depthMap: IUniform<Texture | null>;
   diffuse: IUniform<[number, number, number]>;
@@ -194,6 +195,7 @@ export class PointCloudMaterial extends RawShaderMaterial {
     classificationLUT: makeUniform('t', this.classificationTexture || new Texture()),
     clipBoxCount: makeUniform('f', 0),
     clipBoxes: makeUniform('Matrix4fv', [] as any),
+    clipHighlightColors: makeUniform('fv', new Float32Array()),
     clipExtent: makeUniform('fv', [0.0, 0.0, 1.0, 1.0] as [number, number, number, number]),
     depthMap: makeUniform('t', null),
     diffuse: makeUniform('fv', [1, 1, 1] as [number, number, number]),
@@ -503,9 +505,13 @@ export class PointCloudMaterial extends RawShaderMaterial {
 
     const clipBoxesLength = this.numClipBoxes * 16;
     const clipBoxesArray = new Float32Array(clipBoxesLength);
+    
+    const clipColorsLength = this.numClipBoxes * 3;
+    const clipColorsArray = new Float32Array(clipColorsLength);
 
     for (let i = 0; i < this.numClipBoxes; i++) {
       clipBoxesArray.set(clipBoxes[i].inverse.elements, 16 * i);
+      clipColorsArray.set((clipBoxes[i].color || this.color).toArray(), 3 * i);
     }
 
     for (let i = 0; i < clipBoxesLength; i++) {
@@ -515,6 +521,7 @@ export class PointCloudMaterial extends RawShaderMaterial {
     }
 
     this.setUniform('clipBoxes', clipBoxesArray);
+    this.setUniform('clipHighlightColors', clipColorsArray);
   }
 
   get gradient(): IGradient {
diff --git a/src/materials/shaders/pointcloud.vert b/src/materials/shaders/pointcloud.vert
index 9b759799364346dce6901cc73bee2773f5c6aabd..9136e95af7429f0381058e33917018bc3f960c26 100644
--- a/src/materials/shaders/pointcloud.vert
+++ b/src/materials/shaders/pointcloud.vert
@@ -34,6 +34,7 @@ uniform float spacing;
 
 #if defined use_clip_box
 	uniform mat4 clipBoxes[max_clip_boxes];
+	uniform vec3 clipHighlightColors[max_clip_boxes];
 #endif
 
 uniform float heightMin;
@@ -565,6 +566,7 @@ void main() {
 
 	#if defined use_clip_box
 		bool insideAny = false;
+		vec3 highlightColor = vec3(0.0);
 		for (int i = 0; i < max_clip_boxes; i++) {
 			if (i == int(clipBoxCount)) {
 				break;
@@ -575,6 +577,9 @@ void main() {
 			inside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;
 			inside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;
 			insideAny = insideAny || inside;
+			if (inside) {
+				highlightColor += clipHighlightColors[i].xyz;
+			}
 		}
 
 		if (!insideAny) {
@@ -585,7 +590,7 @@ void main() {
 			#endif
 		} else {
 			#if defined clip_highlight_inside
-				vColor.r += 0.5;
+				vColor.rgb += highlightColor; 
 			#endif
 		}
 	#endif
